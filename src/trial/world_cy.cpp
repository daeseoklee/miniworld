/* Generated by Cython 0.29.13 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++",
        "name": "world_cy",
        "sources": [
            "./world_cy.pyx"
        ]
    },
    "module_name": "world_cy"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_13"
#define CYTHON_HEX_VERSION 0x001D0DF0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__world_cy
#define __PYX_HAVE_API__world_cy
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <math.h>
#include "pythread.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "stringsource",
  "world_cy.pyx",
};
/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && __GNUC__ >= 4 && (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL >= 2)) &&\
                    !defined(__i386__)
    #define __pyx_atomic_incr_aligned(value, lock) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value, lock) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && 0
    #include <Windows.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type LONG
    #define __pyx_atomic_incr_aligned(value, lock) InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#elif CYTHON_ATOMICS && (defined(__ICC) || defined(__INTEL_COMPILER)) && 0
    #define __pyx_atomic_incr_aligned(value, lock) _InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) _InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using Intel atomics"
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/*--- Type declarations ---*/
struct __pyx_obj_8world_cy_ColorTrait;
struct __pyx_obj_8world_cy_PositiveTrait;
struct __pyx_obj_8world_cy_UnitTrait;
struct __pyx_obj_8world_cy_FloatListTrait;
struct __pyx_obj_8world_cy_LinearDNA;
struct __pyx_obj_8world_cy_Brain;
struct __pyx_obj_8world_cy_LinearBrain;
struct __pyx_obj_8world_cy_Minion;
struct __pyx_obj_8world_cy_MinionDLLNode;
struct __pyx_obj_8world_cy_MinionDLL;
struct __pyx_obj_8world_cy_World;
struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l;
struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors;
struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect;
struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;
struct __pyx_ctuple_int__and_int__and_int;
typedef struct __pyx_ctuple_int__and_int__and_int __pyx_ctuple_int__and_int__and_int;
struct __pyx_ctuple_68ea0____dunderpyx_ctuple_int__dunderand_int__dunderand_int__and_double__and_double__and_double__etc;
typedef struct __pyx_ctuple_68ea0____dunderpyx_ctuple_int__dunderand_int__dunderand_int__and_double__and_double__and_double__etc __pyx_ctuple_68ea0____dunderpyx_ctuple_int__dunderand_int__dunderand_int__and_double__and_double__and_double__etc;
struct __pyx_ctuple_int__and_int;
typedef struct __pyx_ctuple_int__and_int __pyx_ctuple_int__and_int;

/* "world_cy.pxd":32
 *     cdef double normalized_difference(FloatListTrait t1,FloatListTrait t2)
 * 
 * cpdef LinearDNA randLinearDNA_with((int,int,int) c,double mst_a,double utt_a,double mat_a)             # <<<<<<<<<<<<<<
 * 
 * cpdef LinearDNA randLinearDNA()
 */
struct __pyx_ctuple_int__and_int__and_int {
  int f0;
  int f1;
  int f2;
};

/* "world_cy.pxd":46
 *         bint mergeable(self,LinearDNA dna)
 *         LinearDNA merge(self,LinearDNA dna)
 *         ((int,int,int),double,double,double) translate(self)             # <<<<<<<<<<<<<<
 *         double[:] translate_weights(self)
 * 
 */
struct __pyx_ctuple_68ea0____dunderpyx_ctuple_int__dunderand_int__dunderand_int__and_double__and_double__and_double__etc {
  __pyx_ctuple_int__and_int__and_int f0;
  double f1;
  double f2;
  double f3;
};

/* "world_cy.pxd":60
 * 
 * 
 * cpdef Minion construct_minion(LinearDNA dna,int alen,(int,int) pos,bint do_freeze)             # <<<<<<<<<<<<<<
 * 
 * cdef class Minion():
 */
struct __pyx_ctuple_int__and_int {
  int f0;
  int f1;
};

/* "world_cy.pxd":4
 * from libcpp.vector cimport vector
 * 
 * cdef class ColorTrait():             # <<<<<<<<<<<<<<
 *     cdef int r,g,b
 *     cdef void mutate(self,double rate)
 */
struct __pyx_obj_8world_cy_ColorTrait {
  PyObject_HEAD
  struct __pyx_vtabstruct_8world_cy_ColorTrait *__pyx_vtab;
  int r;
  int g;
  int b;
};


/* "world_cy.pxd":11
 * 
 * 
 * cdef class PositiveTrait():             # <<<<<<<<<<<<<<
 *     cdef double a
 *     cdef double eps
 */
struct __pyx_obj_8world_cy_PositiveTrait {
  PyObject_HEAD
  struct __pyx_vtabstruct_8world_cy_PositiveTrait *__pyx_vtab;
  double a;
  double eps;
};


/* "world_cy.pxd":18
 *     cdef double normalized_difference(PositiveTrait t1,PositiveTrait t2)
 * 
 * cdef class UnitTrait():             # <<<<<<<<<<<<<<
 *     cdef double a
 *     cdef double eps
 */
struct __pyx_obj_8world_cy_UnitTrait {
  PyObject_HEAD
  struct __pyx_vtabstruct_8world_cy_UnitTrait *__pyx_vtab;
  double a;
  double eps;
};


/* "world_cy.pxd":25
 *     cdef double normalized_difference(UnitTrait t1,UnitTrait t2)
 * 
 * cdef class FloatListTrait():             # <<<<<<<<<<<<<<
 *     cdef double[:] l
 *     cdef size_t[:] group_sizes
 */
struct __pyx_obj_8world_cy_FloatListTrait {
  PyObject_HEAD
  struct __pyx_vtabstruct_8world_cy_FloatListTrait *__pyx_vtab;
  __Pyx_memviewslice l;
  __Pyx_memviewslice group_sizes;
};


/* "world_cy.pxd":36
 * cpdef LinearDNA randLinearDNA()
 * 
 * cdef class LinearDNA():             # <<<<<<<<<<<<<<
 *     cdef:
 *         ColorTrait colorTrait
 */
struct __pyx_obj_8world_cy_LinearDNA {
  PyObject_HEAD
  struct __pyx_vtabstruct_8world_cy_LinearDNA *__pyx_vtab;
  struct __pyx_obj_8world_cy_ColorTrait *colorTrait;
  struct __pyx_obj_8world_cy_PositiveTrait *maxsizeTrait;
  struct __pyx_obj_8world_cy_UnitTrait *uptakeTrait;
  struct __pyx_obj_8world_cy_PositiveTrait *maxageTrait;
  struct __pyx_obj_8world_cy_FloatListTrait *weightsTrait;
};


/* "world_cy.pxd":50
 * 
 * 
 * cdef class Brain():             # <<<<<<<<<<<<<<
 *     cdef double[:] weights
 *     cdef void control(self,Minion mi,double[:] inp)
 */
struct __pyx_obj_8world_cy_Brain {
  PyObject_HEAD
  struct __pyx_vtabstruct_8world_cy_Brain *__pyx_vtab;
  __Pyx_memviewslice weights;
};


/* "world_cy.pxd":56
 * cdef double[:] apply_linear(double[:] v,double[:] A)
 * 
 * cdef class LinearBrain(Brain):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_8world_cy_LinearBrain {
  struct __pyx_obj_8world_cy_Brain __pyx_base;
};


/* "world_cy.pxd":62
 * cpdef Minion construct_minion(LinearDNA dna,int alen,(int,int) pos,bint do_freeze)
 * 
 * cdef class Minion():             # <<<<<<<<<<<<<<
 *     cdef:
 *         (int,int,int) color
 */
struct __pyx_obj_8world_cy_Minion {
  PyObject_HEAD
  struct __pyx_vtabstruct_8world_cy_Minion *__pyx_vtab;
  __pyx_ctuple_int__and_int__and_int color;
  double maxsize;
  double uptake;
  double maxage;
  struct __pyx_obj_8world_cy_Brain *brain;
  int idim;
  struct __pyx_obj_8world_cy_LinearDNA *dna;
  int id;
  __pyx_ctuple_int__and_int pos;
  int age;
  int dead;
  int alen;
  double mass;
  int action;
  int move_direc;
  double move_dist;
  int cum_dist;
  int frozen;
  struct __pyx_obj_8world_cy_MinionDLLNode *node;
  double max_energy;
  double energy;
  double avg_consum_rate;
  double basal_metabolic_rate;
  double move_consum_rate;
  double stretch_consum_rate;
  double sex_consum_rate;
  double birth_consum_rate;
};


/* "world_cy.pxd":108
 * 
 * 
 * cdef class MinionDLLNode():             # <<<<<<<<<<<<<<
 *     cdef:
 *         Minion mi
 */
struct __pyx_obj_8world_cy_MinionDLLNode {
  PyObject_HEAD
  struct __pyx_obj_8world_cy_Minion *mi;
  struct __pyx_obj_8world_cy_MinionDLLNode *prev;
  struct __pyx_obj_8world_cy_MinionDLLNode *next;
  int is_tail;
  struct __pyx_obj_8world_cy_MinionDLL *dll;
};


/* "world_cy.pxd":115
 *         bint is_tail
 *         MinionDLL dll
 * cdef class MinionDLL():             # <<<<<<<<<<<<<<
 *     cdef:
 *         int len
 */
struct __pyx_obj_8world_cy_MinionDLL {
  PyObject_HEAD
  struct __pyx_vtabstruct_8world_cy_MinionDLL *__pyx_vtab;
  int len;
  struct __pyx_obj_8world_cy_MinionDLLNode *head;
  struct __pyx_obj_8world_cy_MinionDLLNode *tail;
  struct __pyx_obj_8world_cy_MinionDLLNode *current;
};


/* "world_cy.pxd":132
 * 
 * 
 * cdef class World:             # <<<<<<<<<<<<<<
 *     cdef:
 *         int[:,:] snapshot
 */
struct __pyx_obj_8world_cy_World {
  PyObject_HEAD
  struct __pyx_vtabstruct_8world_cy_World *__pyx_vtab;
  __Pyx_memviewslice snapshot;
  int xsize;
  int ysize;
  int moment;
  int new_id;
  __Pyx_memviewslice mins;
  struct __pyx_obj_8world_cy_MinionDLL *mis;
  std::vector<__pyx_ctuple_int__and_int__and_int>  pedigree;
  __Pyx_memviewslice occupy_map;
  int no_age;
  int no_birth;
  int no_eat;
  int no_energy;
  int no_excrete;
  int no_hunt;
  int messiness;
  int halluc;
  double hidden_mass;
  int record_pedigree;
};


/* "world_cy.pyx":219
 *         self.l=l
 *         self.group_sizes=group_sizes
 *     def yield_l(self):             # <<<<<<<<<<<<<<
 *         for i in range(self.l.shape[0]):
 *             yield self.l[i]
 */
struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l {
  PyObject_HEAD
  Py_ssize_t __pyx_v_i;
  struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_self;
  Py_ssize_t __pyx_t_0;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
};


/* "world_cy.pyx":1592
 *     def get_population(self):
 *         return self.mis.len
 *     def get_colors(self):             # <<<<<<<<<<<<<<
 *         for mi in self.mis:
 *             yield mi.color
 */
struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors {
  PyObject_HEAD
  PyObject *__pyx_v_mi;
  struct __pyx_obj_8world_cy_World *__pyx_v_self;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "world_cy.pyx":1605
 * 
 *     #for use in visualization
 *     def body_rect(self,k):             # <<<<<<<<<<<<<<
 *         #called in: play.py
 *         for mi in self.mis:
 */
struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect {
  PyObject_HEAD
  PyObject *__pyx_v_alen;
  PyObject *__pyx_v_k;
  PyObject *__pyx_v_mi;
  struct __pyx_obj_8world_cy_World *__pyx_v_self;
  PyObject *__pyx_v_x;
  PyObject *__pyx_v_y;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "world_cy.pyx":1611
 *             alen=mi.get_alen()
 *             yield mi.get_color(),(k*(x-alen),k*(y-alen),k*(1+2*alen),k*(1+2*alen))
 *     def geni_rect(self,k):             # <<<<<<<<<<<<<<
 *         #called in: play.py
 *         for mi in self.mis:
 */
struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect {
  PyObject_HEAD
  PyObject *__pyx_v_alen;
  PyObject *__pyx_v_color;
  PyObject *__pyx_v_k;
  PyObject *__pyx_v_mi;
  PyObject *__pyx_v_move_direc;
  struct __pyx_obj_8world_cy_World *__pyx_v_self;
  PyObject *__pyx_v_x;
  PyObject *__pyx_v_y;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":279
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "world_cy.pyx":75
 *     mut_per_diff=new_mut_per_diff
 * 
 * cdef class ColorTrait():             # <<<<<<<<<<<<<<
 *     def __cinit__(self,int r,int g,int b):
 *         self.r=r
 */

struct __pyx_vtabstruct_8world_cy_ColorTrait {
  void (*mutate)(struct __pyx_obj_8world_cy_ColorTrait *, double);
  struct __pyx_obj_8world_cy_ColorTrait *(*mixed)(struct __pyx_obj_8world_cy_ColorTrait *, struct __pyx_obj_8world_cy_ColorTrait *);
  double (*normalized_difference)(struct __pyx_obj_8world_cy_ColorTrait *, struct __pyx_obj_8world_cy_ColorTrait *);
};
static struct __pyx_vtabstruct_8world_cy_ColorTrait *__pyx_vtabptr_8world_cy_ColorTrait;


/* "world_cy.pyx":159
 * 
 * 
 * cdef class PositiveTrait():             # <<<<<<<<<<<<<<
 *     def __cinit__(self,double a):
 *         self.eps=0.001
 */

struct __pyx_vtabstruct_8world_cy_PositiveTrait {
  void (*mutate)(struct __pyx_obj_8world_cy_PositiveTrait *, double);
  struct __pyx_obj_8world_cy_PositiveTrait *(*mixed)(struct __pyx_obj_8world_cy_PositiveTrait *, struct __pyx_obj_8world_cy_PositiveTrait *);
  double (*normalized_difference)(struct __pyx_obj_8world_cy_PositiveTrait *, struct __pyx_obj_8world_cy_PositiveTrait *);
};
static struct __pyx_vtabstruct_8world_cy_PositiveTrait *__pyx_vtabptr_8world_cy_PositiveTrait;


/* "world_cy.pyx":186
 * 
 * 
 * cdef class UnitTrait():             # <<<<<<<<<<<<<<
 *     def __cinit__(self,double a):
 *         self.eps=0.001
 */

struct __pyx_vtabstruct_8world_cy_UnitTrait {
  void (*mutate)(struct __pyx_obj_8world_cy_UnitTrait *, double);
  struct __pyx_obj_8world_cy_UnitTrait *(*mixed)(struct __pyx_obj_8world_cy_UnitTrait *, struct __pyx_obj_8world_cy_UnitTrait *);
  double (*normalized_difference)(struct __pyx_obj_8world_cy_UnitTrait *, struct __pyx_obj_8world_cy_UnitTrait *);
};
static struct __pyx_vtabstruct_8world_cy_UnitTrait *__pyx_vtabptr_8world_cy_UnitTrait;


/* "world_cy.pyx":215
 *         normalizer=max(t1.a,t2.a)
 *         return difference/normalizer
 * cdef class FloatListTrait():             # <<<<<<<<<<<<<<
 *     def __cinit__(self,double[:] l,size_t[:] group_sizes):
 *         self.l=l
 */

struct __pyx_vtabstruct_8world_cy_FloatListTrait {
  void (*mutate)(struct __pyx_obj_8world_cy_FloatListTrait *, double);
  struct __pyx_obj_8world_cy_FloatListTrait *(*mixed)(struct __pyx_obj_8world_cy_FloatListTrait *, struct __pyx_obj_8world_cy_FloatListTrait *);
  double (*normalized_difference)(struct __pyx_obj_8world_cy_FloatListTrait *, struct __pyx_obj_8world_cy_FloatListTrait *);
};
static struct __pyx_vtabstruct_8world_cy_FloatListTrait *__pyx_vtabptr_8world_cy_FloatListTrait;


/* "world_cy.pyx":462
 * 
 * 
 * cdef class LinearDNA():             # <<<<<<<<<<<<<<
 *     def __cinit__(self,ColorTrait colorTrait,PositiveTrait maxsizeTrait,UnitTrait uptakeTrait,PositiveTrait maxageTrait,FloatListTrait weightsTrait):
 *         self.colorTrait=colorTrait
 */

struct __pyx_vtabstruct_8world_cy_LinearDNA {
  int (*mergeable)(struct __pyx_obj_8world_cy_LinearDNA *, struct __pyx_obj_8world_cy_LinearDNA *);
  struct __pyx_obj_8world_cy_LinearDNA *(*merge)(struct __pyx_obj_8world_cy_LinearDNA *, struct __pyx_obj_8world_cy_LinearDNA *);
  __pyx_ctuple_68ea0____dunderpyx_ctuple_int__dunderand_int__dunderand_int__and_double__and_double__and_double__etc (*translate)(struct __pyx_obj_8world_cy_LinearDNA *);
  __Pyx_memviewslice (*translate_weights)(struct __pyx_obj_8world_cy_LinearDNA *);
};
static struct __pyx_vtabstruct_8world_cy_LinearDNA *__pyx_vtabptr_8world_cy_LinearDNA;


/* "world_cy.pyx":509
 * #--------------------------------------------------------------
 * 
 * cdef class Brain():             # <<<<<<<<<<<<<<
 *     cdef void control(self,Minion mi,double[:] inp):
 *         pass
 */

struct __pyx_vtabstruct_8world_cy_Brain {
  void (*control)(struct __pyx_obj_8world_cy_Brain *, struct __pyx_obj_8world_cy_Minion *, __Pyx_memviewslice);
};
static struct __pyx_vtabstruct_8world_cy_Brain *__pyx_vtabptr_8world_cy_Brain;


/* "world_cy.pyx":531
 * 
 * 
 * cdef class LinearBrain(Brain):             # <<<<<<<<<<<<<<
 *     def __cinit__(self,double[:] weights,bint init=False):
 *         if init:
 */

struct __pyx_vtabstruct_8world_cy_LinearBrain {
  struct __pyx_vtabstruct_8world_cy_Brain __pyx_base;
};
static struct __pyx_vtabstruct_8world_cy_LinearBrain *__pyx_vtabptr_8world_cy_LinearBrain;


/* "world_cy.pyx":571
 * 
 * 
 * cdef class Minion():             # <<<<<<<<<<<<<<
 *     def __cinit__(self,LinearDNA dna):
 *         self.dna=dna
 */

struct __pyx_vtabstruct_8world_cy_Minion {
  int (*increase_age)(struct __pyx_obj_8world_cy_Minion *);
  double (*energy_with_constant)(struct __pyx_obj_8world_cy_Minion *, double);
  void (*take_energy)(struct __pyx_obj_8world_cy_Minion *, double);
  int (*loss_energy)(struct __pyx_obj_8world_cy_Minion *, double);
  void (*adjust_energy_from_mass)(struct __pyx_obj_8world_cy_Minion *);
  void (*take_mass)(struct __pyx_obj_8world_cy_Minion *, double);
  void (*loss_mass)(struct __pyx_obj_8world_cy_Minion *, double);
  int (*mergeable)(struct __pyx_obj_8world_cy_Minion *, struct __pyx_obj_8world_cy_Minion *);
  struct __pyx_obj_8world_cy_Minion *(*get_child)(struct __pyx_obj_8world_cy_Minion *, struct __pyx_obj_8world_cy_Minion *);
  __Pyx_memviewslice (*get_input)(struct __pyx_obj_8world_cy_Minion *, __Pyx_memviewslice);
};
static struct __pyx_vtabstruct_8world_cy_Minion *__pyx_vtabptr_8world_cy_Minion;


/* "world_cy.pyx":712
 *         dll.push_py(mi)
 *     return dll
 * cdef class MinionDLL():             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         self.len=0
 */

struct __pyx_vtabstruct_8world_cy_MinionDLL {
  struct __pyx_obj_8world_cy_MinionDLLNode *(*prev)(struct __pyx_obj_8world_cy_MinionDLL *, struct __pyx_obj_8world_cy_MinionDLLNode *);
  struct __pyx_obj_8world_cy_MinionDLLNode *(*next)(struct __pyx_obj_8world_cy_MinionDLL *, struct __pyx_obj_8world_cy_MinionDLLNode *);
  struct __pyx_obj_8world_cy_MinionDLLNode *(*push)(struct __pyx_obj_8world_cy_MinionDLL *, struct __pyx_obj_8world_cy_Minion *);
  struct __pyx_obj_8world_cy_MinionDLLNode *(*remove_and_get_next)(struct __pyx_obj_8world_cy_MinionDLL *, struct __pyx_obj_8world_cy_MinionDLLNode *);
  void (*remove_by_link)(struct __pyx_obj_8world_cy_MinionDLL *, struct __pyx_obj_8world_cy_Minion *);
  void (*remove_by_search)(struct __pyx_obj_8world_cy_MinionDLL *, struct __pyx_obj_8world_cy_Minion *);
  int (*contains)(struct __pyx_obj_8world_cy_MinionDLL *, struct __pyx_obj_8world_cy_Minion *);
};
static struct __pyx_vtabstruct_8world_cy_MinionDLL *__pyx_vtabptr_8world_cy_MinionDLL;


/* "world_cy.pyx":823
 *     return min(y-x,T+x-y)
 * 
 * cdef class World():             # <<<<<<<<<<<<<<
 *     def __cinit__(self,int xsize,int ysize,double total_mass,MinionDLL mis,\
 *                   bint no_age=False,bint no_birth=False,bint no_eat=False,\
 */

struct __pyx_vtabstruct_8world_cy_World {
  void (*__pyx_register)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *);
  void (*unregister_deads)(struct __pyx_obj_8world_cy_World *);
  void (*take_mass)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, double);
  void (*loss_mass)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, double);
  void (*take_energy)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, double);
  int (*loss_energy)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, double);
  void (*childbirth)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, struct __pyx_obj_8world_cy_Minion *);
  int (*huntable)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, struct __pyx_obj_8world_cy_Minion *);
  void (*mk_corpse)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *);
  void (*kill)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, int);
  void (*kill_elderly)(struct __pyx_obj_8world_cy_World *);
  void (*hunt)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, struct __pyx_obj_8world_cy_Minion *);
  void (*move)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *);
  void (*stretch)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *);
  void (*excrete)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, double);
  void (*digest)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, double);
  void (*try_hunt)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *);
  void (*eat)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *);
  void (*act)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *);
  void (*basal_metabolism)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *);
  void (*control_all)(struct __pyx_obj_8world_cy_World *);
  void (*act_all)(struct __pyx_obj_8world_cy_World *);
  void (*basal_metabolism_all)(struct __pyx_obj_8world_cy_World *);
  void (*render)(struct __pyx_obj_8world_cy_World *);
  double (*_total_mass)(struct __pyx_obj_8world_cy_World *);
  double (*_total_minion_mass)(struct __pyx_obj_8world_cy_World *);
  double (*_total_min)(struct __pyx_obj_8world_cy_World *);
  int (*_exhausted)(struct __pyx_obj_8world_cy_World *);
  double (*_get_avg_r)(struct __pyx_obj_8world_cy_World *);
  double (*_get_avg_g)(struct __pyx_obj_8world_cy_World *);
  double (*_get_avg_b)(struct __pyx_obj_8world_cy_World *);
};
static struct __pyx_vtabstruct_8world_cy_World *__pyx_vtabptr_8world_cy_World;


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
  static PyCodeObject *__pyx_frame_code = NULL;\
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
  int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
                  (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          tstate->tracing++;\
          tstate->use_tracing = 0;\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          tstate->use_tracing = 1;\
          tstate->tracing--;\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      tstate->tracing++;
      tstate->use_tracing = 0;
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      tstate->use_tracing = 1;
      tstate->tracing--;
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (tstate->use_tracing) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (tstate->use_tracing) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      tstate->tracing++;
      tstate->use_tracing = 0;
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      tstate->use_tracing = 1;
      tstate->tracing--;
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?\
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* None.proto */
static CYTHON_INLINE int __Pyx_mod_int(int, int);

/* None.proto */
static CYTHON_INLINE long __Pyx_mod_long(long, long);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE int __Pyx_div_int(int, int);

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

/* None.proto */
static CYTHON_INLINE double __Pyx_mod_double(double, double);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* None.proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* None.proto */
#include <new>

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_double(PyObject *, int writable_flag);

/* None.proto */
static CYTHON_INLINE long __Pyx_pow_long(long, long);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_size_t(PyObject *, int writable_flag);

/* FromPyCTupleUtility.proto */
static __pyx_ctuple_int__and_int__and_int __pyx_convert__from_py___pyx_ctuple_int__and_int__and_int(PyObject *);

/* FromPyCTupleUtility.proto */
static __pyx_ctuple_int__and_int __pyx_convert__from_py___pyx_ctuple_int__and_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_size_t(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_size_t(const char *itemp, PyObject *obj);

/* ToPyCTupleUtility.proto */
static PyObject* __pyx_convert__to_py___pyx_ctuple_int__and_int(__pyx_ctuple_int__and_int);

/* ToPyCTupleUtility.proto */
static PyObject* __pyx_convert__to_py___pyx_ctuple_int__and_int__and_int(__pyx_ctuple_int__and_int__and_int);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_int(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_double(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_object(PyObject *, int writable_flag);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_8world_cy_10ColorTrait_mutate(struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_self, double __pyx_v_rate); /* proto*/
static struct __pyx_obj_8world_cy_ColorTrait *__pyx_f_8world_cy_10ColorTrait_mixed(struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_t1, struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_t2); /* proto*/
static double __pyx_f_8world_cy_10ColorTrait_normalized_difference(struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_t1, struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_t2); /* proto*/
static void __pyx_f_8world_cy_13PositiveTrait_mutate(struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_self, double __pyx_v_rate); /* proto*/
static struct __pyx_obj_8world_cy_PositiveTrait *__pyx_f_8world_cy_13PositiveTrait_mixed(struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_t1, struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_t2); /* proto*/
static double __pyx_f_8world_cy_13PositiveTrait_normalized_difference(struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_t1, struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_t2); /* proto*/
static void __pyx_f_8world_cy_9UnitTrait_mutate(struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_self, double __pyx_v_rate); /* proto*/
static struct __pyx_obj_8world_cy_UnitTrait *__pyx_f_8world_cy_9UnitTrait_mixed(struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_t1, struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_t2); /* proto*/
static double __pyx_f_8world_cy_9UnitTrait_normalized_difference(struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_t1, struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_t2); /* proto*/
static void __pyx_f_8world_cy_14FloatListTrait_mutate(struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_self, double __pyx_v_rate); /* proto*/
static struct __pyx_obj_8world_cy_FloatListTrait *__pyx_f_8world_cy_14FloatListTrait_mixed(struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_t1, struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_t2); /* proto*/
static double __pyx_f_8world_cy_14FloatListTrait_normalized_difference(struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_t1, struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_t2); /* proto*/
static int __pyx_f_8world_cy_9LinearDNA_mergeable(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self, struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_dna); /* proto*/
static struct __pyx_obj_8world_cy_LinearDNA *__pyx_f_8world_cy_9LinearDNA_merge(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self, struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_dna); /* proto*/
static __pyx_ctuple_68ea0____dunderpyx_ctuple_int__dunderand_int__dunderand_int__and_double__and_double__and_double__etc __pyx_f_8world_cy_9LinearDNA_translate(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self); /* proto*/
static __Pyx_memviewslice __pyx_f_8world_cy_9LinearDNA_translate_weights(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self); /* proto*/
static void __pyx_f_8world_cy_5Brain_control(CYTHON_UNUSED struct __pyx_obj_8world_cy_Brain *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, CYTHON_UNUSED __Pyx_memviewslice __pyx_v_inp); /* proto*/
static void __pyx_f_8world_cy_11LinearBrain_control(struct __pyx_obj_8world_cy_LinearBrain *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, __Pyx_memviewslice __pyx_v_inp); /* proto*/
static int __pyx_f_8world_cy_6Minion_increase_age(struct __pyx_obj_8world_cy_Minion *__pyx_v_self); /* proto*/
static double __pyx_f_8world_cy_6Minion_energy_with_constant(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, double __pyx_v_const); /* proto*/
static void __pyx_f_8world_cy_6Minion_take_energy(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, double __pyx_v_amount); /* proto*/
static int __pyx_f_8world_cy_6Minion_loss_energy(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, double __pyx_v_amount); /* proto*/
static void __pyx_f_8world_cy_6Minion_adjust_energy_from_mass(struct __pyx_obj_8world_cy_Minion *__pyx_v_self); /* proto*/
static void __pyx_f_8world_cy_6Minion_take_mass(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, double __pyx_v_amount); /* proto*/
static void __pyx_f_8world_cy_6Minion_loss_mass(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, double __pyx_v_amount); /* proto*/
static int __pyx_f_8world_cy_6Minion_mergeable(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi); /* proto*/
static struct __pyx_obj_8world_cy_Minion *__pyx_f_8world_cy_6Minion_get_child(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi); /* proto*/
static __Pyx_memviewslice __pyx_f_8world_cy_6Minion_get_input(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, __Pyx_memviewslice __pyx_v_snapshot); /* proto*/
static struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_f_8world_cy_9MinionDLL_prev(CYTHON_UNUSED struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node); /* proto*/
static struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_f_8world_cy_9MinionDLL_next(CYTHON_UNUSED struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node); /* proto*/
static struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_f_8world_cy_9MinionDLL_push(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi); /* proto*/
static struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_f_8world_cy_9MinionDLL_remove_and_get_next(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node); /* proto*/
static void __pyx_f_8world_cy_9MinionDLL_remove_by_link(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi); /* proto*/
static void __pyx_f_8world_cy_9MinionDLL_remove_by_search(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi); /* proto*/
static int __pyx_f_8world_cy_9MinionDLL_contains(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi); /* proto*/
static void __pyx_f_8world_cy_5World_register(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi); /* proto*/
static void __pyx_f_8world_cy_5World_unregister_deads(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto*/
static void __pyx_f_8world_cy_5World_take_mass(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, double __pyx_v_amount); /* proto*/
static void __pyx_f_8world_cy_5World_loss_mass(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, double __pyx_v_amount); /* proto*/
static void __pyx_f_8world_cy_5World_take_energy(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, double __pyx_v_amount); /* proto*/
static int __pyx_f_8world_cy_5World_loss_energy(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, double __pyx_v_amount); /* proto*/
static void __pyx_f_8world_cy_5World_childbirth(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_girl, struct __pyx_obj_8world_cy_Minion *__pyx_v_boy); /* proto*/
static int __pyx_f_8world_cy_5World_huntable(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_pred, struct __pyx_obj_8world_cy_Minion *__pyx_v_pray); /* proto*/
static void __pyx_f_8world_cy_5World_mk_corpse(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi); /* proto*/
static void __pyx_f_8world_cy_5World_kill(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, int __pyx_v_corpse); /* proto*/
static void __pyx_f_8world_cy_5World_kill_elderly(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto*/
static void __pyx_f_8world_cy_5World_hunt(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_pred, struct __pyx_obj_8world_cy_Minion *__pyx_v_pray); /* proto*/
static void __pyx_f_8world_cy_5World_move(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi); /* proto*/
static void __pyx_f_8world_cy_5World_stretch(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi); /* proto*/
static void __pyx_f_8world_cy_5World_excrete(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, double __pyx_v_amount); /* proto*/
static void __pyx_f_8world_cy_5World_digest(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, double __pyx_v_amount); /* proto*/
static void __pyx_f_8world_cy_5World_try_hunt(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi); /* proto*/
static void __pyx_f_8world_cy_5World_eat(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi); /* proto*/
static void __pyx_f_8world_cy_5World_act(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi); /* proto*/
static void __pyx_f_8world_cy_5World_basal_metabolism(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi); /* proto*/
static void __pyx_f_8world_cy_5World_control_all(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto*/
static void __pyx_f_8world_cy_5World_act_all(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto*/
static void __pyx_f_8world_cy_5World_basal_metabolism_all(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto*/
static void __pyx_f_8world_cy_5World_render(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto*/
static double __pyx_f_8world_cy_5World__total_minion_mass(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto*/
static double __pyx_f_8world_cy_5World__total_mass(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto*/
static double __pyx_f_8world_cy_5World__total_min(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto*/
static int __pyx_f_8world_cy_5World__exhausted(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto*/
static double __pyx_f_8world_cy_5World__get_avg_r(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto*/
static double __pyx_f_8world_cy_5World__get_avg_g(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto*/
static double __pyx_f_8world_cy_5World__get_avg_b(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'fast_random' */
static double (*__pyx_f_11fast_random_uniform)(void); /*proto*/
static int (*__pyx_f_11fast_random_randint)(int, int); /*proto*/
static int (*__pyx_f_11fast_random_randint_with_probs)(int, int, __Pyx_memviewslice); /*proto*/
static int (*__pyx_f_11fast_random_randbool)(void); /*proto*/
static __Pyx_memviewslice (*__pyx_f_11fast_random_multiple_uniform)(int); /*proto*/
static double (*__pyx_f_11fast_random_gaussian)(void); /*proto*/
static __Pyx_memviewslice (*__pyx_f_11fast_random_multiple_gaussian)(int); /*proto*/
static void (*__pyx_f_11fast_random_seed)(void); /*proto*/

/* Module declarations from 'cython.view' */

/* Module declarations from 'world_cy' */
static PyTypeObject *__pyx_ptype_8world_cy_ColorTrait = 0;
static PyTypeObject *__pyx_ptype_8world_cy_PositiveTrait = 0;
static PyTypeObject *__pyx_ptype_8world_cy_UnitTrait = 0;
static PyTypeObject *__pyx_ptype_8world_cy_FloatListTrait = 0;
static PyTypeObject *__pyx_ptype_8world_cy_LinearDNA = 0;
static PyTypeObject *__pyx_ptype_8world_cy_Brain = 0;
static PyTypeObject *__pyx_ptype_8world_cy_LinearBrain = 0;
static PyTypeObject *__pyx_ptype_8world_cy_Minion = 0;
static PyTypeObject *__pyx_ptype_8world_cy_MinionDLLNode = 0;
static PyTypeObject *__pyx_ptype_8world_cy_MinionDLL = 0;
static PyTypeObject *__pyx_ptype_8world_cy_World = 0;
static PyTypeObject *__pyx_ptype_8world_cy___pyx_scope_struct__yield_l = 0;
static PyTypeObject *__pyx_ptype_8world_cy___pyx_scope_struct_1_get_colors = 0;
static PyTypeObject *__pyx_ptype_8world_cy___pyx_scope_struct_2_body_rect = 0;
static PyTypeObject *__pyx_ptype_8world_cy___pyx_scope_struct_3_geni_rect = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static int __pyx_v_8world_cy_num_out;
static int __pyx_v_8world_cy_vision_range;
static int __pyx_v_8world_cy_vision_resolution;
static int __pyx_v_8world_cy_vision_len;
static int __pyx_v_8world_cy_num_feature;
static int __pyx_v_8world_cy_rough_idim;
static int __pyx_v_8world_cy_rough_wdim;
static int __pyx_v_8world_cy_clear_idim;
static int __pyx_v_8world_cy_linear_wdim;
static double __pyx_v_8world_cy_merge_thres;
static double __pyx_v_8world_cy_mut_per_diff;
static double __pyx_v_8world_cy_mut_rate;
static int __pyx_v_8world_cy_xsize;
static int __pyx_v_8world_cy_ysize;
static int __pyx_v_8world_cy_min_maxsize;
static int __pyx_v_8world_cy_max_maxsize;
static double __pyx_v_8world_cy_min_uptake;
static double __pyx_v_8world_cy_max_uptake;
static int __pyx_v_8world_cy_min_maxage;
static int __pyx_v_8world_cy_max_maxage;
static double __pyx_v_8world_cy_avg_consum_rate;
static double __pyx_v_8world_cy_consum_exp;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static struct __pyx_obj_8world_cy_LinearDNA *__pyx_f_8world_cy_randLinearDNA_with(__pyx_ctuple_int__and_int__and_int, double, double, double, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_8world_cy_LinearDNA *__pyx_f_8world_cy_randLinearDNA(int __pyx_skip_dispatch); /*proto*/
static __Pyx_memviewslice __pyx_f_8world_cy_apply_linear(__Pyx_memviewslice, __Pyx_memviewslice); /*proto*/
static struct __pyx_obj_8world_cy_Minion *__pyx_f_8world_cy_construct_minion(struct __pyx_obj_8world_cy_LinearDNA *, int, __pyx_ctuple_int__and_int, int, int __pyx_skip_dispatch); /*proto*/
static void __pyx_f_8world_cy_take_softmax(__Pyx_memviewslice, double); /*proto*/
static double __pyx_f_8world_cy_sigmoid(double, double); /*proto*/
static int __pyx_f_8world_cy_dist(int, int, int); /*proto*/
static PyObject *__pyx_f_8world_cy___pyx_unpickle_Brain__set_state(struct __pyx_obj_8world_cy_Brain *, PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_ctuple_int__and_int__and_int(const std::vector<__pyx_ctuple_int__and_int__and_int>  &); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_size_t = { "size_t", NULL, sizeof(size_t), { 0 }, 0, IS_UNSIGNED(size_t) ? 'U' : 'I', IS_UNSIGNED(size_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_int = { "int", NULL, sizeof(int), { 0 }, 0, IS_UNSIGNED(int) ? 'U' : 'I', IS_UNSIGNED(int), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_object = { "MinionDLL", NULL, sizeof(struct __pyx_obj_8world_cy_MinionDLL *), { 0 }, 0, 'O', 0, 0 };
#define __Pyx_MODULE_NAME "world_cy"
extern int __pyx_module_is_main_world_cy;
int __pyx_module_is_main_world_cy = 0;

/* Implementation of 'world_cy' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_C[] = "C";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_at[] = " at ";
static const char __pyx_k_ct[] = "ct";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_mi[] = "mi";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_wt[] = "wt";
static const char __pyx_k__15[] = "\n";
static const char __pyx_k__18[] = "<";
static const char __pyx_k__32[] = "!!!";
static const char __pyx_k__63[] = "_";
static const char __pyx_k_dll[] = "dll";
static const char __pyx_k_dna[] = "#dna";
static const char __pyx_k_end[] = "#end";
static const char __pyx_k_ma1[] = "ma1";
static const char __pyx_k_ma2[] = "ma2";
static const char __pyx_k_mat[] = "mat";
static const char __pyx_k_mis[] = "mis";
static const char __pyx_k_ms1[] = "ms1";
static const char __pyx_k_ms2[] = "ms2";
static const char __pyx_k_mst[] = "mst";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_num[] = "num";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_ut1[] = "ut1";
static const char __pyx_k_ut2[] = "ut2";
static const char __pyx_k_utt[] = "utt";
static const char __pyx_k_alen[] = "alen";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_at_2[] = "at";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_dnas[] = "#dnas";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_init[] = "init";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_next[] = "next";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_prev[] = "prev";
static const char __pyx_k_rand[] = "rand";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_wdim[] = "wdim";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_Brain[] = "Brain";
static const char __pyx_k_World[] = "World";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_color[] = "<color>\n";
static const char __pyx_k_dna_2[] = "dna";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_end_2[] = "end";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_get_a[] = "get_a";
static const char __pyx_k_get_c[] = "get_c";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_lines[] = "lines";
static const char __pyx_k_mat_a[] = "mat_a";
static const char __pyx_k_mst_a[] = "mst_a";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_uintp[] = "uintp";
static const char __pyx_k_utt_a[] = "utt_a";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_xsize[] = "xsize";
static const char __pyx_k_ysize[] = "ysize";
static const char __pyx_k_Minion[] = "Minion";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_dnas_2[] = "dnas";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_freeze[] = "freeze";
static const char __pyx_k_get_mi[] = "get_mi";
static const char __pyx_k_halluc[] = "halluc";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_maxage[] = "<maxage>\n";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_no_age[] = "no_age";
static const char __pyx_k_no_eat[] = "no_eat";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_sample[] = "sample";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_uptake[] = "<uptake>\n";
static const char __pyx_k_color_2[] = "color";
static const char __pyx_k_end_dna[] = "#end_dna\n";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_get_dna[] = "get_dna";
static const char __pyx_k_get_pos[] = "get_pos";
static const char __pyx_k_maxsize[] = "<maxsize>\n";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_mi_list[] = "mi_list";
static const char __pyx_k_no_hunt[] = "no_hunt";
static const char __pyx_k_push_py[] = "push_py";
static const char __pyx_k_shuffle[] = "shuffle";
static const char __pyx_k_weights[] = "<weights>\n";
static const char __pyx_k_yield_l[] = "yield_l";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_death_by[] = "death by ";
static const char __pyx_k_end_dnas[] = "#end_dnas\n";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_get_alen[] = "get_alen";
static const char __pyx_k_get_mass[] = "get_mass";
static const char __pyx_k_get_mins[] = "get_mins";
static const char __pyx_k_get_wdim[] = "get_wdim";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_is_empty[] = "is_empty";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_no_birth[] = "no_birth";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_register[] = "_register";
static const char __pyx_k_set_size[] = "set_size";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_world_cy[] = "world_cy";
static const char __pyx_k_LinearDNA[] = "LinearDNA";
static const char __pyx_k_MinionDLL[] = "MinionDLL";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_UnitTrait[] = "UnitTrait";
static const char __pyx_k_body_rect[] = "body_rect";
static const char __pyx_k_dnas_list[] = "dnas_list";
static const char __pyx_k_do_freeze[] = "do_freeze";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_geni_rect[] = "geni_rect";
static const char __pyx_k_get_color[] = "get_color";
static const char __pyx_k_get_xsize[] = "get_xsize";
static const char __pyx_k_get_ysize[] = "get_ysize";
static const char __pyx_k_no_energy[] = "no_energy";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_readlines[] = "readlines";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_weights_2[] = "weights";
static const char __pyx_k_ColorTrait[] = "ColorTrait";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_colorTrait[] = "colorTrait";
static const char __pyx_k_get_action[] = "get_action";
static const char __pyx_k_get_colors[] = "get_colors";
static const char __pyx_k_get_nth_py[] = "get_nth_py";
static const char __pyx_k_get_traits[] = "get_traits";
static const char __pyx_k_no_excrete[] = "no_excrete";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_set_consum[] = "set_consum";
static const char __pyx_k_set_vision[] = "set_vision";
static const char __pyx_k_total_mass[] = "total_mass";
static const char __pyx_k_LinearBrain[] = "LinearBrain";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_contains_py[] = "contains_py";
static const char __pyx_k_group_sizes[] = "group_sizes";
static const char __pyx_k_maxageTrait[] = "maxageTrait";
static const char __pyx_k_uptakeTrait[] = "uptakeTrait";
static const char __pyx_k_error_during[] = "error during ";
static const char __pyx_k_maxsizeTrait[] = "maxsizeTrait";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_set_heredity[] = "set_heredity";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_weightsTrait[] = "weightsTrait";
static const char __pyx_k_world_cy_pyx[] = "world_cy.pyx";
static const char __pyx_k_MinionDLLNode[] = "MinionDLLNode";
static const char __pyx_k_PositiveTrait[] = "PositiveTrait";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_dll_from_list[] = "dll_from_list";
static const char __pyx_k_no_problem_in[] = "no problem in ";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_FloatListTrait[] = "FloatListTrait";
static const char __pyx_k_get_colorTrait[] = "get_colorTrait";
static const char __pyx_k_get_move_direc[] = "get_move_direc";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_World_body_rect[] = "World.body_rect";
static const char __pyx_k_World_geni_rect[] = "World.geni_rect";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_get_group_sizes[] = "get_group_sizes";
static const char __pyx_k_group_sizes_len[] = "group_sizes_len";
static const char __pyx_k_new_merge_thres[] = "new_merge_thres";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_record_pedigree[] = "record_pedigree";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_World_get_colors[] = "World.get_colors";
static const char __pyx_k_mins_negative_in[] = "mins negative in ";
static const char __pyx_k_new_mut_per_diff[] = "new_mut_per_diff";
static const char __pyx_k_new_vision_range[] = "new_vision_range";
static const char __pyx_k_set_traits_range[] = "set_traits_range";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_pyx_unpickle_Brain[] = "__pyx_unpickle_Brain";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_new_vision_resolution[] = "new_vision_resolution";
static const char __pyx_k_FloatListTrait_yield_l[] = "FloatListTrait.yield_l";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_MinionDLL_out_of_range[] = "MinionDLL out of range!!";
static const char __pyx_k_read_list_of_dnas_file[] = "read_list_of_dnas_file";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_write_list_of_dnas_file[] = "write_list_of_dnas_file";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_snapshot_not_assigned_in[] = "snapshot not assigned in ";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Incompatible_checksums_s_vs_0x63[] = "Incompatible checksums (%s vs 0x63f4f1e = (weights))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xb0[] = "Incompatible checksums (%s vs 0xb068931 = (name))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_n_s_Brain;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_n_s_C;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_ColorTrait;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_n_s_FloatListTrait;
static PyObject *__pyx_n_s_FloatListTrait_yield_l;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x63;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xb0;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_LinearBrain;
static PyObject *__pyx_n_s_LinearDNA;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_n_s_Minion;
static PyObject *__pyx_n_s_MinionDLL;
static PyObject *__pyx_n_s_MinionDLLNode;
static PyObject *__pyx_kp_s_MinionDLL_out_of_range;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_PositiveTrait;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_n_s_UnitTrait;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_n_s_World;
static PyObject *__pyx_n_s_World_body_rect;
static PyObject *__pyx_n_s_World_geni_rect;
static PyObject *__pyx_n_s_World_get_colors;
static PyObject *__pyx_kp_s__15;
static PyObject *__pyx_kp_s__18;
static PyObject *__pyx_kp_s__32;
static PyObject *__pyx_n_s__63;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_alen;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_kp_s_at;
static PyObject *__pyx_n_s_at_2;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_body_rect;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_kp_s_color;
static PyObject *__pyx_n_s_colorTrait;
static PyObject *__pyx_n_s_color_2;
static PyObject *__pyx_n_s_contains_py;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_ct;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_kp_s_death_by;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dll;
static PyObject *__pyx_n_s_dll_from_list;
static PyObject *__pyx_kp_s_dna;
static PyObject *__pyx_n_s_dna_2;
static PyObject *__pyx_kp_s_dnas;
static PyObject *__pyx_n_s_dnas_2;
static PyObject *__pyx_n_s_dnas_list;
static PyObject *__pyx_n_s_do_freeze;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_e;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_kp_s_end;
static PyObject *__pyx_n_s_end_2;
static PyObject *__pyx_kp_s_end_dna;
static PyObject *__pyx_kp_s_end_dnas;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_kp_s_error_during;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_freeze;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_geni_rect;
static PyObject *__pyx_n_s_get_a;
static PyObject *__pyx_n_s_get_action;
static PyObject *__pyx_n_s_get_alen;
static PyObject *__pyx_n_s_get_c;
static PyObject *__pyx_n_s_get_color;
static PyObject *__pyx_n_s_get_colorTrait;
static PyObject *__pyx_n_s_get_colors;
static PyObject *__pyx_n_s_get_dna;
static PyObject *__pyx_n_s_get_group_sizes;
static PyObject *__pyx_n_s_get_mass;
static PyObject *__pyx_n_s_get_mi;
static PyObject *__pyx_n_s_get_mins;
static PyObject *__pyx_n_s_get_move_direc;
static PyObject *__pyx_n_s_get_nth_py;
static PyObject *__pyx_n_s_get_pos;
static PyObject *__pyx_n_s_get_traits;
static PyObject *__pyx_n_s_get_wdim;
static PyObject *__pyx_n_s_get_xsize;
static PyObject *__pyx_n_s_get_ysize;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_group_sizes;
static PyObject *__pyx_n_s_group_sizes_len;
static PyObject *__pyx_n_s_halluc;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_is_empty;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_n_s_lines;
static PyObject *__pyx_n_s_ma1;
static PyObject *__pyx_n_s_ma2;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mat;
static PyObject *__pyx_n_s_mat_a;
static PyObject *__pyx_kp_s_maxage;
static PyObject *__pyx_n_s_maxageTrait;
static PyObject *__pyx_kp_s_maxsize;
static PyObject *__pyx_n_s_maxsizeTrait;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_mi;
static PyObject *__pyx_n_s_mi_list;
static PyObject *__pyx_kp_s_mins_negative_in;
static PyObject *__pyx_n_s_mis;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_ms1;
static PyObject *__pyx_n_s_ms2;
static PyObject *__pyx_n_s_mst;
static PyObject *__pyx_n_s_mst_a;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_new_merge_thres;
static PyObject *__pyx_n_s_new_mut_per_diff;
static PyObject *__pyx_n_s_new_vision_range;
static PyObject *__pyx_n_s_new_vision_resolution;
static PyObject *__pyx_n_s_next;
static PyObject *__pyx_n_s_no_age;
static PyObject *__pyx_n_s_no_birth;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_no_eat;
static PyObject *__pyx_n_s_no_energy;
static PyObject *__pyx_n_s_no_excrete;
static PyObject *__pyx_n_s_no_hunt;
static PyObject *__pyx_kp_s_no_problem_in;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_num;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_prev;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_push_py;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Brain;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_rand;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read_list_of_dnas_file;
static PyObject *__pyx_n_s_readlines;
static PyObject *__pyx_n_s_record_pedigree;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_register;
static PyObject *__pyx_n_s_sample;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_set_consum;
static PyObject *__pyx_n_s_set_heredity;
static PyObject *__pyx_n_s_set_size;
static PyObject *__pyx_n_s_set_traits_range;
static PyObject *__pyx_n_s_set_vision;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_shuffle;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_kp_s_snapshot_not_assigned_in;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_total_mass;
static PyObject *__pyx_n_s_uintp;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_kp_s_uptake;
static PyObject *__pyx_n_s_uptakeTrait;
static PyObject *__pyx_n_s_ut1;
static PyObject *__pyx_n_s_ut2;
static PyObject *__pyx_n_s_utt;
static PyObject *__pyx_n_s_utt_a;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_wdim;
static PyObject *__pyx_kp_s_weights;
static PyObject *__pyx_n_s_weightsTrait;
static PyObject *__pyx_n_s_weights_2;
static PyObject *__pyx_n_s_world_cy;
static PyObject *__pyx_kp_s_world_cy_pyx;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_write_list_of_dnas_file;
static PyObject *__pyx_n_s_wt;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xsize;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_yield_l;
static PyObject *__pyx_n_s_ysize;
static PyObject *__pyx_pf_8world_cy_set_consum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_e); /* proto */
static PyObject *__pyx_pf_8world_cy_2set_size(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_8world_cy_4set_traits_range(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ms1, PyObject *__pyx_v_ms2, PyObject *__pyx_v_ut1, PyObject *__pyx_v_ut2, PyObject *__pyx_v_ma1, PyObject *__pyx_v_ma2); /* proto */
static PyObject *__pyx_pf_8world_cy_6set_vision(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_new_vision_range, PyObject *__pyx_v_new_vision_resolution); /* proto */
static PyObject *__pyx_pf_8world_cy_8set_heredity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_new_merge_thres, PyObject *__pyx_v_new_mut_per_diff); /* proto */
static int __pyx_pf_8world_cy_10ColorTrait___cinit__(struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_self, int __pyx_v_r, int __pyx_v_g, int __pyx_v_b); /* proto */
static PyObject *__pyx_pf_8world_cy_10ColorTrait_2get_c(struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_10ColorTrait_4opposite(struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_10ColorTrait_6get_normalized_difference(struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_t1, PyObject *__pyx_v_t2); /* proto */
static PyObject *__pyx_pf_8world_cy_10ColorTrait_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_10ColorTrait_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8world_cy_13PositiveTrait___cinit__(struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8world_cy_13PositiveTrait_2get_a(struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_13PositiveTrait_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_13PositiveTrait_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8world_cy_9UnitTrait___cinit__(struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8world_cy_9UnitTrait_2get_a(struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_9UnitTrait_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_9UnitTrait_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8world_cy_14FloatListTrait___cinit__(struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_self, __Pyx_memviewslice __pyx_v_l, __Pyx_memviewslice __pyx_v_group_sizes); /* proto */
static PyObject *__pyx_pf_8world_cy_14FloatListTrait_2yield_l(struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_14FloatListTrait_5get_group_sizes(struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_14FloatListTrait_7__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_14FloatListTrait_9__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8world_cy_10randLinearDNA_with(CYTHON_UNUSED PyObject *__pyx_self, __pyx_ctuple_int__and_int__and_int __pyx_v_c, double __pyx_v_mst_a, double __pyx_v_utt_a, double __pyx_v_mat_a); /* proto */
static PyObject *__pyx_pf_8world_cy_12randLinearDNA(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_8world_cy_14write_list_of_dnas_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_l, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_8world_cy_16read_list_of_dnas_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static int __pyx_pf_8world_cy_9LinearDNA___cinit__(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self, struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_colorTrait, struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_maxsizeTrait, struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_uptakeTrait, struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_maxageTrait, struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_weightsTrait); /* proto */
static PyObject *__pyx_pf_8world_cy_9LinearDNA_2get_wdim(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_9LinearDNA_4get_group_sizes(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_9LinearDNA_6get_traits(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_9LinearDNA_8get_colorTrait(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_9LinearDNA_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_9LinearDNA_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8world_cy_5Brain___reduce_cython__(struct __pyx_obj_8world_cy_Brain *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5Brain_2__setstate_cython__(struct __pyx_obj_8world_cy_Brain *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8world_cy_11LinearBrain___cinit__(struct __pyx_obj_8world_cy_LinearBrain *__pyx_v_self, __Pyx_memviewslice __pyx_v_weights, int __pyx_v_init); /* proto */
static PyObject *__pyx_pf_8world_cy_11LinearBrain_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_LinearBrain *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_11LinearBrain_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_LinearBrain *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8world_cy_18construct_minion(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_dna, int __pyx_v_alen, __pyx_ctuple_int__and_int __pyx_v_pos, int __pyx_v_do_freeze); /* proto */
static int __pyx_pf_8world_cy_6Minion___cinit__(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_dna); /* proto */
static PyObject *__pyx_pf_8world_cy_6Minion_2get_dna(struct __pyx_obj_8world_cy_Minion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_6Minion_4get_color(struct __pyx_obj_8world_cy_Minion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_6Minion_6get_mass(struct __pyx_obj_8world_cy_Minion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_6Minion_8get_alen(struct __pyx_obj_8world_cy_Minion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_6Minion_10get_pos(struct __pyx_obj_8world_cy_Minion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_6Minion_12get_action(struct __pyx_obj_8world_cy_Minion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_6Minion_14get_move_direc(struct __pyx_obj_8world_cy_Minion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_6Minion_16get_frozen(struct __pyx_obj_8world_cy_Minion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_6Minion_18get_cum_dist(struct __pyx_obj_8world_cy_Minion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_6Minion_20freeze(struct __pyx_obj_8world_cy_Minion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_6Minion_22defreeze(struct __pyx_obj_8world_cy_Minion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_6Minion_24set_alen(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_8world_cy_6Minion_26set_pos(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_8world_cy_6Minion_28__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_Minion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_6Minion_30__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_Minion *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8world_cy_13MinionDLLNode___cinit__(struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_self, struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_dll, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_prev, struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_next); /* proto */
static PyObject *__pyx_pf_8world_cy_13MinionDLLNode_2get_mi(struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_13MinionDLLNode_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_13MinionDLLNode_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8world_cy_20dll_from_list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_mi_list); /* proto */
static int __pyx_pf_8world_cy_9MinionDLL___cinit__(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_9MinionDLL_2is_empty(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_9MinionDLL_4push_py(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, PyObject *__pyx_v_mi); /* proto */
static PyObject *__pyx_pf_8world_cy_9MinionDLL_6remove_py(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, PyObject *__pyx_v_mi); /* proto */
static PyObject *__pyx_pf_8world_cy_9MinionDLL_8contains_py(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, PyObject *__pyx_v_mi); /* proto */
static PyObject *__pyx_pf_8world_cy_9MinionDLL_10get_nth_py(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_8world_cy_9MinionDLL_12__iter__(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_9MinionDLL_14__next__(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_9MinionDLL_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_9MinionDLL_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8world_cy_5World___cinit__(struct __pyx_obj_8world_cy_World *__pyx_v_self, int __pyx_v_xsize, int __pyx_v_ysize, double __pyx_v_total_mass, struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_mis, int __pyx_v_no_age, int __pyx_v_no_birth, int __pyx_v_no_eat, int __pyx_v_no_energy, int __pyx_v_no_excrete, int __pyx_v_no_hunt, int __pyx_v_halluc, int __pyx_v_record_pedigree); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_2_register(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_mi); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_4occupy_check(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_6total_mass_error_detector(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_prompt); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_8mins_negative_error_detector(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_prompt); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_10snapshot_error_detector(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_prompt); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_12max_mass(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_14death_by(CYTHON_UNUSED struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_prompt); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_16status(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_18append_red_dnas(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_l); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_20append_blue_dnas(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_l); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_22one_step(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_24get_xsize(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_26get_ysize(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_28get_moment(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_30get_new_id(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_32get_mins(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_34total_mass(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_36total_minion_mass(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_38total_min(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_40limit(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_42exhausted(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_44extincted(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_46get_pedigree(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_48sample_dna(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_50get_mis(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_52get_nth_mi(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_54get_population(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_56get_colors(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_59get_avg_r(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_61get_avg_g(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_63get_avg_b(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_65get_messiness(struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_67body_rect(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_70geni_rect(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_73__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_World *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8world_cy_5World_75__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_World *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8world_cy_22__pyx_unpickle_Brain(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_8world_cy_ColorTrait(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8world_cy_PositiveTrait(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8world_cy_UnitTrait(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8world_cy_FloatListTrait(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8world_cy_LinearDNA(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8world_cy_Brain(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8world_cy_LinearBrain(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8world_cy_Minion(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8world_cy_MinionDLLNode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8world_cy_MinionDLL(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8world_cy_World(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8world_cy___pyx_scope_struct__yield_l(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8world_cy___pyx_scope_struct_1_get_colors(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8world_cy___pyx_scope_struct_2_body_rect(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8world_cy___pyx_scope_struct_3_geni_rect(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_;
static PyObject *__pyx_float_15000_2;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_255;
static PyObject *__pyx_int_104812318;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_codeobj_;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__17;
static PyObject *__pyx_slice__52;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__56;
/* Late includes */

/* "world_cy.pyx":41
 *     double consum_exp=0.7
 * 
 * def set_consum(a,e):             # <<<<<<<<<<<<<<
 *     global avg_consum_rate
 *     global consum_exp
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_1set_consum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8world_cy_1set_consum = {"set_consum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8world_cy_1set_consum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8world_cy_1set_consum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_e = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_consum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_e,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_consum", 1, 2, 2, 1); __PYX_ERR(1, 41, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_consum") < 0)) __PYX_ERR(1, 41, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_e = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_consum", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 41, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.set_consum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8world_cy_set_consum(__pyx_self, __pyx_v_a, __pyx_v_e);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_set_consum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_TraceFrameInit(__pyx_codeobj_)
  __Pyx_RefNannySetupContext("set_consum", 0);
  __Pyx_TraceCall("set_consum", __pyx_f[1], 41, 0, __PYX_ERR(1, 41, __pyx_L1_error));

  /* "world_cy.pyx":44
 *     global avg_consum_rate
 *     global consum_exp
 *     avg_consum_rate=a             # <<<<<<<<<<<<<<
 *     consum_exp=e
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_a); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 44, __pyx_L1_error)
  __pyx_v_8world_cy_avg_consum_rate = __pyx_t_1;

  /* "world_cy.pyx":45
 *     global consum_exp
 *     avg_consum_rate=a
 *     consum_exp=e             # <<<<<<<<<<<<<<
 * 
 * def set_size(x,y):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_e); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 45, __pyx_L1_error)
  __pyx_v_8world_cy_consum_exp = __pyx_t_1;

  /* "world_cy.pyx":41
 *     double consum_exp=0.7
 * 
 * def set_consum(a,e):             # <<<<<<<<<<<<<<
 *     global avg_consum_rate
 *     global consum_exp
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.set_consum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":47
 *     consum_exp=e
 * 
 * def set_size(x,y):             # <<<<<<<<<<<<<<
 *     global xsize
 *     global ysize
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_3set_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8world_cy_3set_size = {"set_size", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8world_cy_3set_size, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8world_cy_3set_size(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_size (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_size", 1, 2, 2, 1); __PYX_ERR(1, 47, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_size") < 0)) __PYX_ERR(1, 47, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_size", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 47, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.set_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8world_cy_2set_size(__pyx_self, __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_2set_size(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_TraceFrameInit(__pyx_codeobj__2)
  __Pyx_RefNannySetupContext("set_size", 0);
  __Pyx_TraceCall("set_size", __pyx_f[1], 47, 0, __PYX_ERR(1, 47, __pyx_L1_error));

  /* "world_cy.pyx":50
 *     global xsize
 *     global ysize
 *     xsize=x             # <<<<<<<<<<<<<<
 *     ysize=y
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_x); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 50, __pyx_L1_error)
  __pyx_v_8world_cy_xsize = __pyx_t_1;

  /* "world_cy.pyx":51
 *     global ysize
 *     xsize=x
 *     ysize=y             # <<<<<<<<<<<<<<
 * 
 * def set_traits_range(ms1,ms2,ut1,ut2,ma1,ma2):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_y); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 51, __pyx_L1_error)
  __pyx_v_8world_cy_ysize = __pyx_t_1;

  /* "world_cy.pyx":47
 *     consum_exp=e
 * 
 * def set_size(x,y):             # <<<<<<<<<<<<<<
 *     global xsize
 *     global ysize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.set_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":53
 *     ysize=y
 * 
 * def set_traits_range(ms1,ms2,ut1,ut2,ma1,ma2):             # <<<<<<<<<<<<<<
 *     global min_maxsize,max_maxsize,min_uptake,max_uptake,min_maxage,max_maxage
 *     min_maxsize=ms1
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5set_traits_range(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8world_cy_5set_traits_range = {"set_traits_range", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8world_cy_5set_traits_range, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8world_cy_5set_traits_range(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ms1 = 0;
  PyObject *__pyx_v_ms2 = 0;
  PyObject *__pyx_v_ut1 = 0;
  PyObject *__pyx_v_ut2 = 0;
  PyObject *__pyx_v_ma1 = 0;
  PyObject *__pyx_v_ma2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_traits_range (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ms1,&__pyx_n_s_ms2,&__pyx_n_s_ut1,&__pyx_n_s_ut2,&__pyx_n_s_ma1,&__pyx_n_s_ma2,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ms1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ms2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_traits_range", 1, 6, 6, 1); __PYX_ERR(1, 53, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ut1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_traits_range", 1, 6, 6, 2); __PYX_ERR(1, 53, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ut2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_traits_range", 1, 6, 6, 3); __PYX_ERR(1, 53, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ma1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_traits_range", 1, 6, 6, 4); __PYX_ERR(1, 53, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ma2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_traits_range", 1, 6, 6, 5); __PYX_ERR(1, 53, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_traits_range") < 0)) __PYX_ERR(1, 53, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_ms1 = values[0];
    __pyx_v_ms2 = values[1];
    __pyx_v_ut1 = values[2];
    __pyx_v_ut2 = values[3];
    __pyx_v_ma1 = values[4];
    __pyx_v_ma2 = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_traits_range", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 53, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.set_traits_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8world_cy_4set_traits_range(__pyx_self, __pyx_v_ms1, __pyx_v_ms2, __pyx_v_ut1, __pyx_v_ut2, __pyx_v_ma1, __pyx_v_ma2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_4set_traits_range(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ms1, PyObject *__pyx_v_ms2, PyObject *__pyx_v_ut1, PyObject *__pyx_v_ut2, PyObject *__pyx_v_ma1, PyObject *__pyx_v_ma2) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  __Pyx_TraceFrameInit(__pyx_codeobj__3)
  __Pyx_RefNannySetupContext("set_traits_range", 0);
  __Pyx_TraceCall("set_traits_range", __pyx_f[1], 53, 0, __PYX_ERR(1, 53, __pyx_L1_error));

  /* "world_cy.pyx":55
 * def set_traits_range(ms1,ms2,ut1,ut2,ma1,ma2):
 *     global min_maxsize,max_maxsize,min_uptake,max_uptake,min_maxage,max_maxage
 *     min_maxsize=ms1             # <<<<<<<<<<<<<<
 *     max_maxsize=ms2
 *     min_uptake=ut1
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_ms1); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 55, __pyx_L1_error)
  __pyx_v_8world_cy_min_maxsize = __pyx_t_1;

  /* "world_cy.pyx":56
 *     global min_maxsize,max_maxsize,min_uptake,max_uptake,min_maxage,max_maxage
 *     min_maxsize=ms1
 *     max_maxsize=ms2             # <<<<<<<<<<<<<<
 *     min_uptake=ut1
 *     max_uptake=ut2
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_ms2); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 56, __pyx_L1_error)
  __pyx_v_8world_cy_max_maxsize = __pyx_t_1;

  /* "world_cy.pyx":57
 *     min_maxsize=ms1
 *     max_maxsize=ms2
 *     min_uptake=ut1             # <<<<<<<<<<<<<<
 *     max_uptake=ut2
 *     min_maxage=ma1
 */
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_ut1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 57, __pyx_L1_error)
  __pyx_v_8world_cy_min_uptake = __pyx_t_2;

  /* "world_cy.pyx":58
 *     max_maxsize=ms2
 *     min_uptake=ut1
 *     max_uptake=ut2             # <<<<<<<<<<<<<<
 *     min_maxage=ma1
 *     max_maxage=ma2
 */
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_ut2); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 58, __pyx_L1_error)
  __pyx_v_8world_cy_max_uptake = __pyx_t_2;

  /* "world_cy.pyx":59
 *     min_uptake=ut1
 *     max_uptake=ut2
 *     min_maxage=ma1             # <<<<<<<<<<<<<<
 *     max_maxage=ma2
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_ma1); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 59, __pyx_L1_error)
  __pyx_v_8world_cy_min_maxage = __pyx_t_1;

  /* "world_cy.pyx":60
 *     max_uptake=ut2
 *     min_maxage=ma1
 *     max_maxage=ma2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_ma2); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 60, __pyx_L1_error)
  __pyx_v_8world_cy_max_maxage = __pyx_t_1;

  /* "world_cy.pyx":53
 *     ysize=y
 * 
 * def set_traits_range(ms1,ms2,ut1,ut2,ma1,ma2):             # <<<<<<<<<<<<<<
 *     global min_maxsize,max_maxsize,min_uptake,max_uptake,min_maxage,max_maxage
 *     min_maxsize=ms1
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.set_traits_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":63
 * 
 * 
 * def set_vision(new_vision_range,new_vision_resolution):             # <<<<<<<<<<<<<<
 *     global vision_range
 *     global vision_resolution
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_7set_vision(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8world_cy_7set_vision = {"set_vision", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8world_cy_7set_vision, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8world_cy_7set_vision(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_new_vision_range = 0;
  PyObject *__pyx_v_new_vision_resolution = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_vision (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_new_vision_range,&__pyx_n_s_new_vision_resolution,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_new_vision_range)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_new_vision_resolution)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_vision", 1, 2, 2, 1); __PYX_ERR(1, 63, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_vision") < 0)) __PYX_ERR(1, 63, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_new_vision_range = values[0];
    __pyx_v_new_vision_resolution = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_vision", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 63, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.set_vision", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8world_cy_6set_vision(__pyx_self, __pyx_v_new_vision_range, __pyx_v_new_vision_resolution);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_6set_vision(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_new_vision_range, PyObject *__pyx_v_new_vision_resolution) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_TraceFrameInit(__pyx_codeobj__4)
  __Pyx_RefNannySetupContext("set_vision", 0);
  __Pyx_TraceCall("set_vision", __pyx_f[1], 63, 0, __PYX_ERR(1, 63, __pyx_L1_error));

  /* "world_cy.pyx":66
 *     global vision_range
 *     global vision_resolution
 *     vision_range=new_vision_range             # <<<<<<<<<<<<<<
 *     vision_resolution=new_vision_resolution
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_new_vision_range); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 66, __pyx_L1_error)
  __pyx_v_8world_cy_vision_range = __pyx_t_1;

  /* "world_cy.pyx":67
 *     global vision_resolution
 *     vision_range=new_vision_range
 *     vision_resolution=new_vision_resolution             # <<<<<<<<<<<<<<
 * 
 * def set_heredity(new_merge_thres,new_mut_per_diff):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_new_vision_resolution); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 67, __pyx_L1_error)
  __pyx_v_8world_cy_vision_resolution = __pyx_t_1;

  /* "world_cy.pyx":63
 * 
 * 
 * def set_vision(new_vision_range,new_vision_resolution):             # <<<<<<<<<<<<<<
 *     global vision_range
 *     global vision_resolution
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.set_vision", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":69
 *     vision_resolution=new_vision_resolution
 * 
 * def set_heredity(new_merge_thres,new_mut_per_diff):             # <<<<<<<<<<<<<<
 *     global merge_thres
 *     global mut_per_diff
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9set_heredity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8world_cy_9set_heredity = {"set_heredity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8world_cy_9set_heredity, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8world_cy_9set_heredity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_new_merge_thres = 0;
  PyObject *__pyx_v_new_mut_per_diff = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_heredity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_new_merge_thres,&__pyx_n_s_new_mut_per_diff,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_new_merge_thres)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_new_mut_per_diff)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_heredity", 1, 2, 2, 1); __PYX_ERR(1, 69, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_heredity") < 0)) __PYX_ERR(1, 69, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_new_merge_thres = values[0];
    __pyx_v_new_mut_per_diff = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_heredity", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 69, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.set_heredity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8world_cy_8set_heredity(__pyx_self, __pyx_v_new_merge_thres, __pyx_v_new_mut_per_diff);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_8set_heredity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_new_merge_thres, PyObject *__pyx_v_new_mut_per_diff) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_TraceFrameInit(__pyx_codeobj__5)
  __Pyx_RefNannySetupContext("set_heredity", 0);
  __Pyx_TraceCall("set_heredity", __pyx_f[1], 69, 0, __PYX_ERR(1, 69, __pyx_L1_error));

  /* "world_cy.pyx":72
 *     global merge_thres
 *     global mut_per_diff
 *     merge_thres=new_merge_thres             # <<<<<<<<<<<<<<
 *     mut_per_diff=new_mut_per_diff
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_new_merge_thres); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 72, __pyx_L1_error)
  __pyx_v_8world_cy_merge_thres = __pyx_t_1;

  /* "world_cy.pyx":73
 *     global mut_per_diff
 *     merge_thres=new_merge_thres
 *     mut_per_diff=new_mut_per_diff             # <<<<<<<<<<<<<<
 * 
 * cdef class ColorTrait():
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_new_mut_per_diff); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 73, __pyx_L1_error)
  __pyx_v_8world_cy_mut_per_diff = __pyx_t_1;

  /* "world_cy.pyx":69
 *     vision_resolution=new_vision_resolution
 * 
 * def set_heredity(new_merge_thres,new_mut_per_diff):             # <<<<<<<<<<<<<<
 *     global merge_thres
 *     global mut_per_diff
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.set_heredity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":76
 * 
 * cdef class ColorTrait():
 *     def __cinit__(self,int r,int g,int b):             # <<<<<<<<<<<<<<
 *         self.r=r
 *         self.g=g
 */

/* Python wrapper */
static int __pyx_pw_8world_cy_10ColorTrait_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8world_cy_10ColorTrait_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_r;
  int __pyx_v_g;
  int __pyx_v_b;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(1, 76, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(1, 76, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 76, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_r = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_r == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 76, __pyx_L3_error)
    __pyx_v_g = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_g == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 76, __pyx_L3_error)
    __pyx_v_b = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_b == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 76, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 76, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.ColorTrait.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8world_cy_10ColorTrait___cinit__(((struct __pyx_obj_8world_cy_ColorTrait *)__pyx_v_self), __pyx_v_r, __pyx_v_g, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8world_cy_10ColorTrait___cinit__(struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_self, int __pyx_v_r, int __pyx_v_g, int __pyx_v_b) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[1], 76, 0, __PYX_ERR(1, 76, __pyx_L1_error));

  /* "world_cy.pyx":77
 * cdef class ColorTrait():
 *     def __cinit__(self,int r,int g,int b):
 *         self.r=r             # <<<<<<<<<<<<<<
 *         self.g=g
 *         self.b=b
 */
  __pyx_v_self->r = __pyx_v_r;

  /* "world_cy.pyx":78
 *     def __cinit__(self,int r,int g,int b):
 *         self.r=r
 *         self.g=g             # <<<<<<<<<<<<<<
 *         self.b=b
 *     def get_c(self):
 */
  __pyx_v_self->g = __pyx_v_g;

  /* "world_cy.pyx":79
 *         self.r=r
 *         self.g=g
 *         self.b=b             # <<<<<<<<<<<<<<
 *     def get_c(self):
 *         return (self.r,self.g,self.b)
 */
  __pyx_v_self->b = __pyx_v_b;

  /* "world_cy.pyx":76
 * 
 * cdef class ColorTrait():
 *     def __cinit__(self,int r,int g,int b):             # <<<<<<<<<<<<<<
 *         self.r=r
 *         self.g=g
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.ColorTrait.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":80
 *         self.g=g
 *         self.b=b
 *     def get_c(self):             # <<<<<<<<<<<<<<
 *         return (self.r,self.g,self.b)
 *     def opposite(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_10ColorTrait_3get_c(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_10ColorTrait_3get_c(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_c (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_10ColorTrait_2get_c(((struct __pyx_obj_8world_cy_ColorTrait *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_10ColorTrait_2get_c(struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("get_c", 0);
  __Pyx_TraceCall("get_c", __pyx_f[1], 80, 0, __PYX_ERR(1, 80, __pyx_L1_error));

  /* "world_cy.pyx":81
 *         self.b=b
 *     def get_c(self):
 *         return (self.r,self.g,self.b)             # <<<<<<<<<<<<<<
 *     def opposite(self):
 *         return ColorTrait(255-self.r,255-self.g,255-self.b)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->r); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->g); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->b); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":80
 *         self.g=g
 *         self.b=b
 *     def get_c(self):             # <<<<<<<<<<<<<<
 *         return (self.r,self.g,self.b)
 *     def opposite(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("world_cy.ColorTrait.get_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":82
 *     def get_c(self):
 *         return (self.r,self.g,self.b)
 *     def opposite(self):             # <<<<<<<<<<<<<<
 *         return ColorTrait(255-self.r,255-self.g,255-self.b)
 *     cdef void mutate(self,double rate):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_10ColorTrait_5opposite(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_10ColorTrait_5opposite(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("opposite (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_10ColorTrait_4opposite(((struct __pyx_obj_8world_cy_ColorTrait *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_10ColorTrait_4opposite(struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("opposite", 0);
  __Pyx_TraceCall("opposite", __pyx_f[1], 82, 0, __PYX_ERR(1, 82, __pyx_L1_error));

  /* "world_cy.pyx":83
 *         return (self.r,self.g,self.b)
 *     def opposite(self):
 *         return ColorTrait(255-self.r,255-self.g,255-self.b)             # <<<<<<<<<<<<<<
 *     cdef void mutate(self,double rate):
 *         cdef double dr=256*rate*gaussian()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long((0xFF - __pyx_v_self->r)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_long((0xFF - __pyx_v_self->g)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_long((0xFF - __pyx_v_self->b)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8world_cy_ColorTrait), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":82
 *     def get_c(self):
 *         return (self.r,self.g,self.b)
 *     def opposite(self):             # <<<<<<<<<<<<<<
 *         return ColorTrait(255-self.r,255-self.g,255-self.b)
 *     cdef void mutate(self,double rate):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("world_cy.ColorTrait.opposite", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":84
 *     def opposite(self):
 *         return ColorTrait(255-self.r,255-self.g,255-self.b)
 *     cdef void mutate(self,double rate):             # <<<<<<<<<<<<<<
 *         cdef double dr=256*rate*gaussian()
 *         cdef int intdr=<int>dr
 */

static void __pyx_f_8world_cy_10ColorTrait_mutate(struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_self, double __pyx_v_rate) {
  double __pyx_v_dr;
  int __pyx_v_intdr;
  double __pyx_v_dg;
  int __pyx_v_intdg;
  double __pyx_v_db;
  int __pyx_v_intdb;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("mutate", 0);
  __Pyx_TraceCall("mutate", __pyx_f[1], 84, 0, __PYX_ERR(1, 84, __pyx_L1_error));

  /* "world_cy.pyx":85
 *         return ColorTrait(255-self.r,255-self.g,255-self.b)
 *     cdef void mutate(self,double rate):
 *         cdef double dr=256*rate*gaussian()             # <<<<<<<<<<<<<<
 *         cdef int intdr=<int>dr
 *         cdef double dg=256*rate*gaussian()
 */
  __pyx_v_dr = ((256.0 * __pyx_v_rate) * __pyx_f_11fast_random_gaussian());

  /* "world_cy.pyx":86
 *     cdef void mutate(self,double rate):
 *         cdef double dr=256*rate*gaussian()
 *         cdef int intdr=<int>dr             # <<<<<<<<<<<<<<
 *         cdef double dg=256*rate*gaussian()
 *         cdef int intdg=<int>dg
 */
  __pyx_v_intdr = ((int)__pyx_v_dr);

  /* "world_cy.pyx":87
 *         cdef double dr=256*rate*gaussian()
 *         cdef int intdr=<int>dr
 *         cdef double dg=256*rate*gaussian()             # <<<<<<<<<<<<<<
 *         cdef int intdg=<int>dg
 *         cdef double db=256*rate*gaussian()
 */
  __pyx_v_dg = ((256.0 * __pyx_v_rate) * __pyx_f_11fast_random_gaussian());

  /* "world_cy.pyx":88
 *         cdef int intdr=<int>dr
 *         cdef double dg=256*rate*gaussian()
 *         cdef int intdg=<int>dg             # <<<<<<<<<<<<<<
 *         cdef double db=256*rate*gaussian()
 *         cdef int intdb=<int>db
 */
  __pyx_v_intdg = ((int)__pyx_v_dg);

  /* "world_cy.pyx":89
 *         cdef double dg=256*rate*gaussian()
 *         cdef int intdg=<int>dg
 *         cdef double db=256*rate*gaussian()             # <<<<<<<<<<<<<<
 *         cdef int intdb=<int>db
 *         if dr>0:
 */
  __pyx_v_db = ((256.0 * __pyx_v_rate) * __pyx_f_11fast_random_gaussian());

  /* "world_cy.pyx":90
 *         cdef int intdg=<int>dg
 *         cdef double db=256*rate*gaussian()
 *         cdef int intdb=<int>db             # <<<<<<<<<<<<<<
 *         if dr>0:
 *             if dr-<double>intdr<0.5:
 */
  __pyx_v_intdb = ((int)__pyx_v_db);

  /* "world_cy.pyx":91
 *         cdef double db=256*rate*gaussian()
 *         cdef int intdb=<int>db
 *         if dr>0:             # <<<<<<<<<<<<<<
 *             if dr-<double>intdr<0.5:
 *                 self.r+=intdr
 */
  __pyx_t_1 = ((__pyx_v_dr > 0.0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":92
 *         cdef int intdb=<int>db
 *         if dr>0:
 *             if dr-<double>intdr<0.5:             # <<<<<<<<<<<<<<
 *                 self.r+=intdr
 *             else:
 */
    __pyx_t_1 = (((__pyx_v_dr - ((double)__pyx_v_intdr)) < 0.5) != 0);
    if (__pyx_t_1) {

      /* "world_cy.pyx":93
 *         if dr>0:
 *             if dr-<double>intdr<0.5:
 *                 self.r+=intdr             # <<<<<<<<<<<<<<
 *             else:
 *                 self.r+=intdr+1
 */
      __pyx_v_self->r = (__pyx_v_self->r + __pyx_v_intdr);

      /* "world_cy.pyx":92
 *         cdef int intdb=<int>db
 *         if dr>0:
 *             if dr-<double>intdr<0.5:             # <<<<<<<<<<<<<<
 *                 self.r+=intdr
 *             else:
 */
      goto __pyx_L4;
    }

    /* "world_cy.pyx":95
 *                 self.r+=intdr
 *             else:
 *                 self.r+=intdr+1             # <<<<<<<<<<<<<<
 *         else:
 *             if <double>intdr-dr<0.5:
 */
    /*else*/ {
      __pyx_v_self->r = (__pyx_v_self->r + (__pyx_v_intdr + 1));
    }
    __pyx_L4:;

    /* "world_cy.pyx":91
 *         cdef double db=256*rate*gaussian()
 *         cdef int intdb=<int>db
 *         if dr>0:             # <<<<<<<<<<<<<<
 *             if dr-<double>intdr<0.5:
 *                 self.r+=intdr
 */
    goto __pyx_L3;
  }

  /* "world_cy.pyx":97
 *                 self.r+=intdr+1
 *         else:
 *             if <double>intdr-dr<0.5:             # <<<<<<<<<<<<<<
 *                 self.r+=intdr
 *             else:
 */
  /*else*/ {
    __pyx_t_1 = (((((double)__pyx_v_intdr) - __pyx_v_dr) < 0.5) != 0);
    if (__pyx_t_1) {

      /* "world_cy.pyx":98
 *         else:
 *             if <double>intdr-dr<0.5:
 *                 self.r+=intdr             # <<<<<<<<<<<<<<
 *             else:
 *                 self.r+=intdr-1
 */
      __pyx_v_self->r = (__pyx_v_self->r + __pyx_v_intdr);

      /* "world_cy.pyx":97
 *                 self.r+=intdr+1
 *         else:
 *             if <double>intdr-dr<0.5:             # <<<<<<<<<<<<<<
 *                 self.r+=intdr
 *             else:
 */
      goto __pyx_L5;
    }

    /* "world_cy.pyx":100
 *                 self.r+=intdr
 *             else:
 *                 self.r+=intdr-1             # <<<<<<<<<<<<<<
 *         if self.r>255:
 *             self.r=255
 */
    /*else*/ {
      __pyx_v_self->r = (__pyx_v_self->r + (__pyx_v_intdr - 1));
    }
    __pyx_L5:;
  }
  __pyx_L3:;

  /* "world_cy.pyx":101
 *             else:
 *                 self.r+=intdr-1
 *         if self.r>255:             # <<<<<<<<<<<<<<
 *             self.r=255
 *         elif self.r<0:
 */
  __pyx_t_1 = ((__pyx_v_self->r > 0xFF) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":102
 *                 self.r+=intdr-1
 *         if self.r>255:
 *             self.r=255             # <<<<<<<<<<<<<<
 *         elif self.r<0:
 *             self.r=0
 */
    __pyx_v_self->r = 0xFF;

    /* "world_cy.pyx":101
 *             else:
 *                 self.r+=intdr-1
 *         if self.r>255:             # <<<<<<<<<<<<<<
 *             self.r=255
 *         elif self.r<0:
 */
    goto __pyx_L6;
  }

  /* "world_cy.pyx":103
 *         if self.r>255:
 *             self.r=255
 *         elif self.r<0:             # <<<<<<<<<<<<<<
 *             self.r=0
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->r < 0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":104
 *             self.r=255
 *         elif self.r<0:
 *             self.r=0             # <<<<<<<<<<<<<<
 * 
 *         if dg>0:
 */
    __pyx_v_self->r = 0;

    /* "world_cy.pyx":103
 *         if self.r>255:
 *             self.r=255
 *         elif self.r<0:             # <<<<<<<<<<<<<<
 *             self.r=0
 * 
 */
  }
  __pyx_L6:;

  /* "world_cy.pyx":106
 *             self.r=0
 * 
 *         if dg>0:             # <<<<<<<<<<<<<<
 *             if dg-<double>intdg<0.5:
 *                 self.g+=intdg
 */
  __pyx_t_1 = ((__pyx_v_dg > 0.0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":107
 * 
 *         if dg>0:
 *             if dg-<double>intdg<0.5:             # <<<<<<<<<<<<<<
 *                 self.g+=intdg
 *             else:
 */
    __pyx_t_1 = (((__pyx_v_dg - ((double)__pyx_v_intdg)) < 0.5) != 0);
    if (__pyx_t_1) {

      /* "world_cy.pyx":108
 *         if dg>0:
 *             if dg-<double>intdg<0.5:
 *                 self.g+=intdg             # <<<<<<<<<<<<<<
 *             else:
 *                 self.g+=intdg+1
 */
      __pyx_v_self->g = (__pyx_v_self->g + __pyx_v_intdg);

      /* "world_cy.pyx":107
 * 
 *         if dg>0:
 *             if dg-<double>intdg<0.5:             # <<<<<<<<<<<<<<
 *                 self.g+=intdg
 *             else:
 */
      goto __pyx_L8;
    }

    /* "world_cy.pyx":110
 *                 self.g+=intdg
 *             else:
 *                 self.g+=intdg+1             # <<<<<<<<<<<<<<
 *         else:
 *             if <double>intdg-dg<0.5:
 */
    /*else*/ {
      __pyx_v_self->g = (__pyx_v_self->g + (__pyx_v_intdg + 1));
    }
    __pyx_L8:;

    /* "world_cy.pyx":106
 *             self.r=0
 * 
 *         if dg>0:             # <<<<<<<<<<<<<<
 *             if dg-<double>intdg<0.5:
 *                 self.g+=intdg
 */
    goto __pyx_L7;
  }

  /* "world_cy.pyx":112
 *                 self.g+=intdg+1
 *         else:
 *             if <double>intdg-dg<0.5:             # <<<<<<<<<<<<<<
 *                 self.g+=intdg
 *             else:
 */
  /*else*/ {
    __pyx_t_1 = (((((double)__pyx_v_intdg) - __pyx_v_dg) < 0.5) != 0);
    if (__pyx_t_1) {

      /* "world_cy.pyx":113
 *         else:
 *             if <double>intdg-dg<0.5:
 *                 self.g+=intdg             # <<<<<<<<<<<<<<
 *             else:
 *                 self.g+=intdg-1
 */
      __pyx_v_self->g = (__pyx_v_self->g + __pyx_v_intdg);

      /* "world_cy.pyx":112
 *                 self.g+=intdg+1
 *         else:
 *             if <double>intdg-dg<0.5:             # <<<<<<<<<<<<<<
 *                 self.g+=intdg
 *             else:
 */
      goto __pyx_L9;
    }

    /* "world_cy.pyx":115
 *                 self.g+=intdg
 *             else:
 *                 self.g+=intdg-1             # <<<<<<<<<<<<<<
 *         if self.g>255:
 *             self.g=255
 */
    /*else*/ {
      __pyx_v_self->g = (__pyx_v_self->g + (__pyx_v_intdg - 1));
    }
    __pyx_L9:;
  }
  __pyx_L7:;

  /* "world_cy.pyx":116
 *             else:
 *                 self.g+=intdg-1
 *         if self.g>255:             # <<<<<<<<<<<<<<
 *             self.g=255
 *         elif self.g<0:
 */
  __pyx_t_1 = ((__pyx_v_self->g > 0xFF) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":117
 *                 self.g+=intdg-1
 *         if self.g>255:
 *             self.g=255             # <<<<<<<<<<<<<<
 *         elif self.g<0:
 *             self.g=0
 */
    __pyx_v_self->g = 0xFF;

    /* "world_cy.pyx":116
 *             else:
 *                 self.g+=intdg-1
 *         if self.g>255:             # <<<<<<<<<<<<<<
 *             self.g=255
 *         elif self.g<0:
 */
    goto __pyx_L10;
  }

  /* "world_cy.pyx":118
 *         if self.g>255:
 *             self.g=255
 *         elif self.g<0:             # <<<<<<<<<<<<<<
 *             self.g=0
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->g < 0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":119
 *             self.g=255
 *         elif self.g<0:
 *             self.g=0             # <<<<<<<<<<<<<<
 * 
 *         if db>0:
 */
    __pyx_v_self->g = 0;

    /* "world_cy.pyx":118
 *         if self.g>255:
 *             self.g=255
 *         elif self.g<0:             # <<<<<<<<<<<<<<
 *             self.g=0
 * 
 */
  }
  __pyx_L10:;

  /* "world_cy.pyx":121
 *             self.g=0
 * 
 *         if db>0:             # <<<<<<<<<<<<<<
 *             if db-<double>intdb<0.5:
 *                 self.b+=intdb
 */
  __pyx_t_1 = ((__pyx_v_db > 0.0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":122
 * 
 *         if db>0:
 *             if db-<double>intdb<0.5:             # <<<<<<<<<<<<<<
 *                 self.b+=intdb
 *             else:
 */
    __pyx_t_1 = (((__pyx_v_db - ((double)__pyx_v_intdb)) < 0.5) != 0);
    if (__pyx_t_1) {

      /* "world_cy.pyx":123
 *         if db>0:
 *             if db-<double>intdb<0.5:
 *                 self.b+=intdb             # <<<<<<<<<<<<<<
 *             else:
 *                 self.b+=intdb+1
 */
      __pyx_v_self->b = (__pyx_v_self->b + __pyx_v_intdb);

      /* "world_cy.pyx":122
 * 
 *         if db>0:
 *             if db-<double>intdb<0.5:             # <<<<<<<<<<<<<<
 *                 self.b+=intdb
 *             else:
 */
      goto __pyx_L12;
    }

    /* "world_cy.pyx":125
 *                 self.b+=intdb
 *             else:
 *                 self.b+=intdb+1             # <<<<<<<<<<<<<<
 *         else:
 *             if <double>intdb-db<0.5:
 */
    /*else*/ {
      __pyx_v_self->b = (__pyx_v_self->b + (__pyx_v_intdb + 1));
    }
    __pyx_L12:;

    /* "world_cy.pyx":121
 *             self.g=0
 * 
 *         if db>0:             # <<<<<<<<<<<<<<
 *             if db-<double>intdb<0.5:
 *                 self.b+=intdb
 */
    goto __pyx_L11;
  }

  /* "world_cy.pyx":127
 *                 self.b+=intdb+1
 *         else:
 *             if <double>intdb-db<0.5:             # <<<<<<<<<<<<<<
 *                 self.b+=intdb
 *             else:
 */
  /*else*/ {
    __pyx_t_1 = (((((double)__pyx_v_intdb) - __pyx_v_db) < 0.5) != 0);
    if (__pyx_t_1) {

      /* "world_cy.pyx":128
 *         else:
 *             if <double>intdb-db<0.5:
 *                 self.b+=intdb             # <<<<<<<<<<<<<<
 *             else:
 *                 self.b+=intdb-1
 */
      __pyx_v_self->b = (__pyx_v_self->b + __pyx_v_intdb);

      /* "world_cy.pyx":127
 *                 self.b+=intdb+1
 *         else:
 *             if <double>intdb-db<0.5:             # <<<<<<<<<<<<<<
 *                 self.b+=intdb
 *             else:
 */
      goto __pyx_L13;
    }

    /* "world_cy.pyx":130
 *                 self.b+=intdb
 *             else:
 *                 self.b+=intdb-1             # <<<<<<<<<<<<<<
 *         if self.b>255:
 *             self.b=255
 */
    /*else*/ {
      __pyx_v_self->b = (__pyx_v_self->b + (__pyx_v_intdb - 1));
    }
    __pyx_L13:;
  }
  __pyx_L11:;

  /* "world_cy.pyx":131
 *             else:
 *                 self.b+=intdb-1
 *         if self.b>255:             # <<<<<<<<<<<<<<
 *             self.b=255
 *         elif self.b<0:
 */
  __pyx_t_1 = ((__pyx_v_self->b > 0xFF) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":132
 *                 self.b+=intdb-1
 *         if self.b>255:
 *             self.b=255             # <<<<<<<<<<<<<<
 *         elif self.b<0:
 *             self.b=0
 */
    __pyx_v_self->b = 0xFF;

    /* "world_cy.pyx":131
 *             else:
 *                 self.b+=intdb-1
 *         if self.b>255:             # <<<<<<<<<<<<<<
 *             self.b=255
 *         elif self.b<0:
 */
    goto __pyx_L14;
  }

  /* "world_cy.pyx":133
 *         if self.b>255:
 *             self.b=255
 *         elif self.b<0:             # <<<<<<<<<<<<<<
 *             self.b=0
 *     cdef ColorTrait mixed(ColorTrait t1,ColorTrait t2):
 */
  __pyx_t_1 = ((__pyx_v_self->b < 0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":134
 *             self.b=255
 *         elif self.b<0:
 *             self.b=0             # <<<<<<<<<<<<<<
 *     cdef ColorTrait mixed(ColorTrait t1,ColorTrait t2):
 *         cdef int r,g,b
 */
    __pyx_v_self->b = 0;

    /* "world_cy.pyx":133
 *         if self.b>255:
 *             self.b=255
 *         elif self.b<0:             # <<<<<<<<<<<<<<
 *             self.b=0
 *     cdef ColorTrait mixed(ColorTrait t1,ColorTrait t2):
 */
  }
  __pyx_L14:;

  /* "world_cy.pyx":84
 *     def opposite(self):
 *         return ColorTrait(255-self.r,255-self.g,255-self.b)
 *     cdef void mutate(self,double rate):             # <<<<<<<<<<<<<<
 *         cdef double dr=256*rate*gaussian()
 *         cdef int intdr=<int>dr
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.ColorTrait.mutate", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":135
 *         elif self.b<0:
 *             self.b=0
 *     cdef ColorTrait mixed(ColorTrait t1,ColorTrait t2):             # <<<<<<<<<<<<<<
 *         cdef int r,g,b
 *         if randbool():
 */

static struct __pyx_obj_8world_cy_ColorTrait *__pyx_f_8world_cy_10ColorTrait_mixed(struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_t1, struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_t2) {
  int __pyx_v_r;
  int __pyx_v_g;
  int __pyx_v_b;
  struct __pyx_obj_8world_cy_ColorTrait *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("mixed", 0);
  __Pyx_TraceCall("mixed", __pyx_f[1], 135, 0, __PYX_ERR(1, 135, __pyx_L1_error));

  /* "world_cy.pyx":137
 *     cdef ColorTrait mixed(ColorTrait t1,ColorTrait t2):
 *         cdef int r,g,b
 *         if randbool():             # <<<<<<<<<<<<<<
 *             r=t1.r
 *         else:
 */
  __pyx_t_1 = (__pyx_f_11fast_random_randbool() != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":138
 *         cdef int r,g,b
 *         if randbool():
 *             r=t1.r             # <<<<<<<<<<<<<<
 *         else:
 *             r=t2.r
 */
    __pyx_t_2 = __pyx_v_t1->r;
    __pyx_v_r = __pyx_t_2;

    /* "world_cy.pyx":137
 *     cdef ColorTrait mixed(ColorTrait t1,ColorTrait t2):
 *         cdef int r,g,b
 *         if randbool():             # <<<<<<<<<<<<<<
 *             r=t1.r
 *         else:
 */
    goto __pyx_L3;
  }

  /* "world_cy.pyx":140
 *             r=t1.r
 *         else:
 *             r=t2.r             # <<<<<<<<<<<<<<
 *         if randbool():
 *             g=t1.g
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_t2->r;
    __pyx_v_r = __pyx_t_2;
  }
  __pyx_L3:;

  /* "world_cy.pyx":141
 *         else:
 *             r=t2.r
 *         if randbool():             # <<<<<<<<<<<<<<
 *             g=t1.g
 *         else:
 */
  __pyx_t_1 = (__pyx_f_11fast_random_randbool() != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":142
 *             r=t2.r
 *         if randbool():
 *             g=t1.g             # <<<<<<<<<<<<<<
 *         else:
 *             g=t2.g
 */
    __pyx_t_2 = __pyx_v_t1->g;
    __pyx_v_g = __pyx_t_2;

    /* "world_cy.pyx":141
 *         else:
 *             r=t2.r
 *         if randbool():             # <<<<<<<<<<<<<<
 *             g=t1.g
 *         else:
 */
    goto __pyx_L4;
  }

  /* "world_cy.pyx":144
 *             g=t1.g
 *         else:
 *             g=t2.g             # <<<<<<<<<<<<<<
 *         if randbool():
 *             b=t1.b
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_t2->g;
    __pyx_v_g = __pyx_t_2;
  }
  __pyx_L4:;

  /* "world_cy.pyx":145
 *         else:
 *             g=t2.g
 *         if randbool():             # <<<<<<<<<<<<<<
 *             b=t1.b
 *         else:
 */
  __pyx_t_1 = (__pyx_f_11fast_random_randbool() != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":146
 *             g=t2.g
 *         if randbool():
 *             b=t1.b             # <<<<<<<<<<<<<<
 *         else:
 *             b=t2.b
 */
    __pyx_t_2 = __pyx_v_t1->b;
    __pyx_v_b = __pyx_t_2;

    /* "world_cy.pyx":145
 *         else:
 *             g=t2.g
 *         if randbool():             # <<<<<<<<<<<<<<
 *             b=t1.b
 *         else:
 */
    goto __pyx_L5;
  }

  /* "world_cy.pyx":148
 *             b=t1.b
 *         else:
 *             b=t2.b             # <<<<<<<<<<<<<<
 *         return ColorTrait(r,g,b)
 *     def get_normalized_difference(t1,t2):
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_t2->b;
    __pyx_v_b = __pyx_t_2;
  }
  __pyx_L5:;

  /* "world_cy.pyx":149
 *         else:
 *             b=t2.b
 *         return ColorTrait(r,g,b)             # <<<<<<<<<<<<<<
 *     def get_normalized_difference(t1,t2):
 *         return ColorTrait.normalized_difference(t1,t2)
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_r); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_g); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_b); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8world_cy_ColorTrait), __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = ((struct __pyx_obj_8world_cy_ColorTrait *)__pyx_t_5);
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":135
 *         elif self.b<0:
 *             self.b=0
 *     cdef ColorTrait mixed(ColorTrait t1,ColorTrait t2):             # <<<<<<<<<<<<<<
 *         cdef int r,g,b
 *         if randbool():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("world_cy.ColorTrait.mixed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":150
 *             b=t2.b
 *         return ColorTrait(r,g,b)
 *     def get_normalized_difference(t1,t2):             # <<<<<<<<<<<<<<
 *         return ColorTrait.normalized_difference(t1,t2)
 *     cdef double normalized_difference(ColorTrait t1,ColorTrait t2):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_10ColorTrait_7get_normalized_difference(PyObject *__pyx_v_t1, PyObject *__pyx_v_t2); /*proto*/
static PyObject *__pyx_pw_8world_cy_10ColorTrait_7get_normalized_difference(PyObject *__pyx_v_t1, PyObject *__pyx_v_t2) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_normalized_difference (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_10ColorTrait_6get_normalized_difference(((struct __pyx_obj_8world_cy_ColorTrait *)__pyx_v_t1), ((PyObject *)__pyx_v_t2));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_10ColorTrait_6get_normalized_difference(struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_t1, PyObject *__pyx_v_t2) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_normalized_difference", 0);
  __Pyx_TraceCall("get_normalized_difference", __pyx_f[1], 150, 0, __PYX_ERR(1, 150, __pyx_L1_error));

  /* "world_cy.pyx":151
 *         return ColorTrait(r,g,b)
 *     def get_normalized_difference(t1,t2):
 *         return ColorTrait.normalized_difference(t1,t2)             # <<<<<<<<<<<<<<
 *     cdef double normalized_difference(ColorTrait t1,ColorTrait t2):
 *         cdef double difference, normalizer
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(((__pyx_v_t2) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_t2, __pyx_ptype_8world_cy_ColorTrait))))) __PYX_ERR(1, 151, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_8world_cy_10ColorTrait_normalized_difference(__pyx_v_t1, ((struct __pyx_obj_8world_cy_ColorTrait *)__pyx_v_t2))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":150
 *             b=t2.b
 *         return ColorTrait(r,g,b)
 *     def get_normalized_difference(t1,t2):             # <<<<<<<<<<<<<<
 *         return ColorTrait.normalized_difference(t1,t2)
 *     cdef double normalized_difference(ColorTrait t1,ColorTrait t2):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.ColorTrait.get_normalized_difference", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":152
 *     def get_normalized_difference(t1,t2):
 *         return ColorTrait.normalized_difference(t1,t2)
 *     cdef double normalized_difference(ColorTrait t1,ColorTrait t2):             # <<<<<<<<<<<<<<
 *         cdef double difference, normalizer
 *         difference=abs(t1.r-t2.r)+abs(t1.g-t2.g)+abs(t1.b-t2.b)
 */

static double __pyx_f_8world_cy_10ColorTrait_normalized_difference(struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_t1, struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_t2) {
  double __pyx_v_difference;
  double __pyx_v_normalizer;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("normalized_difference", 0);
  __Pyx_TraceCall("normalized_difference", __pyx_f[1], 152, 0, __PYX_ERR(1, 152, __pyx_L1_error));

  /* "world_cy.pyx":154
 *     cdef double normalized_difference(ColorTrait t1,ColorTrait t2):
 *         cdef double difference, normalizer
 *         difference=abs(t1.r-t2.r)+abs(t1.g-t2.g)+abs(t1.b-t2.b)             # <<<<<<<<<<<<<<
 *         normalizer=1+max(t1.r,t2.r)+max(t1.g,t2.g)+max(t1.b,t2.b)
 *         return difference/normalizer
 */
  __pyx_t_1 = abs((__pyx_v_t1->r - __pyx_v_t2->r)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(1, 154, __pyx_L1_error)
  __pyx_t_2 = abs((__pyx_v_t1->g - __pyx_v_t2->g)); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(1, 154, __pyx_L1_error)
  __pyx_t_3 = abs((__pyx_v_t1->b - __pyx_v_t2->b)); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 154, __pyx_L1_error)
  __pyx_v_difference = ((__pyx_t_1 + __pyx_t_2) + __pyx_t_3);

  /* "world_cy.pyx":155
 *         cdef double difference, normalizer
 *         difference=abs(t1.r-t2.r)+abs(t1.g-t2.g)+abs(t1.b-t2.b)
 *         normalizer=1+max(t1.r,t2.r)+max(t1.g,t2.g)+max(t1.b,t2.b)             # <<<<<<<<<<<<<<
 *         return difference/normalizer
 * 
 */
  __pyx_t_3 = __pyx_v_t2->r;
  __pyx_t_2 = __pyx_v_t1->r;
  if (((__pyx_t_3 > __pyx_t_2) != 0)) {
    __pyx_t_1 = __pyx_t_3;
  } else {
    __pyx_t_1 = __pyx_t_2;
  }
  __pyx_t_3 = __pyx_v_t2->g;
  __pyx_t_2 = __pyx_v_t1->g;
  if (((__pyx_t_3 > __pyx_t_2) != 0)) {
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_t_2;
  }
  __pyx_t_3 = __pyx_v_t2->b;
  __pyx_t_2 = __pyx_v_t1->b;
  if (((__pyx_t_3 > __pyx_t_2) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_2;
  }
  __pyx_v_normalizer = (((1 + __pyx_t_1) + __pyx_t_4) + __pyx_t_5);

  /* "world_cy.pyx":156
 *         difference=abs(t1.r-t2.r)+abs(t1.g-t2.g)+abs(t1.b-t2.b)
 *         normalizer=1+max(t1.r,t2.r)+max(t1.g,t2.g)+max(t1.b,t2.b)
 *         return difference/normalizer             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_normalizer == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 156, __pyx_L1_error)
  }
  __pyx_r = (__pyx_v_difference / __pyx_v_normalizer);
  goto __pyx_L0;

  /* "world_cy.pyx":152
 *     def get_normalized_difference(t1,t2):
 *         return ColorTrait.normalized_difference(t1,t2)
 *     cdef double normalized_difference(ColorTrait t1,ColorTrait t2):             # <<<<<<<<<<<<<<
 *         cdef double difference, normalizer
 *         difference=abs(t1.r-t2.r)+abs(t1.g-t2.g)+abs(t1.b-t2.b)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.ColorTrait.normalized_difference", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_10ColorTrait_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_10ColorTrait_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_10ColorTrait_8__reduce_cython__(((struct __pyx_obj_8world_cy_ColorTrait *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_10ColorTrait_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.ColorTrait.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_10ColorTrait_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8world_cy_10ColorTrait_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_10ColorTrait_10__setstate_cython__(((struct __pyx_obj_8world_cy_ColorTrait *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_10ColorTrait_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[0], 3, 0, __PYX_ERR(0, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.ColorTrait.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":160
 * 
 * cdef class PositiveTrait():
 *     def __cinit__(self,double a):             # <<<<<<<<<<<<<<
 *         self.eps=0.001
 *         if a>self.eps:
 */

/* Python wrapper */
static int __pyx_pw_8world_cy_13PositiveTrait_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8world_cy_13PositiveTrait_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 160, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 160, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 160, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.PositiveTrait.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8world_cy_13PositiveTrait___cinit__(((struct __pyx_obj_8world_cy_PositiveTrait *)__pyx_v_self), __pyx_v_a);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8world_cy_13PositiveTrait___cinit__(struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_self, double __pyx_v_a) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[1], 160, 0, __PYX_ERR(1, 160, __pyx_L1_error));

  /* "world_cy.pyx":161
 * cdef class PositiveTrait():
 *     def __cinit__(self,double a):
 *         self.eps=0.001             # <<<<<<<<<<<<<<
 *         if a>self.eps:
 *             self.a=a
 */
  __pyx_v_self->eps = 0.001;

  /* "world_cy.pyx":162
 *     def __cinit__(self,double a):
 *         self.eps=0.001
 *         if a>self.eps:             # <<<<<<<<<<<<<<
 *             self.a=a
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_a > __pyx_v_self->eps) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":163
 *         self.eps=0.001
 *         if a>self.eps:
 *             self.a=a             # <<<<<<<<<<<<<<
 *         else:
 *             self.a=self.eps
 */
    __pyx_v_self->a = __pyx_v_a;

    /* "world_cy.pyx":162
 *     def __cinit__(self,double a):
 *         self.eps=0.001
 *         if a>self.eps:             # <<<<<<<<<<<<<<
 *             self.a=a
 *         else:
 */
    goto __pyx_L3;
  }

  /* "world_cy.pyx":165
 *             self.a=a
 *         else:
 *             self.a=self.eps             # <<<<<<<<<<<<<<
 *     def get_a(self):
 *         return self.a
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_self->eps;
    __pyx_v_self->a = __pyx_t_2;
  }
  __pyx_L3:;

  /* "world_cy.pyx":160
 * 
 * cdef class PositiveTrait():
 *     def __cinit__(self,double a):             # <<<<<<<<<<<<<<
 *         self.eps=0.001
 *         if a>self.eps:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.PositiveTrait.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":166
 *         else:
 *             self.a=self.eps
 *     def get_a(self):             # <<<<<<<<<<<<<<
 *         return self.a
 *     cdef void mutate(self,double rate):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_13PositiveTrait_3get_a(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_13PositiveTrait_3get_a(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_a (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_13PositiveTrait_2get_a(((struct __pyx_obj_8world_cy_PositiveTrait *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_13PositiveTrait_2get_a(struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_a", 0);
  __Pyx_TraceCall("get_a", __pyx_f[1], 166, 0, __PYX_ERR(1, 166, __pyx_L1_error));

  /* "world_cy.pyx":167
 *             self.a=self.eps
 *     def get_a(self):
 *         return self.a             # <<<<<<<<<<<<<<
 *     cdef void mutate(self,double rate):
 *         self.a+=rate*self.a*gaussian()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->a); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":166
 *         else:
 *             self.a=self.eps
 *     def get_a(self):             # <<<<<<<<<<<<<<
 *         return self.a
 *     cdef void mutate(self,double rate):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.PositiveTrait.get_a", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":168
 *     def get_a(self):
 *         return self.a
 *     cdef void mutate(self,double rate):             # <<<<<<<<<<<<<<
 *         self.a+=rate*self.a*gaussian()
 *         if self.a<self.eps:
 */

static void __pyx_f_8world_cy_13PositiveTrait_mutate(struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_self, double __pyx_v_rate) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("mutate", 0);
  __Pyx_TraceCall("mutate", __pyx_f[1], 168, 0, __PYX_ERR(1, 168, __pyx_L1_error));

  /* "world_cy.pyx":169
 *         return self.a
 *     cdef void mutate(self,double rate):
 *         self.a+=rate*self.a*gaussian()             # <<<<<<<<<<<<<<
 *         if self.a<self.eps:
 *             self.a=self.eps
 */
  __pyx_v_self->a = (__pyx_v_self->a + ((__pyx_v_rate * __pyx_v_self->a) * __pyx_f_11fast_random_gaussian()));

  /* "world_cy.pyx":170
 *     cdef void mutate(self,double rate):
 *         self.a+=rate*self.a*gaussian()
 *         if self.a<self.eps:             # <<<<<<<<<<<<<<
 *             self.a=self.eps
 *     cdef PositiveTrait mixed(PositiveTrait t1, PositiveTrait t2):
 */
  __pyx_t_1 = ((__pyx_v_self->a < __pyx_v_self->eps) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":171
 *         self.a+=rate*self.a*gaussian()
 *         if self.a<self.eps:
 *             self.a=self.eps             # <<<<<<<<<<<<<<
 *     cdef PositiveTrait mixed(PositiveTrait t1, PositiveTrait t2):
 *         cdef double a
 */
    __pyx_t_2 = __pyx_v_self->eps;
    __pyx_v_self->a = __pyx_t_2;

    /* "world_cy.pyx":170
 *     cdef void mutate(self,double rate):
 *         self.a+=rate*self.a*gaussian()
 *         if self.a<self.eps:             # <<<<<<<<<<<<<<
 *             self.a=self.eps
 *     cdef PositiveTrait mixed(PositiveTrait t1, PositiveTrait t2):
 */
  }

  /* "world_cy.pyx":168
 *     def get_a(self):
 *         return self.a
 *     cdef void mutate(self,double rate):             # <<<<<<<<<<<<<<
 *         self.a+=rate*self.a*gaussian()
 *         if self.a<self.eps:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.PositiveTrait.mutate", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":172
 *         if self.a<self.eps:
 *             self.a=self.eps
 *     cdef PositiveTrait mixed(PositiveTrait t1, PositiveTrait t2):             # <<<<<<<<<<<<<<
 *         cdef double a
 *         if randbool():
 */

static struct __pyx_obj_8world_cy_PositiveTrait *__pyx_f_8world_cy_13PositiveTrait_mixed(struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_t1, struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_t2) {
  double __pyx_v_a;
  struct __pyx_obj_8world_cy_PositiveTrait *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("mixed", 0);
  __Pyx_TraceCall("mixed", __pyx_f[1], 172, 0, __PYX_ERR(1, 172, __pyx_L1_error));

  /* "world_cy.pyx":174
 *     cdef PositiveTrait mixed(PositiveTrait t1, PositiveTrait t2):
 *         cdef double a
 *         if randbool():             # <<<<<<<<<<<<<<
 *             a=t1.a
 *         else:
 */
  __pyx_t_1 = (__pyx_f_11fast_random_randbool() != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":175
 *         cdef double a
 *         if randbool():
 *             a=t1.a             # <<<<<<<<<<<<<<
 *         else:
 *             a=t2.a
 */
    __pyx_t_2 = __pyx_v_t1->a;
    __pyx_v_a = __pyx_t_2;

    /* "world_cy.pyx":174
 *     cdef PositiveTrait mixed(PositiveTrait t1, PositiveTrait t2):
 *         cdef double a
 *         if randbool():             # <<<<<<<<<<<<<<
 *             a=t1.a
 *         else:
 */
    goto __pyx_L3;
  }

  /* "world_cy.pyx":177
 *             a=t1.a
 *         else:
 *             a=t2.a             # <<<<<<<<<<<<<<
 *         return PositiveTrait(a)
 *     cdef double normalized_difference(PositiveTrait t1,PositiveTrait t2):
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_t2->a;
    __pyx_v_a = __pyx_t_2;
  }
  __pyx_L3:;

  /* "world_cy.pyx":178
 *         else:
 *             a=t2.a
 *         return PositiveTrait(a)             # <<<<<<<<<<<<<<
 *     cdef double normalized_difference(PositiveTrait t1,PositiveTrait t2):
 *         cdef double difference,normalizer
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_a); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8world_cy_PositiveTrait), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = ((struct __pyx_obj_8world_cy_PositiveTrait *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":172
 *         if self.a<self.eps:
 *             self.a=self.eps
 *     cdef PositiveTrait mixed(PositiveTrait t1, PositiveTrait t2):             # <<<<<<<<<<<<<<
 *         cdef double a
 *         if randbool():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("world_cy.PositiveTrait.mixed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":179
 *             a=t2.a
 *         return PositiveTrait(a)
 *     cdef double normalized_difference(PositiveTrait t1,PositiveTrait t2):             # <<<<<<<<<<<<<<
 *         cdef double difference,normalizer
 *         difference=abs(t1.a-t2.a)
 */

static double __pyx_f_8world_cy_13PositiveTrait_normalized_difference(struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_t1, struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_t2) {
  double __pyx_v_difference;
  double __pyx_v_normalizer;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  __Pyx_RefNannySetupContext("normalized_difference", 0);
  __Pyx_TraceCall("normalized_difference", __pyx_f[1], 179, 0, __PYX_ERR(1, 179, __pyx_L1_error));

  /* "world_cy.pyx":181
 *     cdef double normalized_difference(PositiveTrait t1,PositiveTrait t2):
 *         cdef double difference,normalizer
 *         difference=abs(t1.a-t2.a)             # <<<<<<<<<<<<<<
 *         normalizer=max(t1.a,t2.a)
 *         return difference/normalizer
 */
  __pyx_v_difference = fabs((__pyx_v_t1->a - __pyx_v_t2->a));

  /* "world_cy.pyx":182
 *         cdef double difference,normalizer
 *         difference=abs(t1.a-t2.a)
 *         normalizer=max(t1.a,t2.a)             # <<<<<<<<<<<<<<
 *         return difference/normalizer
 * 
 */
  __pyx_t_1 = __pyx_v_t2->a;
  __pyx_t_2 = __pyx_v_t1->a;
  if (((__pyx_t_1 > __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_1;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_v_normalizer = __pyx_t_3;

  /* "world_cy.pyx":183
 *         difference=abs(t1.a-t2.a)
 *         normalizer=max(t1.a,t2.a)
 *         return difference/normalizer             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_normalizer == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 183, __pyx_L1_error)
  }
  __pyx_r = (__pyx_v_difference / __pyx_v_normalizer);
  goto __pyx_L0;

  /* "world_cy.pyx":179
 *             a=t2.a
 *         return PositiveTrait(a)
 *     cdef double normalized_difference(PositiveTrait t1,PositiveTrait t2):             # <<<<<<<<<<<<<<
 *         cdef double difference,normalizer
 *         difference=abs(t1.a-t2.a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.PositiveTrait.normalized_difference", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_13PositiveTrait_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_13PositiveTrait_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_13PositiveTrait_4__reduce_cython__(((struct __pyx_obj_8world_cy_PositiveTrait *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_13PositiveTrait_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.PositiveTrait.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_13PositiveTrait_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8world_cy_13PositiveTrait_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_13PositiveTrait_6__setstate_cython__(((struct __pyx_obj_8world_cy_PositiveTrait *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_13PositiveTrait_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[0], 3, 0, __PYX_ERR(0, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.PositiveTrait.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":187
 * 
 * cdef class UnitTrait():
 *     def __cinit__(self,double a):             # <<<<<<<<<<<<<<
 *         self.eps=0.001
 *         if a>self.eps:
 */

/* Python wrapper */
static int __pyx_pw_8world_cy_9UnitTrait_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8world_cy_9UnitTrait_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 187, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 187, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 187, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.UnitTrait.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8world_cy_9UnitTrait___cinit__(((struct __pyx_obj_8world_cy_UnitTrait *)__pyx_v_self), __pyx_v_a);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8world_cy_9UnitTrait___cinit__(struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_self, double __pyx_v_a) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[1], 187, 0, __PYX_ERR(1, 187, __pyx_L1_error));

  /* "world_cy.pyx":188
 * cdef class UnitTrait():
 *     def __cinit__(self,double a):
 *         self.eps=0.001             # <<<<<<<<<<<<<<
 *         if a>self.eps:
 *             self.a=a
 */
  __pyx_v_self->eps = 0.001;

  /* "world_cy.pyx":189
 *     def __cinit__(self,double a):
 *         self.eps=0.001
 *         if a>self.eps:             # <<<<<<<<<<<<<<
 *             self.a=a
 *         elif a>1:
 */
  __pyx_t_1 = ((__pyx_v_a > __pyx_v_self->eps) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":190
 *         self.eps=0.001
 *         if a>self.eps:
 *             self.a=a             # <<<<<<<<<<<<<<
 *         elif a>1:
 *             self.a=1
 */
    __pyx_v_self->a = __pyx_v_a;

    /* "world_cy.pyx":189
 *     def __cinit__(self,double a):
 *         self.eps=0.001
 *         if a>self.eps:             # <<<<<<<<<<<<<<
 *             self.a=a
 *         elif a>1:
 */
    goto __pyx_L3;
  }

  /* "world_cy.pyx":191
 *         if a>self.eps:
 *             self.a=a
 *         elif a>1:             # <<<<<<<<<<<<<<
 *             self.a=1
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_a > 1.0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":192
 *             self.a=a
 *         elif a>1:
 *             self.a=1             # <<<<<<<<<<<<<<
 *         else:
 *             self.a=self.eps
 */
    __pyx_v_self->a = 1.0;

    /* "world_cy.pyx":191
 *         if a>self.eps:
 *             self.a=a
 *         elif a>1:             # <<<<<<<<<<<<<<
 *             self.a=1
 *         else:
 */
    goto __pyx_L3;
  }

  /* "world_cy.pyx":194
 *             self.a=1
 *         else:
 *             self.a=self.eps             # <<<<<<<<<<<<<<
 *     def get_a(self):
 *         return self.a
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_self->eps;
    __pyx_v_self->a = __pyx_t_2;
  }
  __pyx_L3:;

  /* "world_cy.pyx":187
 * 
 * cdef class UnitTrait():
 *     def __cinit__(self,double a):             # <<<<<<<<<<<<<<
 *         self.eps=0.001
 *         if a>self.eps:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.UnitTrait.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":195
 *         else:
 *             self.a=self.eps
 *     def get_a(self):             # <<<<<<<<<<<<<<
 *         return self.a
 *     cdef void mutate(self,double rate):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9UnitTrait_3get_a(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_9UnitTrait_3get_a(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_a (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9UnitTrait_2get_a(((struct __pyx_obj_8world_cy_UnitTrait *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9UnitTrait_2get_a(struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_a", 0);
  __Pyx_TraceCall("get_a", __pyx_f[1], 195, 0, __PYX_ERR(1, 195, __pyx_L1_error));

  /* "world_cy.pyx":196
 *             self.a=self.eps
 *     def get_a(self):
 *         return self.a             # <<<<<<<<<<<<<<
 *     cdef void mutate(self,double rate):
 *         self.a+=rate*gaussian()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->a); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":195
 *         else:
 *             self.a=self.eps
 *     def get_a(self):             # <<<<<<<<<<<<<<
 *         return self.a
 *     cdef void mutate(self,double rate):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.UnitTrait.get_a", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":197
 *     def get_a(self):
 *         return self.a
 *     cdef void mutate(self,double rate):             # <<<<<<<<<<<<<<
 *         self.a+=rate*gaussian()
 *         if self.a<self.eps:
 */

static void __pyx_f_8world_cy_9UnitTrait_mutate(struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_self, double __pyx_v_rate) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("mutate", 0);
  __Pyx_TraceCall("mutate", __pyx_f[1], 197, 0, __PYX_ERR(1, 197, __pyx_L1_error));

  /* "world_cy.pyx":198
 *         return self.a
 *     cdef void mutate(self,double rate):
 *         self.a+=rate*gaussian()             # <<<<<<<<<<<<<<
 *         if self.a<self.eps:
 *             self.a=self.eps
 */
  __pyx_v_self->a = (__pyx_v_self->a + (__pyx_v_rate * __pyx_f_11fast_random_gaussian()));

  /* "world_cy.pyx":199
 *     cdef void mutate(self,double rate):
 *         self.a+=rate*gaussian()
 *         if self.a<self.eps:             # <<<<<<<<<<<<<<
 *             self.a=self.eps
 *         elif self.a>1:
 */
  __pyx_t_1 = ((__pyx_v_self->a < __pyx_v_self->eps) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":200
 *         self.a+=rate*gaussian()
 *         if self.a<self.eps:
 *             self.a=self.eps             # <<<<<<<<<<<<<<
 *         elif self.a>1:
 *             self.a=1
 */
    __pyx_t_2 = __pyx_v_self->eps;
    __pyx_v_self->a = __pyx_t_2;

    /* "world_cy.pyx":199
 *     cdef void mutate(self,double rate):
 *         self.a+=rate*gaussian()
 *         if self.a<self.eps:             # <<<<<<<<<<<<<<
 *             self.a=self.eps
 *         elif self.a>1:
 */
    goto __pyx_L3;
  }

  /* "world_cy.pyx":201
 *         if self.a<self.eps:
 *             self.a=self.eps
 *         elif self.a>1:             # <<<<<<<<<<<<<<
 *             self.a=1
 *     cdef UnitTrait mixed(UnitTrait t1,UnitTrait t2):
 */
  __pyx_t_1 = ((__pyx_v_self->a > 1.0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":202
 *             self.a=self.eps
 *         elif self.a>1:
 *             self.a=1             # <<<<<<<<<<<<<<
 *     cdef UnitTrait mixed(UnitTrait t1,UnitTrait t2):
 *         cdef double a
 */
    __pyx_v_self->a = 1.0;

    /* "world_cy.pyx":201
 *         if self.a<self.eps:
 *             self.a=self.eps
 *         elif self.a>1:             # <<<<<<<<<<<<<<
 *             self.a=1
 *     cdef UnitTrait mixed(UnitTrait t1,UnitTrait t2):
 */
  }
  __pyx_L3:;

  /* "world_cy.pyx":197
 *     def get_a(self):
 *         return self.a
 *     cdef void mutate(self,double rate):             # <<<<<<<<<<<<<<
 *         self.a+=rate*gaussian()
 *         if self.a<self.eps:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.UnitTrait.mutate", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":203
 *         elif self.a>1:
 *             self.a=1
 *     cdef UnitTrait mixed(UnitTrait t1,UnitTrait t2):             # <<<<<<<<<<<<<<
 *         cdef double a
 *         if randbool():
 */

static struct __pyx_obj_8world_cy_UnitTrait *__pyx_f_8world_cy_9UnitTrait_mixed(struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_t1, struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_t2) {
  double __pyx_v_a;
  struct __pyx_obj_8world_cy_UnitTrait *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("mixed", 0);
  __Pyx_TraceCall("mixed", __pyx_f[1], 203, 0, __PYX_ERR(1, 203, __pyx_L1_error));

  /* "world_cy.pyx":205
 *     cdef UnitTrait mixed(UnitTrait t1,UnitTrait t2):
 *         cdef double a
 *         if randbool():             # <<<<<<<<<<<<<<
 *             a=t1.a
 *         else:
 */
  __pyx_t_1 = (__pyx_f_11fast_random_randbool() != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":206
 *         cdef double a
 *         if randbool():
 *             a=t1.a             # <<<<<<<<<<<<<<
 *         else:
 *             a=t2.a
 */
    __pyx_t_2 = __pyx_v_t1->a;
    __pyx_v_a = __pyx_t_2;

    /* "world_cy.pyx":205
 *     cdef UnitTrait mixed(UnitTrait t1,UnitTrait t2):
 *         cdef double a
 *         if randbool():             # <<<<<<<<<<<<<<
 *             a=t1.a
 *         else:
 */
    goto __pyx_L3;
  }

  /* "world_cy.pyx":208
 *             a=t1.a
 *         else:
 *             a=t2.a             # <<<<<<<<<<<<<<
 *         return UnitTrait(a)
 *     cdef double normalized_difference(UnitTrait t1,UnitTrait t2):
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_t2->a;
    __pyx_v_a = __pyx_t_2;
  }
  __pyx_L3:;

  /* "world_cy.pyx":209
 *         else:
 *             a=t2.a
 *         return UnitTrait(a)             # <<<<<<<<<<<<<<
 *     cdef double normalized_difference(UnitTrait t1,UnitTrait t2):
 *         cdef double difference,normalizer
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_a); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8world_cy_UnitTrait), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = ((struct __pyx_obj_8world_cy_UnitTrait *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":203
 *         elif self.a>1:
 *             self.a=1
 *     cdef UnitTrait mixed(UnitTrait t1,UnitTrait t2):             # <<<<<<<<<<<<<<
 *         cdef double a
 *         if randbool():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("world_cy.UnitTrait.mixed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":210
 *             a=t2.a
 *         return UnitTrait(a)
 *     cdef double normalized_difference(UnitTrait t1,UnitTrait t2):             # <<<<<<<<<<<<<<
 *         cdef double difference,normalizer
 *         difference=abs(t1.a-t2.a)
 */

static double __pyx_f_8world_cy_9UnitTrait_normalized_difference(struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_t1, struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_t2) {
  double __pyx_v_difference;
  double __pyx_v_normalizer;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  __Pyx_RefNannySetupContext("normalized_difference", 0);
  __Pyx_TraceCall("normalized_difference", __pyx_f[1], 210, 0, __PYX_ERR(1, 210, __pyx_L1_error));

  /* "world_cy.pyx":212
 *     cdef double normalized_difference(UnitTrait t1,UnitTrait t2):
 *         cdef double difference,normalizer
 *         difference=abs(t1.a-t2.a)             # <<<<<<<<<<<<<<
 *         normalizer=max(t1.a,t2.a)
 *         return difference/normalizer
 */
  __pyx_v_difference = fabs((__pyx_v_t1->a - __pyx_v_t2->a));

  /* "world_cy.pyx":213
 *         cdef double difference,normalizer
 *         difference=abs(t1.a-t2.a)
 *         normalizer=max(t1.a,t2.a)             # <<<<<<<<<<<<<<
 *         return difference/normalizer
 * cdef class FloatListTrait():
 */
  __pyx_t_1 = __pyx_v_t2->a;
  __pyx_t_2 = __pyx_v_t1->a;
  if (((__pyx_t_1 > __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_1;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_v_normalizer = __pyx_t_3;

  /* "world_cy.pyx":214
 *         difference=abs(t1.a-t2.a)
 *         normalizer=max(t1.a,t2.a)
 *         return difference/normalizer             # <<<<<<<<<<<<<<
 * cdef class FloatListTrait():
 *     def __cinit__(self,double[:] l,size_t[:] group_sizes):
 */
  if (unlikely(__pyx_v_normalizer == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 214, __pyx_L1_error)
  }
  __pyx_r = (__pyx_v_difference / __pyx_v_normalizer);
  goto __pyx_L0;

  /* "world_cy.pyx":210
 *             a=t2.a
 *         return UnitTrait(a)
 *     cdef double normalized_difference(UnitTrait t1,UnitTrait t2):             # <<<<<<<<<<<<<<
 *         cdef double difference,normalizer
 *         difference=abs(t1.a-t2.a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.UnitTrait.normalized_difference", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9UnitTrait_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_9UnitTrait_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9UnitTrait_4__reduce_cython__(((struct __pyx_obj_8world_cy_UnitTrait *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9UnitTrait_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.UnitTrait.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9UnitTrait_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8world_cy_9UnitTrait_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9UnitTrait_6__setstate_cython__(((struct __pyx_obj_8world_cy_UnitTrait *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9UnitTrait_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[0], 3, 0, __PYX_ERR(0, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.UnitTrait.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":216
 *         return difference/normalizer
 * cdef class FloatListTrait():
 *     def __cinit__(self,double[:] l,size_t[:] group_sizes):             # <<<<<<<<<<<<<<
 *         self.l=l
 *         self.group_sizes=group_sizes
 */

/* Python wrapper */
static int __pyx_pw_8world_cy_14FloatListTrait_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8world_cy_14FloatListTrait_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_l = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_group_sizes = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_l,&__pyx_n_s_group_sizes,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_group_sizes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(1, 216, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 216, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_l = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_l.memview)) __PYX_ERR(1, 216, __pyx_L3_error)
    __pyx_v_group_sizes = __Pyx_PyObject_to_MemoryviewSlice_ds_size_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_group_sizes.memview)) __PYX_ERR(1, 216, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 216, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.FloatListTrait.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8world_cy_14FloatListTrait___cinit__(((struct __pyx_obj_8world_cy_FloatListTrait *)__pyx_v_self), __pyx_v_l, __pyx_v_group_sizes);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8world_cy_14FloatListTrait___cinit__(struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_self, __Pyx_memviewslice __pyx_v_l, __Pyx_memviewslice __pyx_v_group_sizes) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[1], 216, 0, __PYX_ERR(1, 216, __pyx_L1_error));

  /* "world_cy.pyx":217
 * cdef class FloatListTrait():
 *     def __cinit__(self,double[:] l,size_t[:] group_sizes):
 *         self.l=l             # <<<<<<<<<<<<<<
 *         self.group_sizes=group_sizes
 *     def yield_l(self):
 */
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->l, 0);
  __PYX_INC_MEMVIEW(&__pyx_v_l, 0);
  __pyx_v_self->l = __pyx_v_l;

  /* "world_cy.pyx":218
 *     def __cinit__(self,double[:] l,size_t[:] group_sizes):
 *         self.l=l
 *         self.group_sizes=group_sizes             # <<<<<<<<<<<<<<
 *     def yield_l(self):
 *         for i in range(self.l.shape[0]):
 */
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->group_sizes, 0);
  __PYX_INC_MEMVIEW(&__pyx_v_group_sizes, 0);
  __pyx_v_self->group_sizes = __pyx_v_group_sizes;

  /* "world_cy.pyx":216
 *         return difference/normalizer
 * cdef class FloatListTrait():
 *     def __cinit__(self,double[:] l,size_t[:] group_sizes):             # <<<<<<<<<<<<<<
 *         self.l=l
 *         self.group_sizes=group_sizes
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.FloatListTrait.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_l, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_group_sizes, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8world_cy_14FloatListTrait_4generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "world_cy.pyx":219
 *         self.l=l
 *         self.group_sizes=group_sizes
 *     def yield_l(self):             # <<<<<<<<<<<<<<
 *         for i in range(self.l.shape[0]):
 *             yield self.l[i]
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_14FloatListTrait_3yield_l(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_14FloatListTrait_3yield_l(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("yield_l (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_14FloatListTrait_2yield_l(((struct __pyx_obj_8world_cy_FloatListTrait *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_14FloatListTrait_2yield_l(struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_self) {
  struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("yield_l", 0);
  __pyx_cur_scope = (struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l *)__pyx_tp_new_8world_cy___pyx_scope_struct__yield_l(__pyx_ptype_8world_cy___pyx_scope_struct__yield_l, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 219, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_8world_cy_14FloatListTrait_4generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_yield_l, __pyx_n_s_FloatListTrait_yield_l, __pyx_n_s_world_cy); if (unlikely(!gen)) __PYX_ERR(1, 219, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.FloatListTrait.yield_l", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8world_cy_14FloatListTrait_4generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l *__pyx_cur_scope = ((struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("yield_l", 0);
  __Pyx_TraceCall("yield_l", __pyx_f[1], 219, 0, __PYX_ERR(1, 219, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 219, __pyx_L1_error)

  /* "world_cy.pyx":220
 *         self.group_sizes=group_sizes
 *     def yield_l(self):
 *         for i in range(self.l.shape[0]):             # <<<<<<<<<<<<<<
 *             yield self.l[i]
 *     def get_group_sizes(self):
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_self->l.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 220, __pyx_L1_error)}
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_self->l.shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_3;

    /* "world_cy.pyx":221
 *     def yield_l(self):
 *         for i in range(self.l.shape[0]):
 *             yield self.l[i]             # <<<<<<<<<<<<<<
 *     def get_group_sizes(self):
 *         n=self.group_sizes.shape[0]
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_self->l.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 221, __pyx_L1_error)}
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_i;
    __pyx_t_5 = -1;
    if (__pyx_t_4 < 0) {
      __pyx_t_4 += __pyx_cur_scope->__pyx_v_self->l.shape[0];
      if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
    } else if (unlikely(__pyx_t_4 >= __pyx_cur_scope->__pyx_v_self->l.shape[0])) __pyx_t_5 = 0;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      __PYX_ERR(1, 221, __pyx_L1_error)
    }
    __pyx_t_6 = PyFloat_FromDouble((*((double *) ( /* dim=0 */ (__pyx_cur_scope->__pyx_v_self->l.data + __pyx_t_4 * __pyx_cur_scope->__pyx_v_self->l.strides[0]) )))); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_3 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_TraceReturn(__pyx_r, 0);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_3;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 221, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "world_cy.pyx":219
 *         self.l=l
 *         self.group_sizes=group_sizes
 *     def yield_l(self):             # <<<<<<<<<<<<<<
 *         for i in range(self.l.shape[0]):
 *             yield self.l[i]
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yield_l", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":222
 *         for i in range(self.l.shape[0]):
 *             yield self.l[i]
 *     def get_group_sizes(self):             # <<<<<<<<<<<<<<
 *         n=self.group_sizes.shape[0]
 *         l=[self.group_sizes[i] for i in range(n)]
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_14FloatListTrait_6get_group_sizes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_14FloatListTrait_6get_group_sizes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_group_sizes (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_14FloatListTrait_5get_group_sizes(((struct __pyx_obj_8world_cy_FloatListTrait *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_14FloatListTrait_5get_group_sizes(struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_self) {
  Py_ssize_t __pyx_v_n;
  PyObject *__pyx_v_l = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("get_group_sizes", 0);
  __Pyx_TraceCall("get_group_sizes", __pyx_f[1], 222, 0, __PYX_ERR(1, 222, __pyx_L1_error));

  /* "world_cy.pyx":223
 *             yield self.l[i]
 *     def get_group_sizes(self):
 *         n=self.group_sizes.shape[0]             # <<<<<<<<<<<<<<
 *         l=[self.group_sizes[i] for i in range(n)]
 *         return l
 */
  if (unlikely(!__pyx_v_self->group_sizes.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 223, __pyx_L1_error)}
  __pyx_v_n = (__pyx_v_self->group_sizes.shape[0]);

  /* "world_cy.pyx":224
 *     def get_group_sizes(self):
 *         n=self.group_sizes.shape[0]
 *         l=[self.group_sizes[i] for i in range(n)]             # <<<<<<<<<<<<<<
 *         return l
 *     cdef void mutate(self,double rate):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_n;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    if (unlikely(!__pyx_v_self->group_sizes.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 224, __pyx_L1_error)}
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_v_self->group_sizes.shape[0];
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_6 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_v_self->group_sizes.shape[0])) __pyx_t_6 = 0;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(1, 224, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyInt_FromSize_t((*((size_t *) ( /* dim=0 */ (__pyx_v_self->group_sizes.data + __pyx_t_5 * __pyx_v_self->group_sizes.strides[0]) )))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) __PYX_ERR(1, 224, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_v_l = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "world_cy.pyx":225
 *         n=self.group_sizes.shape[0]
 *         l=[self.group_sizes[i] for i in range(n)]
 *         return l             # <<<<<<<<<<<<<<
 *     cdef void mutate(self,double rate):
 *         #implemented in low level for efficiency
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_l);
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "world_cy.pyx":222
 *         for i in range(self.l.shape[0]):
 *             yield self.l[i]
 *     def get_group_sizes(self):             # <<<<<<<<<<<<<<
 *         n=self.group_sizes.shape[0]
 *         l=[self.group_sizes[i] for i in range(n)]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("world_cy.FloatListTrait.get_group_sizes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":226
 *         l=[self.group_sizes[i] for i in range(n)]
 *         return l
 *     cdef void mutate(self,double rate):             # <<<<<<<<<<<<<<
 *         #implemented in low level for efficiency
 *         cdef size_t i,n,m,remainder
 */

static void __pyx_f_8world_cy_14FloatListTrait_mutate(struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_self, double __pyx_v_rate) {
  size_t __pyx_v_i;
  size_t __pyx_v_n;
  size_t __pyx_v_m;
  size_t __pyx_v_remainder;
  double __pyx_v_w;
  double __pyx_v_x1;
  double __pyx_v_x2;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  size_t __pyx_t_6;
  int __pyx_t_7;
  size_t __pyx_t_8;
  __Pyx_RefNannySetupContext("mutate", 0);
  __Pyx_TraceCall("mutate", __pyx_f[1], 226, 0, __PYX_ERR(1, 226, __pyx_L1_error));

  /* "world_cy.pyx":231
 *         cdef double[:] dl
 *         cdef double w,x1,x2,r1,r2
 *         n=self.l.shape[0]             # <<<<<<<<<<<<<<
 *         m=n/2
 *         remainder=n-2*m
 */
  if (unlikely(!__pyx_v_self->l.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 231, __pyx_L1_error)}
  __pyx_v_n = (__pyx_v_self->l.shape[0]);

  /* "world_cy.pyx":232
 *         cdef double w,x1,x2,r1,r2
 *         n=self.l.shape[0]
 *         m=n/2             # <<<<<<<<<<<<<<
 *         remainder=n-2*m
 *         for i in range(m):
 */
  __pyx_v_m = (__pyx_v_n / 2);

  /* "world_cy.pyx":233
 *         n=self.l.shape[0]
 *         m=n/2
 *         remainder=n-2*m             # <<<<<<<<<<<<<<
 *         for i in range(m):
 *             w = 2.0
 */
  __pyx_v_remainder = (__pyx_v_n - (2 * __pyx_v_m));

  /* "world_cy.pyx":234
 *         m=n/2
 *         remainder=n-2*m
 *         for i in range(m):             # <<<<<<<<<<<<<<
 *             w = 2.0
 *             while (w >= 1.0):
 */
  __pyx_t_1 = __pyx_v_m;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "world_cy.pyx":235
 *         remainder=n-2*m
 *         for i in range(m):
 *             w = 2.0             # <<<<<<<<<<<<<<
 *             while (w >= 1.0):
 *                 x1 = 2.0 * uniform() - 1.0
 */
    __pyx_v_w = 2.0;

    /* "world_cy.pyx":236
 *         for i in range(m):
 *             w = 2.0
 *             while (w >= 1.0):             # <<<<<<<<<<<<<<
 *                 x1 = 2.0 * uniform() - 1.0
 *                 x2 = 2.0 * uniform() - 1.0
 */
    while (1) {
      __pyx_t_4 = ((__pyx_v_w >= 1.0) != 0);
      if (!__pyx_t_4) break;

      /* "world_cy.pyx":237
 *             w = 2.0
 *             while (w >= 1.0):
 *                 x1 = 2.0 * uniform() - 1.0             # <<<<<<<<<<<<<<
 *                 x2 = 2.0 * uniform() - 1.0
 *                 w = x1 * x1 + x2 * x2
 */
      __pyx_v_x1 = ((2.0 * __pyx_f_11fast_random_uniform()) - 1.0);

      /* "world_cy.pyx":238
 *             while (w >= 1.0):
 *                 x1 = 2.0 * uniform() - 1.0
 *                 x2 = 2.0 * uniform() - 1.0             # <<<<<<<<<<<<<<
 *                 w = x1 * x1 + x2 * x2
 *             w = sqrt((-2.0 * log(w)) / w)
 */
      __pyx_v_x2 = ((2.0 * __pyx_f_11fast_random_uniform()) - 1.0);

      /* "world_cy.pyx":239
 *                 x1 = 2.0 * uniform() - 1.0
 *                 x2 = 2.0 * uniform() - 1.0
 *                 w = x1 * x1 + x2 * x2             # <<<<<<<<<<<<<<
 *             w = sqrt((-2.0 * log(w)) / w)
 *             self.l[2*i]+=rate*x1*w
 */
      __pyx_v_w = ((__pyx_v_x1 * __pyx_v_x1) + (__pyx_v_x2 * __pyx_v_x2));
    }

    /* "world_cy.pyx":240
 *                 x2 = 2.0 * uniform() - 1.0
 *                 w = x1 * x1 + x2 * x2
 *             w = sqrt((-2.0 * log(w)) / w)             # <<<<<<<<<<<<<<
 *             self.l[2*i]+=rate*x1*w
 *             self.l[2*i+1]+=rate*x2*2
 */
    __pyx_t_5 = (-2.0 * log(__pyx_v_w));
    if (unlikely(__pyx_v_w == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(1, 240, __pyx_L1_error)
    }
    __pyx_v_w = sqrt((__pyx_t_5 / __pyx_v_w));

    /* "world_cy.pyx":241
 *                 w = x1 * x1 + x2 * x2
 *             w = sqrt((-2.0 * log(w)) / w)
 *             self.l[2*i]+=rate*x1*w             # <<<<<<<<<<<<<<
 *             self.l[2*i+1]+=rate*x2*2
 *         if remainder==1:
 */
    if (unlikely(!__pyx_v_self->l.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 241, __pyx_L1_error)}
    __pyx_t_6 = (2 * __pyx_v_i);
    __pyx_t_7 = -1;
    if (unlikely(__pyx_t_6 >= (size_t)__pyx_v_self->l.shape[0])) __pyx_t_7 = 0;
    if (unlikely(__pyx_t_7 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_7);
      __PYX_ERR(1, 241, __pyx_L1_error)
    }
    *((double *) ( /* dim=0 */ (__pyx_v_self->l.data + __pyx_t_6 * __pyx_v_self->l.strides[0]) )) += ((__pyx_v_rate * __pyx_v_x1) * __pyx_v_w);

    /* "world_cy.pyx":242
 *             w = sqrt((-2.0 * log(w)) / w)
 *             self.l[2*i]+=rate*x1*w
 *             self.l[2*i+1]+=rate*x2*2             # <<<<<<<<<<<<<<
 *         if remainder==1:
 *             w = 2.0
 */
    if (unlikely(!__pyx_v_self->l.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 242, __pyx_L1_error)}
    __pyx_t_8 = ((2 * __pyx_v_i) + 1);
    __pyx_t_7 = -1;
    if (unlikely(__pyx_t_8 >= (size_t)__pyx_v_self->l.shape[0])) __pyx_t_7 = 0;
    if (unlikely(__pyx_t_7 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_7);
      __PYX_ERR(1, 242, __pyx_L1_error)
    }
    *((double *) ( /* dim=0 */ (__pyx_v_self->l.data + __pyx_t_8 * __pyx_v_self->l.strides[0]) )) += ((__pyx_v_rate * __pyx_v_x2) * 2.0);
  }

  /* "world_cy.pyx":243
 *             self.l[2*i]+=rate*x1*w
 *             self.l[2*i+1]+=rate*x2*2
 *         if remainder==1:             # <<<<<<<<<<<<<<
 *             w = 2.0
 *             while (w >= 1.0):
 */
  __pyx_t_4 = ((__pyx_v_remainder == 1) != 0);
  if (__pyx_t_4) {

    /* "world_cy.pyx":244
 *             self.l[2*i+1]+=rate*x2*2
 *         if remainder==1:
 *             w = 2.0             # <<<<<<<<<<<<<<
 *             while (w >= 1.0):
 *                 x1 = 2.0 * uniform() - 1.0
 */
    __pyx_v_w = 2.0;

    /* "world_cy.pyx":245
 *         if remainder==1:
 *             w = 2.0
 *             while (w >= 1.0):             # <<<<<<<<<<<<<<
 *                 x1 = 2.0 * uniform() - 1.0
 *                 x2 = 2.0 * uniform() - 1.0
 */
    while (1) {
      __pyx_t_4 = ((__pyx_v_w >= 1.0) != 0);
      if (!__pyx_t_4) break;

      /* "world_cy.pyx":246
 *             w = 2.0
 *             while (w >= 1.0):
 *                 x1 = 2.0 * uniform() - 1.0             # <<<<<<<<<<<<<<
 *                 x2 = 2.0 * uniform() - 1.0
 *                 w = x1 * x1 + x2 * x2
 */
      __pyx_v_x1 = ((2.0 * __pyx_f_11fast_random_uniform()) - 1.0);

      /* "world_cy.pyx":247
 *             while (w >= 1.0):
 *                 x1 = 2.0 * uniform() - 1.0
 *                 x2 = 2.0 * uniform() - 1.0             # <<<<<<<<<<<<<<
 *                 w = x1 * x1 + x2 * x2
 *             w = sqrt((-2.0 * log(w)) / w)
 */
      __pyx_v_x2 = ((2.0 * __pyx_f_11fast_random_uniform()) - 1.0);

      /* "world_cy.pyx":248
 *                 x1 = 2.0 * uniform() - 1.0
 *                 x2 = 2.0 * uniform() - 1.0
 *                 w = x1 * x1 + x2 * x2             # <<<<<<<<<<<<<<
 *             w = sqrt((-2.0 * log(w)) / w)
 *             self.l[n-1]+=rate*x1*w
 */
      __pyx_v_w = ((__pyx_v_x1 * __pyx_v_x1) + (__pyx_v_x2 * __pyx_v_x2));
    }

    /* "world_cy.pyx":249
 *                 x2 = 2.0 * uniform() - 1.0
 *                 w = x1 * x1 + x2 * x2
 *             w = sqrt((-2.0 * log(w)) / w)             # <<<<<<<<<<<<<<
 *             self.l[n-1]+=rate*x1*w
 * 
 */
    __pyx_t_5 = (-2.0 * log(__pyx_v_w));
    if (unlikely(__pyx_v_w == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(1, 249, __pyx_L1_error)
    }
    __pyx_v_w = sqrt((__pyx_t_5 / __pyx_v_w));

    /* "world_cy.pyx":250
 *                 w = x1 * x1 + x2 * x2
 *             w = sqrt((-2.0 * log(w)) / w)
 *             self.l[n-1]+=rate*x1*w             # <<<<<<<<<<<<<<
 * 
 *     cdef FloatListTrait mixed(FloatListTrait t1,FloatListTrait t2):
 */
    if (unlikely(!__pyx_v_self->l.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 250, __pyx_L1_error)}
    __pyx_t_1 = (__pyx_v_n - 1);
    __pyx_t_7 = -1;
    if (unlikely(__pyx_t_1 >= (size_t)__pyx_v_self->l.shape[0])) __pyx_t_7 = 0;
    if (unlikely(__pyx_t_7 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_7);
      __PYX_ERR(1, 250, __pyx_L1_error)
    }
    *((double *) ( /* dim=0 */ (__pyx_v_self->l.data + __pyx_t_1 * __pyx_v_self->l.strides[0]) )) += ((__pyx_v_rate * __pyx_v_x1) * __pyx_v_w);

    /* "world_cy.pyx":243
 *             self.l[2*i]+=rate*x1*w
 *             self.l[2*i+1]+=rate*x2*2
 *         if remainder==1:             # <<<<<<<<<<<<<<
 *             w = 2.0
 *             while (w >= 1.0):
 */
  }

  /* "world_cy.pyx":226
 *         l=[self.group_sizes[i] for i in range(n)]
 *         return l
 *     cdef void mutate(self,double rate):             # <<<<<<<<<<<<<<
 *         #implemented in low level for efficiency
 *         cdef size_t i,n,m,remainder
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.FloatListTrait.mutate", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":252
 *             self.l[n-1]+=rate*x1*w
 * 
 *     cdef FloatListTrait mixed(FloatListTrait t1,FloatListTrait t2):             # <<<<<<<<<<<<<<
 *         cdef double[:] l
 *         cdef size_t n,i,m,j,ini_index,fin_index
 */

static struct __pyx_obj_8world_cy_FloatListTrait *__pyx_f_8world_cy_14FloatListTrait_mixed(struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_t1, struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_t2) {
  __Pyx_memviewslice __pyx_v_l = { 0, 0, { 0 }, { 0 }, { 0 } };
  size_t __pyx_v_n;
  size_t __pyx_v_i;
  size_t __pyx_v_m;
  size_t __pyx_v_j;
  size_t __pyx_v_ini_index;
  size_t __pyx_v_fin_index;
  struct __pyx_obj_8world_cy_FloatListTrait *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  size_t __pyx_t_13;
  size_t __pyx_t_14;
  size_t __pyx_t_15;
  size_t __pyx_t_16;
  size_t __pyx_t_17;
  size_t __pyx_t_18;
  size_t __pyx_t_19;
  __Pyx_RefNannySetupContext("mixed", 0);
  __Pyx_TraceCall("mixed", __pyx_f[1], 252, 0, __PYX_ERR(1, 252, __pyx_L1_error));

  /* "world_cy.pyx":255
 *         cdef double[:] l
 *         cdef size_t n,i,m,j,ini_index,fin_index
 *         n=t1.l.shape[0]             # <<<<<<<<<<<<<<
 *         m=t1.group_sizes.shape[0]
 *         ini_index=0
 */
  if (unlikely(!__pyx_v_t1->l.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 255, __pyx_L1_error)}
  __pyx_v_n = (__pyx_v_t1->l.shape[0]);

  /* "world_cy.pyx":256
 *         cdef size_t n,i,m,j,ini_index,fin_index
 *         n=t1.l.shape[0]
 *         m=t1.group_sizes.shape[0]             # <<<<<<<<<<<<<<
 *         ini_index=0
 *         l=np.empty(n,dtype=np.float64,order='C')
 */
  if (unlikely(!__pyx_v_t1->group_sizes.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 256, __pyx_L1_error)}
  __pyx_v_m = (__pyx_v_t1->group_sizes.shape[0]);

  /* "world_cy.pyx":257
 *         n=t1.l.shape[0]
 *         m=t1.group_sizes.shape[0]
 *         ini_index=0             # <<<<<<<<<<<<<<
 *         l=np.empty(n,dtype=np.float64,order='C')
 *         for j in range(m):
 */
  __pyx_v_ini_index = 0;

  /* "world_cy.pyx":258
 *         m=t1.group_sizes.shape[0]
 *         ini_index=0
 *         l=np.empty(n,dtype=np.float64,order='C')             # <<<<<<<<<<<<<<
 *         for j in range(m):
 *             fin_index=ini_index+t1.group_sizes[j]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 258, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order, __pyx_n_s_C) < 0) __PYX_ERR(1, 258, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_5, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(1, 258, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_l = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "world_cy.pyx":259
 *         ini_index=0
 *         l=np.empty(n,dtype=np.float64,order='C')
 *         for j in range(m):             # <<<<<<<<<<<<<<
 *             fin_index=ini_index+t1.group_sizes[j]
 *             if randbool():
 */
  __pyx_t_7 = __pyx_v_m;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_j = __pyx_t_9;

    /* "world_cy.pyx":260
 *         l=np.empty(n,dtype=np.float64,order='C')
 *         for j in range(m):
 *             fin_index=ini_index+t1.group_sizes[j]             # <<<<<<<<<<<<<<
 *             if randbool():
 *                 for i in range(ini_index,fin_index):
 */
    if (unlikely(!__pyx_v_t1->group_sizes.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 260, __pyx_L1_error)}
    __pyx_t_10 = __pyx_v_j;
    __pyx_t_11 = -1;
    if (unlikely(__pyx_t_10 >= (size_t)__pyx_v_t1->group_sizes.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(1, 260, __pyx_L1_error)
    }
    __pyx_v_fin_index = (__pyx_v_ini_index + (*((size_t *) ( /* dim=0 */ (__pyx_v_t1->group_sizes.data + __pyx_t_10 * __pyx_v_t1->group_sizes.strides[0]) ))));

    /* "world_cy.pyx":261
 *         for j in range(m):
 *             fin_index=ini_index+t1.group_sizes[j]
 *             if randbool():             # <<<<<<<<<<<<<<
 *                 for i in range(ini_index,fin_index):
 *                     l[i]=t1.l[i]
 */
    __pyx_t_12 = (__pyx_f_11fast_random_randbool() != 0);
    if (__pyx_t_12) {

      /* "world_cy.pyx":262
 *             fin_index=ini_index+t1.group_sizes[j]
 *             if randbool():
 *                 for i in range(ini_index,fin_index):             # <<<<<<<<<<<<<<
 *                     l[i]=t1.l[i]
 *             else:
 */
      __pyx_t_13 = __pyx_v_fin_index;
      __pyx_t_14 = __pyx_t_13;
      for (__pyx_t_15 = __pyx_v_ini_index; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
        __pyx_v_i = __pyx_t_15;

        /* "world_cy.pyx":263
 *             if randbool():
 *                 for i in range(ini_index,fin_index):
 *                     l[i]=t1.l[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 for i in range(ini_index,fin_index):
 */
        if (unlikely(!__pyx_v_t1->l.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 263, __pyx_L1_error)}
        __pyx_t_16 = __pyx_v_i;
        __pyx_t_11 = -1;
        if (unlikely(__pyx_t_16 >= (size_t)__pyx_v_t1->l.shape[0])) __pyx_t_11 = 0;
        if (unlikely(__pyx_t_11 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_11);
          __PYX_ERR(1, 263, __pyx_L1_error)
        }
        __pyx_t_17 = __pyx_v_i;
        __pyx_t_11 = -1;
        if (unlikely(__pyx_t_17 >= (size_t)__pyx_v_l.shape[0])) __pyx_t_11 = 0;
        if (unlikely(__pyx_t_11 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_11);
          __PYX_ERR(1, 263, __pyx_L1_error)
        }
        *((double *) ( /* dim=0 */ (__pyx_v_l.data + __pyx_t_17 * __pyx_v_l.strides[0]) )) = (*((double *) ( /* dim=0 */ (__pyx_v_t1->l.data + __pyx_t_16 * __pyx_v_t1->l.strides[0]) )));
      }

      /* "world_cy.pyx":261
 *         for j in range(m):
 *             fin_index=ini_index+t1.group_sizes[j]
 *             if randbool():             # <<<<<<<<<<<<<<
 *                 for i in range(ini_index,fin_index):
 *                     l[i]=t1.l[i]
 */
      goto __pyx_L5;
    }

    /* "world_cy.pyx":265
 *                     l[i]=t1.l[i]
 *             else:
 *                 for i in range(ini_index,fin_index):             # <<<<<<<<<<<<<<
 *                     l[i]=t2.l[i]
 *             ini_index=fin_index
 */
    /*else*/ {
      __pyx_t_13 = __pyx_v_fin_index;
      __pyx_t_14 = __pyx_t_13;
      for (__pyx_t_15 = __pyx_v_ini_index; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
        __pyx_v_i = __pyx_t_15;

        /* "world_cy.pyx":266
 *             else:
 *                 for i in range(ini_index,fin_index):
 *                     l[i]=t2.l[i]             # <<<<<<<<<<<<<<
 *             ini_index=fin_index
 *         return FloatListTrait(l,t1.group_sizes)
 */
        if (unlikely(!__pyx_v_t2->l.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 266, __pyx_L1_error)}
        __pyx_t_18 = __pyx_v_i;
        __pyx_t_11 = -1;
        if (unlikely(__pyx_t_18 >= (size_t)__pyx_v_t2->l.shape[0])) __pyx_t_11 = 0;
        if (unlikely(__pyx_t_11 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_11);
          __PYX_ERR(1, 266, __pyx_L1_error)
        }
        __pyx_t_19 = __pyx_v_i;
        __pyx_t_11 = -1;
        if (unlikely(__pyx_t_19 >= (size_t)__pyx_v_l.shape[0])) __pyx_t_11 = 0;
        if (unlikely(__pyx_t_11 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_11);
          __PYX_ERR(1, 266, __pyx_L1_error)
        }
        *((double *) ( /* dim=0 */ (__pyx_v_l.data + __pyx_t_19 * __pyx_v_l.strides[0]) )) = (*((double *) ( /* dim=0 */ (__pyx_v_t2->l.data + __pyx_t_18 * __pyx_v_t2->l.strides[0]) )));
      }
    }
    __pyx_L5:;

    /* "world_cy.pyx":267
 *                 for i in range(ini_index,fin_index):
 *                     l[i]=t2.l[i]
 *             ini_index=fin_index             # <<<<<<<<<<<<<<
 *         return FloatListTrait(l,t1.group_sizes)
 * 
 */
    __pyx_v_ini_index = __pyx_v_fin_index;
  }

  /* "world_cy.pyx":268
 *                     l[i]=t2.l[i]
 *             ini_index=fin_index
 *         return FloatListTrait(l,t1.group_sizes)             # <<<<<<<<<<<<<<
 * 
 *     cdef double normalized_difference(FloatListTrait t1,FloatListTrait t2):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_l, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(!__pyx_v_t1->group_sizes.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 268, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_t1->group_sizes, 1, (PyObject *(*)(char *)) __pyx_memview_get_size_t, (int (*)(char *, PyObject *)) __pyx_memview_set_size_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_5 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8world_cy_FloatListTrait), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = ((struct __pyx_obj_8world_cy_FloatListTrait *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":252
 *             self.l[n-1]+=rate*x1*w
 * 
 *     cdef FloatListTrait mixed(FloatListTrait t1,FloatListTrait t2):             # <<<<<<<<<<<<<<
 *         cdef double[:] l
 *         cdef size_t n,i,m,j,ini_index,fin_index
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_AddTraceback("world_cy.FloatListTrait.mixed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_l, 1);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":270
 *         return FloatListTrait(l,t1.group_sizes)
 * 
 *     cdef double normalized_difference(FloatListTrait t1,FloatListTrait t2):             # <<<<<<<<<<<<<<
 *         cdef double difference,normalizer
 *         cdef size_t n,i
 */

static double __pyx_f_8world_cy_14FloatListTrait_normalized_difference(struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_t1, struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_t2) {
  double __pyx_v_difference;
  double __pyx_v_normalizer;
  size_t __pyx_v_n;
  size_t __pyx_v_i;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  size_t __pyx_t_6;
  __Pyx_RefNannySetupContext("normalized_difference", 0);
  __Pyx_TraceCall("normalized_difference", __pyx_f[1], 270, 0, __PYX_ERR(1, 270, __pyx_L1_error));

  /* "world_cy.pyx":273
 *         cdef double difference,normalizer
 *         cdef size_t n,i
 *         difference=0             # <<<<<<<<<<<<<<
 *         n=t1.l.shape[0]
 *         for i in range(n):
 */
  __pyx_v_difference = 0.0;

  /* "world_cy.pyx":274
 *         cdef size_t n,i
 *         difference=0
 *         n=t1.l.shape[0]             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             difference+=abs(t1.l[i]-t2.l[i])
 */
  if (unlikely(!__pyx_v_t1->l.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 274, __pyx_L1_error)}
  __pyx_v_n = (__pyx_v_t1->l.shape[0]);

  /* "world_cy.pyx":275
 *         difference=0
 *         n=t1.l.shape[0]
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             difference+=abs(t1.l[i]-t2.l[i])
 *         normalizer=n
 */
  __pyx_t_1 = __pyx_v_n;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "world_cy.pyx":276
 *         n=t1.l.shape[0]
 *         for i in range(n):
 *             difference+=abs(t1.l[i]-t2.l[i])             # <<<<<<<<<<<<<<
 *         normalizer=n
 *         return difference/normalizer
 */
    if (unlikely(!__pyx_v_t1->l.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 276, __pyx_L1_error)}
    __pyx_t_4 = __pyx_v_i;
    __pyx_t_5 = -1;
    if (unlikely(__pyx_t_4 >= (size_t)__pyx_v_t1->l.shape[0])) __pyx_t_5 = 0;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      __PYX_ERR(1, 276, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_t2->l.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 276, __pyx_L1_error)}
    __pyx_t_6 = __pyx_v_i;
    __pyx_t_5 = -1;
    if (unlikely(__pyx_t_6 >= (size_t)__pyx_v_t2->l.shape[0])) __pyx_t_5 = 0;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      __PYX_ERR(1, 276, __pyx_L1_error)
    }
    __pyx_v_difference = (__pyx_v_difference + fabs(((*((double *) ( /* dim=0 */ (__pyx_v_t1->l.data + __pyx_t_4 * __pyx_v_t1->l.strides[0]) ))) - (*((double *) ( /* dim=0 */ (__pyx_v_t2->l.data + __pyx_t_6 * __pyx_v_t2->l.strides[0]) ))))));
  }

  /* "world_cy.pyx":277
 *         for i in range(n):
 *             difference+=abs(t1.l[i]-t2.l[i])
 *         normalizer=n             # <<<<<<<<<<<<<<
 *         return difference/normalizer
 * 
 */
  __pyx_v_normalizer = __pyx_v_n;

  /* "world_cy.pyx":278
 *             difference+=abs(t1.l[i]-t2.l[i])
 *         normalizer=n
 *         return difference/normalizer             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_normalizer == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 278, __pyx_L1_error)
  }
  __pyx_r = (__pyx_v_difference / __pyx_v_normalizer);
  goto __pyx_L0;

  /* "world_cy.pyx":270
 *         return FloatListTrait(l,t1.group_sizes)
 * 
 *     cdef double normalized_difference(FloatListTrait t1,FloatListTrait t2):             # <<<<<<<<<<<<<<
 *         cdef double difference,normalizer
 *         cdef size_t n,i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.FloatListTrait.normalized_difference", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_14FloatListTrait_8__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_14FloatListTrait_8__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_14FloatListTrait_7__reduce_cython__(((struct __pyx_obj_8world_cy_FloatListTrait *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_14FloatListTrait_7__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.FloatListTrait.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_14FloatListTrait_10__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8world_cy_14FloatListTrait_10__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_14FloatListTrait_9__setstate_cython__(((struct __pyx_obj_8world_cy_FloatListTrait *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_14FloatListTrait_9__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[0], 3, 0, __PYX_ERR(0, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.FloatListTrait.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":281
 * 
 * 
 * cdef void take_softmax(double[:] l,double c):             # <<<<<<<<<<<<<<
 *     #np.ndarray(dim 1)*float->np.ndarray(dim 1)
 *     #called in: LinearBrain.control()
 */

static void __pyx_f_8world_cy_take_softmax(__Pyx_memviewslice __pyx_v_l, double __pyx_v_c) {
  double __pyx_v_sum;
  size_t __pyx_v_n;
  size_t __pyx_v_i;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  __Pyx_RefNannySetupContext("take_softmax", 0);
  __Pyx_TraceCall("take_softmax", __pyx_f[1], 281, 0, __PYX_ERR(1, 281, __pyx_L1_error));

  /* "world_cy.pyx":286
 *     cdef double sum
 *     cdef size_t n,i
 *     sum=0             # <<<<<<<<<<<<<<
 *     n=l.shape[0]
 *     for i in range(n):
 */
  __pyx_v_sum = 0.0;

  /* "world_cy.pyx":287
 *     cdef size_t n,i
 *     sum=0
 *     n=l.shape[0]             # <<<<<<<<<<<<<<
 *     for i in range(n):
 *         l[i]=exp(c*l[i])
 */
  __pyx_v_n = (__pyx_v_l.shape[0]);

  /* "world_cy.pyx":288
 *     sum=0
 *     n=l.shape[0]
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         l[i]=exp(c*l[i])
 *         sum+=l[i]
 */
  __pyx_t_1 = __pyx_v_n;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "world_cy.pyx":289
 *     n=l.shape[0]
 *     for i in range(n):
 *         l[i]=exp(c*l[i])             # <<<<<<<<<<<<<<
 *         sum+=l[i]
 *     for i in range(n):
 */
    __pyx_t_4 = __pyx_v_i;
    __pyx_t_5 = -1;
    if (unlikely(__pyx_t_4 >= (size_t)__pyx_v_l.shape[0])) __pyx_t_5 = 0;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      __PYX_ERR(1, 289, __pyx_L1_error)
    }
    __pyx_t_6 = __pyx_v_i;
    __pyx_t_5 = -1;
    if (unlikely(__pyx_t_6 >= (size_t)__pyx_v_l.shape[0])) __pyx_t_5 = 0;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      __PYX_ERR(1, 289, __pyx_L1_error)
    }
    *((double *) ( /* dim=0 */ (__pyx_v_l.data + __pyx_t_6 * __pyx_v_l.strides[0]) )) = exp((__pyx_v_c * (*((double *) ( /* dim=0 */ (__pyx_v_l.data + __pyx_t_4 * __pyx_v_l.strides[0]) )))));

    /* "world_cy.pyx":290
 *     for i in range(n):
 *         l[i]=exp(c*l[i])
 *         sum+=l[i]             # <<<<<<<<<<<<<<
 *     for i in range(n):
 *         l[i]/=sum
 */
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_5 = -1;
    if (unlikely(__pyx_t_7 >= (size_t)__pyx_v_l.shape[0])) __pyx_t_5 = 0;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      __PYX_ERR(1, 290, __pyx_L1_error)
    }
    __pyx_v_sum = (__pyx_v_sum + (*((double *) ( /* dim=0 */ (__pyx_v_l.data + __pyx_t_7 * __pyx_v_l.strides[0]) ))));
  }

  /* "world_cy.pyx":291
 *         l[i]=exp(c*l[i])
 *         sum+=l[i]
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         l[i]/=sum
 * 
 */
  __pyx_t_1 = __pyx_v_n;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "world_cy.pyx":292
 *         sum+=l[i]
 *     for i in range(n):
 *         l[i]/=sum             # <<<<<<<<<<<<<<
 * 
 * cdef double sigmoid(double x,double c):
 */
    __pyx_t_8 = __pyx_v_i;
    __pyx_t_5 = -1;
    if (unlikely(__pyx_t_8 >= (size_t)__pyx_v_l.shape[0])) __pyx_t_5 = 0;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      __PYX_ERR(1, 292, __pyx_L1_error)
    }
    *((double *) ( /* dim=0 */ (__pyx_v_l.data + __pyx_t_8 * __pyx_v_l.strides[0]) )) /= __pyx_v_sum;
  }

  /* "world_cy.pyx":281
 * 
 * 
 * cdef void take_softmax(double[:] l,double c):             # <<<<<<<<<<<<<<
 *     #np.ndarray(dim 1)*float->np.ndarray(dim 1)
 *     #called in: LinearBrain.control()
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.take_softmax", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":294
 *         l[i]/=sum
 * 
 * cdef double sigmoid(double x,double c):             # <<<<<<<<<<<<<<
 *     return 1/(1+exp(-c*x))
 * 
 */

static double __pyx_f_8world_cy_sigmoid(double __pyx_v_x, double __pyx_v_c) {
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("sigmoid", 0);
  __Pyx_TraceCall("sigmoid", __pyx_f[1], 294, 0, __PYX_ERR(1, 294, __pyx_L1_error));

  /* "world_cy.pyx":295
 * 
 * cdef double sigmoid(double x,double c):
 *     return 1/(1+exp(-c*x))             # <<<<<<<<<<<<<<
 * 
 * #---------------------------------------------------------------
 */
  __pyx_t_1 = (1.0 + exp(((-__pyx_v_c) * __pyx_v_x)));
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 295, __pyx_L1_error)
  }
  __pyx_r = (1.0 / __pyx_t_1);
  goto __pyx_L0;

  /* "world_cy.pyx":294
 *         l[i]/=sum
 * 
 * cdef double sigmoid(double x,double c):             # <<<<<<<<<<<<<<
 *     return 1/(1+exp(-c*x))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.sigmoid", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":299
 * #---------------------------------------------------------------
 * 
 * cpdef LinearDNA randLinearDNA_with((int,int,int) c,double mst_a,double utt_a,double mat_a):             # <<<<<<<<<<<<<<
 *     cdef int r,g,b
 *     cdef double maxsize,uptake,maxage
 */

static PyObject *__pyx_pw_8world_cy_11randLinearDNA_with(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_8world_cy_LinearDNA *__pyx_f_8world_cy_randLinearDNA_with(__pyx_ctuple_int__and_int__and_int __pyx_v_c, double __pyx_v_mst_a, double __pyx_v_utt_a, double __pyx_v_mat_a, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_r;
  int __pyx_v_g;
  int __pyx_v_b;
  __Pyx_memviewslice __pyx_v_weights = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_group_sizes = { 0, 0, { 0 }, { 0 }, { 0 } };
  struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_colorTrait = 0;
  struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_maxsizeTrait = 0;
  struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_uptakeTrait = 0;
  struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_maxageTrait = 0;
  struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_weightsTrait = 0;
  size_t __pyx_v_i;
  struct __pyx_obj_8world_cy_LinearDNA *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_t_6;
  size_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_memviewslice __pyx_t_13 = { 0, 0, { 0 }, { 0 }, { 0 } };
  size_t __pyx_t_14;
  __Pyx_RefNannySetupContext("randLinearDNA_with", 0);
  __Pyx_TraceCall("randLinearDNA_with", __pyx_f[1], 299, 0, __PYX_ERR(1, 299, __pyx_L1_error));

  /* "world_cy.pyx":310
 *     cdef FloatListTrait weightsTrait
 *     cdef size_t i
 *     r=c[0]             # <<<<<<<<<<<<<<
 *     g=c[1]
 *     b=c[2]
 */
  __pyx_v_r = __pyx_v_c.f0;

  /* "world_cy.pyx":311
 *     cdef size_t i
 *     r=c[0]
 *     g=c[1]             # <<<<<<<<<<<<<<
 *     b=c[2]
 *     weights=multiple_uniform(linear_wdim)
 */
  __pyx_v_g = __pyx_v_c.f1;

  /* "world_cy.pyx":312
 *     r=c[0]
 *     g=c[1]
 *     b=c[2]             # <<<<<<<<<<<<<<
 *     weights=multiple_uniform(linear_wdim)
 *     for i in range(<size_t>linear_wdim):
 */
  __pyx_v_b = __pyx_v_c.f2;

  /* "world_cy.pyx":313
 *     g=c[1]
 *     b=c[2]
 *     weights=multiple_uniform(linear_wdim)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>linear_wdim):
 *         weights[i]=1-2*weights[i]
 */
  __pyx_t_1 = __pyx_f_11fast_random_multiple_uniform(__pyx_v_8world_cy_linear_wdim); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 313, __pyx_L1_error)
  __pyx_v_weights = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* "world_cy.pyx":314
 *     b=c[2]
 *     weights=multiple_uniform(linear_wdim)
 *     for i in range(<size_t>linear_wdim):             # <<<<<<<<<<<<<<
 *         weights[i]=1-2*weights[i]
 *     group_sizes=np.empty(num_out,dtype=np.uintp)
 */
  __pyx_t_2 = ((size_t)__pyx_v_8world_cy_linear_wdim);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "world_cy.pyx":315
 *     weights=multiple_uniform(linear_wdim)
 *     for i in range(<size_t>linear_wdim):
 *         weights[i]=1-2*weights[i]             # <<<<<<<<<<<<<<
 *     group_sizes=np.empty(num_out,dtype=np.uintp)
 *     for i in range(<size_t>num_out):
 */
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = -1;
    if (unlikely(__pyx_t_5 >= (size_t)__pyx_v_weights.shape[0])) __pyx_t_6 = 0;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(1, 315, __pyx_L1_error)
    }
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_6 = -1;
    if (unlikely(__pyx_t_7 >= (size_t)__pyx_v_weights.shape[0])) __pyx_t_6 = 0;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(1, 315, __pyx_L1_error)
    }
    *((double *) ( /* dim=0 */ (__pyx_v_weights.data + __pyx_t_7 * __pyx_v_weights.strides[0]) )) = (1.0 - (2.0 * (*((double *) ( /* dim=0 */ (__pyx_v_weights.data + __pyx_t_5 * __pyx_v_weights.strides[0]) )))));
  }

  /* "world_cy.pyx":316
 *     for i in range(<size_t>linear_wdim):
 *         weights[i]=1-2*weights[i]
 *     group_sizes=np.empty(num_out,dtype=np.uintp)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>num_out):
 *         group_sizes[i]=clear_idim
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_empty); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_8world_cy_num_out); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_uintp); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_12) < 0) __PYX_ERR(1, 316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_13 = __Pyx_PyObject_to_MemoryviewSlice_ds_size_t(__pyx_t_12, PyBUF_WRITABLE); if (unlikely(!__pyx_t_13.memview)) __PYX_ERR(1, 316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_v_group_sizes = __pyx_t_13;
  __pyx_t_13.memview = NULL;
  __pyx_t_13.data = NULL;

  /* "world_cy.pyx":317
 *         weights[i]=1-2*weights[i]
 *     group_sizes=np.empty(num_out,dtype=np.uintp)
 *     for i in range(<size_t>num_out):             # <<<<<<<<<<<<<<
 *         group_sizes[i]=clear_idim
 *     colorTrait=ColorTrait(r,g,b)
 */
  __pyx_t_2 = ((size_t)__pyx_v_8world_cy_num_out);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "world_cy.pyx":318
 *     group_sizes=np.empty(num_out,dtype=np.uintp)
 *     for i in range(<size_t>num_out):
 *         group_sizes[i]=clear_idim             # <<<<<<<<<<<<<<
 *     colorTrait=ColorTrait(r,g,b)
 *     maxsizeTrait=PositiveTrait(mst_a)
 */
    __pyx_t_14 = __pyx_v_i;
    __pyx_t_6 = -1;
    if (unlikely(__pyx_t_14 >= (size_t)__pyx_v_group_sizes.shape[0])) __pyx_t_6 = 0;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(1, 318, __pyx_L1_error)
    }
    *((size_t *) ( /* dim=0 */ (__pyx_v_group_sizes.data + __pyx_t_14 * __pyx_v_group_sizes.strides[0]) )) = __pyx_v_8world_cy_clear_idim;
  }

  /* "world_cy.pyx":319
 *     for i in range(<size_t>num_out):
 *         group_sizes[i]=clear_idim
 *     colorTrait=ColorTrait(r,g,b)             # <<<<<<<<<<<<<<
 *     maxsizeTrait=PositiveTrait(mst_a)
 *     uptakeTrait=UnitTrait(utt_a)
 */
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_r); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_g); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_b); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_10);
  __pyx_t_12 = 0;
  __pyx_t_8 = 0;
  __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8world_cy_ColorTrait), __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_colorTrait = ((struct __pyx_obj_8world_cy_ColorTrait *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "world_cy.pyx":320
 *         group_sizes[i]=clear_idim
 *     colorTrait=ColorTrait(r,g,b)
 *     maxsizeTrait=PositiveTrait(mst_a)             # <<<<<<<<<<<<<<
 *     uptakeTrait=UnitTrait(utt_a)
 *     maxageTrait=PositiveTrait(mat_a)
 */
  __pyx_t_10 = PyFloat_FromDouble(__pyx_v_mst_a); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8world_cy_PositiveTrait), __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_maxsizeTrait = ((struct __pyx_obj_8world_cy_PositiveTrait *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "world_cy.pyx":321
 *     colorTrait=ColorTrait(r,g,b)
 *     maxsizeTrait=PositiveTrait(mst_a)
 *     uptakeTrait=UnitTrait(utt_a)             # <<<<<<<<<<<<<<
 *     maxageTrait=PositiveTrait(mat_a)
 *     weightsTrait=FloatListTrait(weights,group_sizes)
 */
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_utt_a); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8world_cy_UnitTrait), __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_uptakeTrait = ((struct __pyx_obj_8world_cy_UnitTrait *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "world_cy.pyx":322
 *     maxsizeTrait=PositiveTrait(mst_a)
 *     uptakeTrait=UnitTrait(utt_a)
 *     maxageTrait=PositiveTrait(mat_a)             # <<<<<<<<<<<<<<
 *     weightsTrait=FloatListTrait(weights,group_sizes)
 *     return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)
 */
  __pyx_t_10 = PyFloat_FromDouble(__pyx_v_mat_a); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8world_cy_PositiveTrait), __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_maxageTrait = ((struct __pyx_obj_8world_cy_PositiveTrait *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "world_cy.pyx":323
 *     uptakeTrait=UnitTrait(utt_a)
 *     maxageTrait=PositiveTrait(mat_a)
 *     weightsTrait=FloatListTrait(weights,group_sizes)             # <<<<<<<<<<<<<<
 *     return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)
 * cpdef LinearDNA randLinearDNA():
 */
  __pyx_t_9 = __pyx_memoryview_fromslice(__pyx_v_weights, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __pyx_memoryview_fromslice(__pyx_v_group_sizes, 1, (PyObject *(*)(char *)) __pyx_memview_get_size_t, (int (*)(char *, PyObject *)) __pyx_memview_set_size_t, 0);; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_10);
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8world_cy_FloatListTrait), __pyx_t_8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_weightsTrait = ((struct __pyx_obj_8world_cy_FloatListTrait *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "world_cy.pyx":324
 *     maxageTrait=PositiveTrait(mat_a)
 *     weightsTrait=FloatListTrait(weights,group_sizes)
 *     return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)             # <<<<<<<<<<<<<<
 * cpdef LinearDNA randLinearDNA():
 *     cdef int r,g,b
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_10 = PyTuple_New(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(((PyObject *)__pyx_v_colorTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_colorTrait));
  PyTuple_SET_ITEM(__pyx_t_10, 0, ((PyObject *)__pyx_v_colorTrait));
  __Pyx_INCREF(((PyObject *)__pyx_v_maxsizeTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_maxsizeTrait));
  PyTuple_SET_ITEM(__pyx_t_10, 1, ((PyObject *)__pyx_v_maxsizeTrait));
  __Pyx_INCREF(((PyObject *)__pyx_v_uptakeTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_uptakeTrait));
  PyTuple_SET_ITEM(__pyx_t_10, 2, ((PyObject *)__pyx_v_uptakeTrait));
  __Pyx_INCREF(((PyObject *)__pyx_v_maxageTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_maxageTrait));
  PyTuple_SET_ITEM(__pyx_t_10, 3, ((PyObject *)__pyx_v_maxageTrait));
  __Pyx_INCREF(((PyObject *)__pyx_v_weightsTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_weightsTrait));
  PyTuple_SET_ITEM(__pyx_t_10, 4, ((PyObject *)__pyx_v_weightsTrait));
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8world_cy_LinearDNA), __pyx_t_10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_r = ((struct __pyx_obj_8world_cy_LinearDNA *)__pyx_t_8);
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":299
 * #---------------------------------------------------------------
 * 
 * cpdef LinearDNA randLinearDNA_with((int,int,int) c,double mst_a,double utt_a,double mat_a):             # <<<<<<<<<<<<<<
 *     cdef int r,g,b
 *     cdef double maxsize,uptake,maxage
 */

  /* function exit code */
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __PYX_XDEC_MEMVIEW(&__pyx_t_13, 1);
  __Pyx_AddTraceback("world_cy.randLinearDNA_with", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_weights, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_group_sizes, 1);
  __Pyx_XDECREF((PyObject *)__pyx_v_colorTrait);
  __Pyx_XDECREF((PyObject *)__pyx_v_maxsizeTrait);
  __Pyx_XDECREF((PyObject *)__pyx_v_uptakeTrait);
  __Pyx_XDECREF((PyObject *)__pyx_v_maxageTrait);
  __Pyx_XDECREF((PyObject *)__pyx_v_weightsTrait);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_11randLinearDNA_with(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8world_cy_11randLinearDNA_with(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_ctuple_int__and_int__and_int __pyx_v_c;
  double __pyx_v_mst_a;
  double __pyx_v_utt_a;
  double __pyx_v_mat_a;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("randLinearDNA_with (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_c,&__pyx_n_s_mst_a,&__pyx_n_s_utt_a,&__pyx_n_s_mat_a,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mst_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("randLinearDNA_with", 1, 4, 4, 1); __PYX_ERR(1, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_utt_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("randLinearDNA_with", 1, 4, 4, 2); __PYX_ERR(1, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mat_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("randLinearDNA_with", 1, 4, 4, 3); __PYX_ERR(1, 299, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "randLinearDNA_with") < 0)) __PYX_ERR(1, 299, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_c = __pyx_convert__from_py___pyx_ctuple_int__and_int__and_int(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 299, __pyx_L3_error)
    __pyx_v_mst_a = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_mst_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 299, __pyx_L3_error)
    __pyx_v_utt_a = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_utt_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 299, __pyx_L3_error)
    __pyx_v_mat_a = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_mat_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 299, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("randLinearDNA_with", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 299, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.randLinearDNA_with", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8world_cy_10randLinearDNA_with(__pyx_self, __pyx_v_c, __pyx_v_mst_a, __pyx_v_utt_a, __pyx_v_mat_a);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_10randLinearDNA_with(CYTHON_UNUSED PyObject *__pyx_self, __pyx_ctuple_int__and_int__and_int __pyx_v_c, double __pyx_v_mst_a, double __pyx_v_utt_a, double __pyx_v_mat_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("randLinearDNA_with", 0);
  __Pyx_TraceCall("randLinearDNA_with (wrapper)", __pyx_f[1], 299, 0, __PYX_ERR(1, 299, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8world_cy_randLinearDNA_with(__pyx_v_c, __pyx_v_mst_a, __pyx_v_utt_a, __pyx_v_mat_a, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.randLinearDNA_with", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":325
 *     weightsTrait=FloatListTrait(weights,group_sizes)
 *     return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)
 * cpdef LinearDNA randLinearDNA():             # <<<<<<<<<<<<<<
 *     cdef int r,g,b
 *     cdef double maxsize,uptake,maxage
 */

static PyObject *__pyx_pw_8world_cy_13randLinearDNA(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_8world_cy_LinearDNA *__pyx_f_8world_cy_randLinearDNA(CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_r;
  int __pyx_v_g;
  int __pyx_v_b;
  double __pyx_v_maxsize;
  double __pyx_v_uptake;
  double __pyx_v_maxage;
  __Pyx_memviewslice __pyx_v_weights = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_group_sizes = { 0, 0, { 0 }, { 0 }, { 0 } };
  struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_colorTrait = 0;
  struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_maxsizeTrait = 0;
  struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_uptakeTrait = 0;
  struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_maxageTrait = 0;
  struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_weightsTrait = 0;
  size_t __pyx_v_i;
  struct __pyx_obj_8world_cy_LinearDNA *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_t_6;
  size_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_memviewslice __pyx_t_13 = { 0, 0, { 0 }, { 0 }, { 0 } };
  size_t __pyx_t_14;
  __Pyx_RefNannySetupContext("randLinearDNA", 0);
  __Pyx_TraceCall("randLinearDNA", __pyx_f[1], 325, 0, __PYX_ERR(1, 325, __pyx_L1_error));

  /* "world_cy.pyx":336
 *     cdef FloatListTrait weightsTrait
 *     cdef size_t i
 *     r=randint(0,255)             # <<<<<<<<<<<<<<
 *     g=randint(0,255)
 *     b=randint(0,255)
 */
  __pyx_v_r = __pyx_f_11fast_random_randint(0, 0xFF);

  /* "world_cy.pyx":337
 *     cdef size_t i
 *     r=randint(0,255)
 *     g=randint(0,255)             # <<<<<<<<<<<<<<
 *     b=randint(0,255)
 *     maxsize=randint(min_maxsize,max_maxsize)
 */
  __pyx_v_g = __pyx_f_11fast_random_randint(0, 0xFF);

  /* "world_cy.pyx":338
 *     r=randint(0,255)
 *     g=randint(0,255)
 *     b=randint(0,255)             # <<<<<<<<<<<<<<
 *     maxsize=randint(min_maxsize,max_maxsize)
 *     uptake=min_uptake+(max_uptake-min_uptake)*uniform()
 */
  __pyx_v_b = __pyx_f_11fast_random_randint(0, 0xFF);

  /* "world_cy.pyx":339
 *     g=randint(0,255)
 *     b=randint(0,255)
 *     maxsize=randint(min_maxsize,max_maxsize)             # <<<<<<<<<<<<<<
 *     uptake=min_uptake+(max_uptake-min_uptake)*uniform()
 *     maxage=randint(min_maxage,max_maxage)
 */
  __pyx_v_maxsize = __pyx_f_11fast_random_randint(__pyx_v_8world_cy_min_maxsize, __pyx_v_8world_cy_max_maxsize);

  /* "world_cy.pyx":340
 *     b=randint(0,255)
 *     maxsize=randint(min_maxsize,max_maxsize)
 *     uptake=min_uptake+(max_uptake-min_uptake)*uniform()             # <<<<<<<<<<<<<<
 *     maxage=randint(min_maxage,max_maxage)
 *     weights=multiple_uniform(linear_wdim)
 */
  __pyx_v_uptake = (__pyx_v_8world_cy_min_uptake + ((__pyx_v_8world_cy_max_uptake - __pyx_v_8world_cy_min_uptake) * __pyx_f_11fast_random_uniform()));

  /* "world_cy.pyx":341
 *     maxsize=randint(min_maxsize,max_maxsize)
 *     uptake=min_uptake+(max_uptake-min_uptake)*uniform()
 *     maxage=randint(min_maxage,max_maxage)             # <<<<<<<<<<<<<<
 *     weights=multiple_uniform(linear_wdim)
 *     for i in range(<size_t>linear_wdim):
 */
  __pyx_v_maxage = __pyx_f_11fast_random_randint(__pyx_v_8world_cy_min_maxage, __pyx_v_8world_cy_max_maxage);

  /* "world_cy.pyx":342
 *     uptake=min_uptake+(max_uptake-min_uptake)*uniform()
 *     maxage=randint(min_maxage,max_maxage)
 *     weights=multiple_uniform(linear_wdim)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>linear_wdim):
 *         weights[i]=1-2*weights[i]
 */
  __pyx_t_1 = __pyx_f_11fast_random_multiple_uniform(__pyx_v_8world_cy_linear_wdim); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 342, __pyx_L1_error)
  __pyx_v_weights = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* "world_cy.pyx":343
 *     maxage=randint(min_maxage,max_maxage)
 *     weights=multiple_uniform(linear_wdim)
 *     for i in range(<size_t>linear_wdim):             # <<<<<<<<<<<<<<
 *         weights[i]=1-2*weights[i]
 *     group_sizes=np.empty(num_out,dtype=np.uintp)
 */
  __pyx_t_2 = ((size_t)__pyx_v_8world_cy_linear_wdim);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "world_cy.pyx":344
 *     weights=multiple_uniform(linear_wdim)
 *     for i in range(<size_t>linear_wdim):
 *         weights[i]=1-2*weights[i]             # <<<<<<<<<<<<<<
 *     group_sizes=np.empty(num_out,dtype=np.uintp)
 *     for i in range(<size_t>num_out):
 */
    __pyx_t_5 = __pyx_v_i;
    __pyx_t_6 = -1;
    if (unlikely(__pyx_t_5 >= (size_t)__pyx_v_weights.shape[0])) __pyx_t_6 = 0;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(1, 344, __pyx_L1_error)
    }
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_6 = -1;
    if (unlikely(__pyx_t_7 >= (size_t)__pyx_v_weights.shape[0])) __pyx_t_6 = 0;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(1, 344, __pyx_L1_error)
    }
    *((double *) ( /* dim=0 */ (__pyx_v_weights.data + __pyx_t_7 * __pyx_v_weights.strides[0]) )) = (1.0 - (2.0 * (*((double *) ( /* dim=0 */ (__pyx_v_weights.data + __pyx_t_5 * __pyx_v_weights.strides[0]) )))));
  }

  /* "world_cy.pyx":345
 *     for i in range(<size_t>linear_wdim):
 *         weights[i]=1-2*weights[i]
 *     group_sizes=np.empty(num_out,dtype=np.uintp)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>num_out):
 *         group_sizes[i]=clear_idim
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_empty); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_8world_cy_num_out); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_uintp); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_12) < 0) __PYX_ERR(1, 345, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_13 = __Pyx_PyObject_to_MemoryviewSlice_ds_size_t(__pyx_t_12, PyBUF_WRITABLE); if (unlikely(!__pyx_t_13.memview)) __PYX_ERR(1, 345, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_v_group_sizes = __pyx_t_13;
  __pyx_t_13.memview = NULL;
  __pyx_t_13.data = NULL;

  /* "world_cy.pyx":346
 *         weights[i]=1-2*weights[i]
 *     group_sizes=np.empty(num_out,dtype=np.uintp)
 *     for i in range(<size_t>num_out):             # <<<<<<<<<<<<<<
 *         group_sizes[i]=clear_idim
 *     colorTrait=ColorTrait(r,g,b)
 */
  __pyx_t_2 = ((size_t)__pyx_v_8world_cy_num_out);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "world_cy.pyx":347
 *     group_sizes=np.empty(num_out,dtype=np.uintp)
 *     for i in range(<size_t>num_out):
 *         group_sizes[i]=clear_idim             # <<<<<<<<<<<<<<
 *     colorTrait=ColorTrait(r,g,b)
 *     maxsizeTrait=PositiveTrait(maxsize)
 */
    __pyx_t_14 = __pyx_v_i;
    __pyx_t_6 = -1;
    if (unlikely(__pyx_t_14 >= (size_t)__pyx_v_group_sizes.shape[0])) __pyx_t_6 = 0;
    if (unlikely(__pyx_t_6 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_6);
      __PYX_ERR(1, 347, __pyx_L1_error)
    }
    *((size_t *) ( /* dim=0 */ (__pyx_v_group_sizes.data + __pyx_t_14 * __pyx_v_group_sizes.strides[0]) )) = __pyx_v_8world_cy_clear_idim;
  }

  /* "world_cy.pyx":348
 *     for i in range(<size_t>num_out):
 *         group_sizes[i]=clear_idim
 *     colorTrait=ColorTrait(r,g,b)             # <<<<<<<<<<<<<<
 *     maxsizeTrait=PositiveTrait(maxsize)
 *     uptakeTrait=UnitTrait(uptake)
 */
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_r); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_g); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_b); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_10);
  __pyx_t_12 = 0;
  __pyx_t_8 = 0;
  __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8world_cy_ColorTrait), __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_colorTrait = ((struct __pyx_obj_8world_cy_ColorTrait *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "world_cy.pyx":349
 *         group_sizes[i]=clear_idim
 *     colorTrait=ColorTrait(r,g,b)
 *     maxsizeTrait=PositiveTrait(maxsize)             # <<<<<<<<<<<<<<
 *     uptakeTrait=UnitTrait(uptake)
 *     maxageTrait=PositiveTrait(maxage)
 */
  __pyx_t_10 = PyFloat_FromDouble(__pyx_v_maxsize); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8world_cy_PositiveTrait), __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_maxsizeTrait = ((struct __pyx_obj_8world_cy_PositiveTrait *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "world_cy.pyx":350
 *     colorTrait=ColorTrait(r,g,b)
 *     maxsizeTrait=PositiveTrait(maxsize)
 *     uptakeTrait=UnitTrait(uptake)             # <<<<<<<<<<<<<<
 *     maxageTrait=PositiveTrait(maxage)
 *     weightsTrait=FloatListTrait(weights,group_sizes)
 */
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_uptake); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8world_cy_UnitTrait), __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_uptakeTrait = ((struct __pyx_obj_8world_cy_UnitTrait *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "world_cy.pyx":351
 *     maxsizeTrait=PositiveTrait(maxsize)
 *     uptakeTrait=UnitTrait(uptake)
 *     maxageTrait=PositiveTrait(maxage)             # <<<<<<<<<<<<<<
 *     weightsTrait=FloatListTrait(weights,group_sizes)
 *     return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)
 */
  __pyx_t_10 = PyFloat_FromDouble(__pyx_v_maxage); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8world_cy_PositiveTrait), __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_maxageTrait = ((struct __pyx_obj_8world_cy_PositiveTrait *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "world_cy.pyx":352
 *     uptakeTrait=UnitTrait(uptake)
 *     maxageTrait=PositiveTrait(maxage)
 *     weightsTrait=FloatListTrait(weights,group_sizes)             # <<<<<<<<<<<<<<
 *     return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)
 * 
 */
  __pyx_t_9 = __pyx_memoryview_fromslice(__pyx_v_weights, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __pyx_memoryview_fromslice(__pyx_v_group_sizes, 1, (PyObject *(*)(char *)) __pyx_memview_get_size_t, (int (*)(char *, PyObject *)) __pyx_memview_set_size_t, 0);; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_10);
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8world_cy_FloatListTrait), __pyx_t_8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_weightsTrait = ((struct __pyx_obj_8world_cy_FloatListTrait *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "world_cy.pyx":353
 *     maxageTrait=PositiveTrait(maxage)
 *     weightsTrait=FloatListTrait(weights,group_sizes)
 *     return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)             # <<<<<<<<<<<<<<
 * 
 * def write_list_of_dnas_file(l,filename):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_10 = PyTuple_New(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(((PyObject *)__pyx_v_colorTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_colorTrait));
  PyTuple_SET_ITEM(__pyx_t_10, 0, ((PyObject *)__pyx_v_colorTrait));
  __Pyx_INCREF(((PyObject *)__pyx_v_maxsizeTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_maxsizeTrait));
  PyTuple_SET_ITEM(__pyx_t_10, 1, ((PyObject *)__pyx_v_maxsizeTrait));
  __Pyx_INCREF(((PyObject *)__pyx_v_uptakeTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_uptakeTrait));
  PyTuple_SET_ITEM(__pyx_t_10, 2, ((PyObject *)__pyx_v_uptakeTrait));
  __Pyx_INCREF(((PyObject *)__pyx_v_maxageTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_maxageTrait));
  PyTuple_SET_ITEM(__pyx_t_10, 3, ((PyObject *)__pyx_v_maxageTrait));
  __Pyx_INCREF(((PyObject *)__pyx_v_weightsTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_weightsTrait));
  PyTuple_SET_ITEM(__pyx_t_10, 4, ((PyObject *)__pyx_v_weightsTrait));
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8world_cy_LinearDNA), __pyx_t_10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_r = ((struct __pyx_obj_8world_cy_LinearDNA *)__pyx_t_8);
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":325
 *     weightsTrait=FloatListTrait(weights,group_sizes)
 *     return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)
 * cpdef LinearDNA randLinearDNA():             # <<<<<<<<<<<<<<
 *     cdef int r,g,b
 *     cdef double maxsize,uptake,maxage
 */

  /* function exit code */
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __PYX_XDEC_MEMVIEW(&__pyx_t_13, 1);
  __Pyx_AddTraceback("world_cy.randLinearDNA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_weights, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_group_sizes, 1);
  __Pyx_XDECREF((PyObject *)__pyx_v_colorTrait);
  __Pyx_XDECREF((PyObject *)__pyx_v_maxsizeTrait);
  __Pyx_XDECREF((PyObject *)__pyx_v_uptakeTrait);
  __Pyx_XDECREF((PyObject *)__pyx_v_maxageTrait);
  __Pyx_XDECREF((PyObject *)__pyx_v_weightsTrait);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_13randLinearDNA(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_13randLinearDNA(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("randLinearDNA (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_12randLinearDNA(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_12randLinearDNA(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("randLinearDNA", 0);
  __Pyx_TraceCall("randLinearDNA (wrapper)", __pyx_f[1], 325, 0, __PYX_ERR(1, 325, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8world_cy_randLinearDNA(0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.randLinearDNA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":355
 *     return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)
 * 
 * def write_list_of_dnas_file(l,filename):             # <<<<<<<<<<<<<<
 *     f=open(filename,'w')
 *     f.write(str(len(l))+"\n")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_15write_list_of_dnas_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8world_cy_15write_list_of_dnas_file = {"write_list_of_dnas_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8world_cy_15write_list_of_dnas_file, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8world_cy_15write_list_of_dnas_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_l = 0;
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_list_of_dnas_file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_l,&__pyx_n_s_filename,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_list_of_dnas_file", 1, 2, 2, 1); __PYX_ERR(1, 355, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write_list_of_dnas_file") < 0)) __PYX_ERR(1, 355, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_l = values[0];
    __pyx_v_filename = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_list_of_dnas_file", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 355, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.write_list_of_dnas_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8world_cy_14write_list_of_dnas_file(__pyx_self, __pyx_v_l, __pyx_v_filename);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_14write_list_of_dnas_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_l, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_group_sizes = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_dnas = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_dna = NULL;
  PyObject *__pyx_v_ct = NULL;
  PyObject *__pyx_v_mst = NULL;
  PyObject *__pyx_v_utt = NULL;
  PyObject *__pyx_v_mat = NULL;
  PyObject *__pyx_v_wt = NULL;
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  Py_ssize_t __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  __Pyx_TraceFrameInit(__pyx_codeobj__14)
  __Pyx_RefNannySetupContext("write_list_of_dnas_file", 0);
  __Pyx_TraceCall("write_list_of_dnas_file", __pyx_f[1], 355, 0, __PYX_ERR(1, 355, __pyx_L1_error));

  /* "world_cy.pyx":356
 * 
 * def write_list_of_dnas_file(l,filename):
 *     f=open(filename,'w')             # <<<<<<<<<<<<<<
 *     f.write(str(len(l))+"\n")
 *     f.write(str(l[0][0].get_wdim())+"\n")
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_filename);
  __Pyx_GIVEREF(__pyx_v_filename);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_filename);
  __Pyx_INCREF(__pyx_n_s_w);
  __Pyx_GIVEREF(__pyx_n_s_w);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_w);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_f = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "world_cy.pyx":357
 * def write_list_of_dnas_file(l,filename):
 *     f=open(filename,'w')
 *     f.write(str(len(l))+"\n")             # <<<<<<<<<<<<<<
 *     f.write(str(l[0][0].get_wdim())+"\n")
 *     group_sizes=l[0][0].get_group_sizes()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_v_l); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 357, __pyx_L1_error)
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_kp_s__15); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":358
 *     f=open(filename,'w')
 *     f.write(str(len(l))+"\n")
 *     f.write(str(l[0][0].get_wdim())+"\n")             # <<<<<<<<<<<<<<
 *     group_sizes=l[0][0].get_group_sizes()
 *     f.write(str(len(group_sizes))+"\n")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_l, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_get_wdim); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_kp_s__15); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":359
 *     f.write(str(len(l))+"\n")
 *     f.write(str(l[0][0].get_wdim())+"\n")
 *     group_sizes=l[0][0].get_group_sizes()             # <<<<<<<<<<<<<<
 *     f.write(str(len(group_sizes))+"\n")
 *     for a in group_sizes:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_l, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get_group_sizes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_group_sizes = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "world_cy.pyx":360
 *     f.write(str(l[0][0].get_wdim())+"\n")
 *     group_sizes=l[0][0].get_group_sizes()
 *     f.write(str(len(group_sizes))+"\n")             # <<<<<<<<<<<<<<
 *     for a in group_sizes:
 *         f.write(str(a)+"\n")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_v_group_sizes); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 360, __pyx_L1_error)
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_kp_s__15); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":361
 *     group_sizes=l[0][0].get_group_sizes()
 *     f.write(str(len(group_sizes))+"\n")
 *     for a in group_sizes:             # <<<<<<<<<<<<<<
 *         f.write(str(a)+"\n")
 *     j=0
 */
  if (likely(PyList_CheckExact(__pyx_v_group_sizes)) || PyTuple_CheckExact(__pyx_v_group_sizes)) {
    __pyx_t_2 = __pyx_v_group_sizes; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_group_sizes); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 361, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 361, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 361, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 361, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "world_cy.pyx":362
 *     f.write(str(len(group_sizes))+"\n")
 *     for a in group_sizes:
 *         f.write(str(a)+"\n")             # <<<<<<<<<<<<<<
 *     j=0
 *     for dnas in l:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_a); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_kp_s__15); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "world_cy.pyx":361
 *     group_sizes=l[0][0].get_group_sizes()
 *     f.write(str(len(group_sizes))+"\n")
 *     for a in group_sizes:             # <<<<<<<<<<<<<<
 *         f.write(str(a)+"\n")
 *     j=0
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":363
 *     for a in group_sizes:
 *         f.write(str(a)+"\n")
 *     j=0             # <<<<<<<<<<<<<<
 *     for dnas in l:
 *         j+=1
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_j = __pyx_int_0;

  /* "world_cy.pyx":364
 *         f.write(str(a)+"\n")
 *     j=0
 *     for dnas in l:             # <<<<<<<<<<<<<<
 *         j+=1
 *         f.write("#dnas"+str(j)+"\n")
 */
  if (likely(PyList_CheckExact(__pyx_v_l)) || PyTuple_CheckExact(__pyx_v_l)) {
    __pyx_t_2 = __pyx_v_l; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_l); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 364, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 364, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 364, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 364, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 364, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 364, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_dnas, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "world_cy.pyx":365
 *     j=0
 *     for dnas in l:
 *         j+=1             # <<<<<<<<<<<<<<
 *         f.write("#dnas"+str(j)+"\n")
 *         i=0
 */
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_j, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_j, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "world_cy.pyx":366
 *     for dnas in l:
 *         j+=1
 *         f.write("#dnas"+str(j)+"\n")             # <<<<<<<<<<<<<<
 *         i=0
 *         for dna in dnas:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_j); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_dnas, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_kp_s__15); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "world_cy.pyx":367
 *         j+=1
 *         f.write("#dnas"+str(j)+"\n")
 *         i=0             # <<<<<<<<<<<<<<
 *         for dna in dnas:
 *             i+=1
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_int_0);

    /* "world_cy.pyx":368
 *         f.write("#dnas"+str(j)+"\n")
 *         i=0
 *         for dna in dnas:             # <<<<<<<<<<<<<<
 *             i+=1
 *             f.write("#dna"+str(i)+"\n")
 */
    if (likely(PyList_CheckExact(__pyx_v_dnas)) || PyTuple_CheckExact(__pyx_v_dnas)) {
      __pyx_t_1 = __pyx_v_dnas; __Pyx_INCREF(__pyx_t_1); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_dnas); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 368, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 368, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 368, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 368, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 368, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 368, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_9(__pyx_t_1);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 368, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_dna, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "world_cy.pyx":369
 *         i=0
 *         for dna in dnas:
 *             i+=1             # <<<<<<<<<<<<<<
 *             f.write("#dna"+str(i)+"\n")
 *             ct,mst,utt,mat,wt=dna.get_traits()
 */
      __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 369, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "world_cy.pyx":370
 *         for dna in dnas:
 *             i+=1
 *             f.write("#dna"+str(i)+"\n")             # <<<<<<<<<<<<<<
 *             ct,mst,utt,mat,wt=dna.get_traits()
 *             f.write("<color>\n")
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 370, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 370, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = PyNumber_Add(__pyx_kp_s_dna, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 370, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Add(__pyx_t_10, __pyx_kp_s__15); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 370, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_10, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 370, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "world_cy.pyx":371
 *             i+=1
 *             f.write("#dna"+str(i)+"\n")
 *             ct,mst,utt,mat,wt=dna.get_traits()             # <<<<<<<<<<<<<<
 *             f.write("<color>\n")
 *             r,g,b=ct.get_c()
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_dna, __pyx_n_s_get_traits); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 5)) {
          if (size > 5) __Pyx_RaiseTooManyValuesError(5);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(1, 371, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 3); 
          __pyx_t_12 = PyTuple_GET_ITEM(sequence, 4); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 3); 
          __pyx_t_12 = PyList_GET_ITEM(sequence, 4); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_12);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[5] = {&__pyx_t_6,&__pyx_t_5,&__pyx_t_10,&__pyx_t_11,&__pyx_t_12};
          for (i=0; i < 5; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(1, 371, __pyx_L1_error)
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[5] = {&__pyx_t_6,&__pyx_t_5,&__pyx_t_10,&__pyx_t_11,&__pyx_t_12};
        __pyx_t_13 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 371, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_14 = Py_TYPE(__pyx_t_13)->tp_iternext;
        for (index=0; index < 5; index++) {
          PyObject* item = __pyx_t_14(__pyx_t_13); if (unlikely(!item)) goto __pyx_L9_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_13), 5) < 0) __PYX_ERR(1, 371, __pyx_L1_error)
        __pyx_t_14 = NULL;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        goto __pyx_L10_unpacking_done;
        __pyx_L9_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(1, 371, __pyx_L1_error)
        __pyx_L10_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_ct, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_v_mst, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_utt, __pyx_t_10);
      __pyx_t_10 = 0;
      __Pyx_XDECREF_SET(__pyx_v_mat, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_XDECREF_SET(__pyx_v_wt, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "world_cy.pyx":372
 *             f.write("#dna"+str(i)+"\n")
 *             ct,mst,utt,mat,wt=dna.get_traits()
 *             f.write("<color>\n")             # <<<<<<<<<<<<<<
 *             r,g,b=ct.get_c()
 *             f.write(str(r)+"\n")
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 372, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
        }
      }
      __pyx_t_4 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_11, __pyx_kp_s_color) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_kp_s_color);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 372, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "world_cy.pyx":373
 *             ct,mst,utt,mat,wt=dna.get_traits()
 *             f.write("<color>\n")
 *             r,g,b=ct.get_c()             # <<<<<<<<<<<<<<
 *             f.write(str(r)+"\n")
 *             f.write(str(g)+"\n")
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_ct, __pyx_n_s_get_c); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 373, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
        }
      }
      __pyx_t_4 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 373, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(1, 373, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_12 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 2); 
        } else {
          __pyx_t_12 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 2); 
        }
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        #else
        __pyx_t_12 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 373, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 373, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_10 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 373, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 373, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_14 = Py_TYPE(__pyx_t_5)->tp_iternext;
        index = 0; __pyx_t_12 = __pyx_t_14(__pyx_t_5); if (unlikely(!__pyx_t_12)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_12);
        index = 1; __pyx_t_11 = __pyx_t_14(__pyx_t_5); if (unlikely(!__pyx_t_11)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        index = 2; __pyx_t_10 = __pyx_t_14(__pyx_t_5); if (unlikely(!__pyx_t_10)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_10);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_5), 3) < 0) __PYX_ERR(1, 373, __pyx_L1_error)
        __pyx_t_14 = NULL;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L12_unpacking_done;
        __pyx_L11_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_14 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(1, 373, __pyx_L1_error)
        __pyx_L12_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_12);
      __pyx_t_12 = 0;
      __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "world_cy.pyx":374
 *             f.write("<color>\n")
 *             r,g,b=ct.get_c()
 *             f.write(str(r)+"\n")             # <<<<<<<<<<<<<<
 *             f.write(str(g)+"\n")
 *             f.write(str(b)+"\n")
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_r); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyNumber_Add(__pyx_t_11, __pyx_kp_s__15); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_12);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "world_cy.pyx":375
 *             r,g,b=ct.get_c()
 *             f.write(str(r)+"\n")
 *             f.write(str(g)+"\n")             # <<<<<<<<<<<<<<
 *             f.write(str(b)+"\n")
 *             f.write("<maxsize>\n")
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 375, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_g); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 375, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = PyNumber_Add(__pyx_t_12, __pyx_kp_s__15); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 375, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_12, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 375, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "world_cy.pyx":376
 *             f.write(str(r)+"\n")
 *             f.write(str(g)+"\n")
 *             f.write(str(b)+"\n")             # <<<<<<<<<<<<<<
 *             f.write("<maxsize>\n")
 *             a=mst.get_a()
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 376, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_b); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 376, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyNumber_Add(__pyx_t_11, __pyx_kp_s__15); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 376, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_12);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 376, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "world_cy.pyx":377
 *             f.write(str(g)+"\n")
 *             f.write(str(b)+"\n")
 *             f.write("<maxsize>\n")             # <<<<<<<<<<<<<<
 *             a=mst.get_a()
 *             f.write(str(a)+"\n")
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_12, __pyx_kp_s_maxsize) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_kp_s_maxsize);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "world_cy.pyx":378
 *             f.write(str(b)+"\n")
 *             f.write("<maxsize>\n")
 *             a=mst.get_a()             # <<<<<<<<<<<<<<
 *             f.write(str(a)+"\n")
 *             f.write("<uptake>\n")
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_mst, __pyx_n_s_get_a); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 378, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 378, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "world_cy.pyx":379
 *             f.write("<maxsize>\n")
 *             a=mst.get_a()
 *             f.write(str(a)+"\n")             # <<<<<<<<<<<<<<
 *             f.write("<uptake>\n")
 *             a=utt.get_a()
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_a); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = PyNumber_Add(__pyx_t_12, __pyx_kp_s__15); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_12, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "world_cy.pyx":380
 *             a=mst.get_a()
 *             f.write(str(a)+"\n")
 *             f.write("<uptake>\n")             # <<<<<<<<<<<<<<
 *             a=utt.get_a()
 *             f.write(str(a)+"\n")
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_kp_s_uptake) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_kp_s_uptake);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "world_cy.pyx":381
 *             f.write(str(a)+"\n")
 *             f.write("<uptake>\n")
 *             a=utt.get_a()             # <<<<<<<<<<<<<<
 *             f.write(str(a)+"\n")
 *             f.write("<maxage>\n")
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_utt, __pyx_n_s_get_a); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF_SET(__pyx_v_a, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "world_cy.pyx":382
 *             f.write("<uptake>\n")
 *             a=utt.get_a()
 *             f.write(str(a)+"\n")             # <<<<<<<<<<<<<<
 *             f.write("<maxage>\n")
 *             a=mat.get_a()
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_a); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyNumber_Add(__pyx_t_11, __pyx_kp_s__15); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_12);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "world_cy.pyx":383
 *             a=utt.get_a()
 *             f.write(str(a)+"\n")
 *             f.write("<maxage>\n")             # <<<<<<<<<<<<<<
 *             a=mat.get_a()
 *             f.write(str(a)+"\n")
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_12, __pyx_kp_s_maxage) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_kp_s_maxage);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "world_cy.pyx":384
 *             f.write(str(a)+"\n")
 *             f.write("<maxage>\n")
 *             a=mat.get_a()             # <<<<<<<<<<<<<<
 *             f.write(str(a)+"\n")
 *             f.write("<weights>\n")
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_mat, __pyx_n_s_get_a); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF_SET(__pyx_v_a, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "world_cy.pyx":385
 *             f.write("<maxage>\n")
 *             a=mat.get_a()
 *             f.write(str(a)+"\n")             # <<<<<<<<<<<<<<
 *             f.write("<weights>\n")
 *             for a in wt.yield_l():
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 385, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_a); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 385, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = PyNumber_Add(__pyx_t_12, __pyx_kp_s__15); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 385, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_12, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 385, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "world_cy.pyx":386
 *             a=mat.get_a()
 *             f.write(str(a)+"\n")
 *             f.write("<weights>\n")             # <<<<<<<<<<<<<<
 *             for a in wt.yield_l():
 *                 f.write(str(a)+"\n")
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 386, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_kp_s_weights) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_kp_s_weights);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 386, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "world_cy.pyx":387
 *             f.write(str(a)+"\n")
 *             f.write("<weights>\n")
 *             for a in wt.yield_l():             # <<<<<<<<<<<<<<
 *                 f.write(str(a)+"\n")
 *             f.write("#end_dna\n")
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_wt, __pyx_n_s_yield_l); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_4 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_10 = __pyx_t_4; __Pyx_INCREF(__pyx_t_10); __pyx_t_15 = 0;
        __pyx_t_16 = NULL;
      } else {
        __pyx_t_15 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 387, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_16 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 387, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_16)) {
          if (likely(PyList_CheckExact(__pyx_t_10))) {
            if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_15); __Pyx_INCREF(__pyx_t_4); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(1, 387, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_10, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 387, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_15); __Pyx_INCREF(__pyx_t_4); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(1, 387, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_10, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 387, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_16(__pyx_t_10);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 387, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_DECREF_SET(__pyx_v_a, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "world_cy.pyx":388
 *             f.write("<weights>\n")
 *             for a in wt.yield_l():
 *                 f.write(str(a)+"\n")             # <<<<<<<<<<<<<<
 *             f.write("#end_dna\n")
 *         f.write("#end_dnas\n")
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 388, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_a); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 388, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_5 = PyNumber_Add(__pyx_t_12, __pyx_kp_s__15); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 388, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        __pyx_t_4 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_12, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_5);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 388, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "world_cy.pyx":387
 *             f.write(str(a)+"\n")
 *             f.write("<weights>\n")
 *             for a in wt.yield_l():             # <<<<<<<<<<<<<<
 *                 f.write(str(a)+"\n")
 *             f.write("#end_dna\n")
 */
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "world_cy.pyx":389
 *             for a in wt.yield_l():
 *                 f.write(str(a)+"\n")
 *             f.write("#end_dna\n")             # <<<<<<<<<<<<<<
 *         f.write("#end_dnas\n")
 *     f.write("#end")
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 389, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_10 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_11, __pyx_kp_s_end_dna) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_end_dna);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 389, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "world_cy.pyx":368
 *         f.write("#dnas"+str(j)+"\n")
 *         i=0
 *         for dna in dnas:             # <<<<<<<<<<<<<<
 *             i+=1
 *             f.write("#dna"+str(i)+"\n")
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "world_cy.pyx":390
 *                 f.write(str(a)+"\n")
 *             f.write("#end_dna\n")
 *         f.write("#end_dnas\n")             # <<<<<<<<<<<<<<
 *     f.write("#end")
 *     f.close()
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_4, __pyx_kp_s_end_dnas) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_kp_s_end_dnas);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "world_cy.pyx":364
 *         f.write(str(a)+"\n")
 *     j=0
 *     for dnas in l:             # <<<<<<<<<<<<<<
 *         j+=1
 *         f.write("#dnas"+str(j)+"\n")
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":391
 *             f.write("#end_dna\n")
 *         f.write("#end_dnas\n")
 *     f.write("#end")             # <<<<<<<<<<<<<<
 *     f.close()
 * def read_list_of_dnas_file(filename):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_10, __pyx_kp_s_end) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_s_end);
  __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":392
 *         f.write("#end_dnas\n")
 *     f.write("#end")
 *     f.close()             # <<<<<<<<<<<<<<
 * def read_list_of_dnas_file(filename):
 *     f=open(filename,'r')
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_close); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":355
 *     return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)
 * 
 * def write_list_of_dnas_file(l,filename):             # <<<<<<<<<<<<<<
 *     f=open(filename,'w')
 *     f.write(str(len(l))+"\n")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("world_cy.write_list_of_dnas_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_group_sizes);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_dnas);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_dna);
  __Pyx_XDECREF(__pyx_v_ct);
  __Pyx_XDECREF(__pyx_v_mst);
  __Pyx_XDECREF(__pyx_v_utt);
  __Pyx_XDECREF(__pyx_v_mat);
  __Pyx_XDECREF(__pyx_v_wt);
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":393
 *     f.write("#end")
 *     f.close()
 * def read_list_of_dnas_file(filename):             # <<<<<<<<<<<<<<
 *     f=open(filename,'r')
 *     lines=f.readlines()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_17read_list_of_dnas_file(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static PyMethodDef __pyx_mdef_8world_cy_17read_list_of_dnas_file = {"read_list_of_dnas_file", (PyCFunction)__pyx_pw_8world_cy_17read_list_of_dnas_file, METH_O, 0};
static PyObject *__pyx_pw_8world_cy_17read_list_of_dnas_file(PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_list_of_dnas_file (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_16read_list_of_dnas_file(__pyx_self, ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_16read_list_of_dnas_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_lines = NULL;
  PyObject *__pyx_v_num = NULL;
  PyObject *__pyx_v_wdim = NULL;
  PyObject *__pyx_v_group_sizes_len = NULL;
  PyObject *__pyx_v_group_sizes = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_at = NULL;
  PyObject *__pyx_v_dnas_list = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_dnas = NULL;
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_v_b = NULL;
  struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_ct = NULL;
  double __pyx_v_a;
  struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_mst = NULL;
  struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_utt = NULL;
  struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_mat = NULL;
  PyObject *__pyx_v_l = NULL;
  struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_wt = NULL;
  struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_dna = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  double __pyx_t_11;
  int __pyx_t_12;
  __Pyx_TraceFrameInit(__pyx_codeobj__16)
  __Pyx_RefNannySetupContext("read_list_of_dnas_file", 0);
  __Pyx_TraceCall("read_list_of_dnas_file", __pyx_f[1], 393, 0, __PYX_ERR(1, 393, __pyx_L1_error));

  /* "world_cy.pyx":394
 *     f.close()
 * def read_list_of_dnas_file(filename):
 *     f=open(filename,'r')             # <<<<<<<<<<<<<<
 *     lines=f.readlines()
 *     f.close()
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_filename);
  __Pyx_GIVEREF(__pyx_v_filename);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_filename);
  __Pyx_INCREF(__pyx_n_s_r);
  __Pyx_GIVEREF(__pyx_n_s_r);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_r);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_f = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "world_cy.pyx":395
 * def read_list_of_dnas_file(filename):
 *     f=open(filename,'r')
 *     lines=f.readlines()             # <<<<<<<<<<<<<<
 *     f.close()
 *     num=int(lines[0])
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_readlines); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lines = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "world_cy.pyx":396
 *     f=open(filename,'r')
 *     lines=f.readlines()
 *     f.close()             # <<<<<<<<<<<<<<
 *     num=int(lines[0])
 *     wdim=int(lines[1])
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_close); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":397
 *     lines=f.readlines()
 *     f.close()
 *     num=int(lines[0])             # <<<<<<<<<<<<<<
 *     wdim=int(lines[1])
 *     group_sizes_len=int(lines[2])
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_lines, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_num = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "world_cy.pyx":398
 *     f.close()
 *     num=int(lines[0])
 *     wdim=int(lines[1])             # <<<<<<<<<<<<<<
 *     group_sizes_len=int(lines[2])
 *     group_sizes=np.empty(group_sizes_len,dtype=np.uintp)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_lines, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_wdim = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "world_cy.pyx":399
 *     num=int(lines[0])
 *     wdim=int(lines[1])
 *     group_sizes_len=int(lines[2])             # <<<<<<<<<<<<<<
 *     group_sizes=np.empty(group_sizes_len,dtype=np.uintp)
 *     for i in range(group_sizes_len):
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_lines, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_group_sizes_len = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "world_cy.pyx":400
 *     wdim=int(lines[1])
 *     group_sizes_len=int(lines[2])
 *     group_sizes=np.empty(group_sizes_len,dtype=np.uintp)             # <<<<<<<<<<<<<<
 *     for i in range(group_sizes_len):
 *         group_sizes[i]=int(lines[3+i])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_group_sizes_len);
  __Pyx_GIVEREF(__pyx_v_group_sizes_len);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_group_sizes_len);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_uintp); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 400, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_group_sizes = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "world_cy.pyx":401
 *     group_sizes_len=int(lines[2])
 *     group_sizes=np.empty(group_sizes_len,dtype=np.uintp)
 *     for i in range(group_sizes_len):             # <<<<<<<<<<<<<<
 *         group_sizes[i]=int(lines[3+i])
 *     at=3+group_sizes_len
 */
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_group_sizes_len); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 401, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 401, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 401, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 401, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 401, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_7(__pyx_t_3);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 401, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "world_cy.pyx":402
 *     group_sizes=np.empty(group_sizes_len,dtype=np.uintp)
 *     for i in range(group_sizes_len):
 *         group_sizes[i]=int(lines[3+i])             # <<<<<<<<<<<<<<
 *     at=3+group_sizes_len
 *     dnas_list=[]
 */
    __pyx_t_5 = __Pyx_PyInt_AddCObj(__pyx_int_3, __pyx_v_i, 3, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_group_sizes, __pyx_v_i, __pyx_t_5) < 0)) __PYX_ERR(1, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "world_cy.pyx":401
 *     group_sizes_len=int(lines[2])
 *     group_sizes=np.empty(group_sizes_len,dtype=np.uintp)
 *     for i in range(group_sizes_len):             # <<<<<<<<<<<<<<
 *         group_sizes[i]=int(lines[3+i])
 *     at=3+group_sizes_len
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "world_cy.pyx":403
 *     for i in range(group_sizes_len):
 *         group_sizes[i]=int(lines[3+i])
 *     at=3+group_sizes_len             # <<<<<<<<<<<<<<
 *     dnas_list=[]
 *     for _ in range(num):
 */
  __pyx_t_3 = __Pyx_PyInt_AddCObj(__pyx_int_3, __pyx_v_group_sizes_len, 3, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_at = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "world_cy.pyx":404
 *         group_sizes[i]=int(lines[3+i])
 *     at=3+group_sizes_len
 *     dnas_list=[]             # <<<<<<<<<<<<<<
 *     for _ in range(num):
 *         dnas=[]
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_dnas_list = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "world_cy.pyx":405
 *     at=3+group_sizes_len
 *     dnas_list=[]
 *     for _ in range(num):             # <<<<<<<<<<<<<<
 *         dnas=[]
 *         while True: #parsing one dna per loop
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_num); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 405, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 405, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 405, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 405, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 405, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_7(__pyx_t_5);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 405, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "world_cy.pyx":406
 *     dnas_list=[]
 *     for _ in range(num):
 *         dnas=[]             # <<<<<<<<<<<<<<
 *         while True: #parsing one dna per loop
 *             while len(lines[at])<4 or lines[at][:4]!="#dna":
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_dnas, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "world_cy.pyx":407
 *     for _ in range(num):
 *         dnas=[]
 *         while True: #parsing one dna per loop             # <<<<<<<<<<<<<<
 *             while len(lines[at])<4 or lines[at][:4]!="#dna":
 *                 at+=1
 */
    while (1) {

      /* "world_cy.pyx":408
 *         dnas=[]
 *         while True: #parsing one dna per loop
 *             while len(lines[at])<4 or lines[at][:4]!="#dna":             # <<<<<<<<<<<<<<
 *                 at+=1
 *             while len(lines[at])<1 or lines[at][0]!="<":
 */
      while (1) {
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 408, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_9 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(1, 408, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_10 = ((__pyx_t_9 < 4) != 0);
        if (!__pyx_t_10) {
        } else {
          __pyx_t_8 = __pyx_t_10;
          goto __pyx_L11_bool_binop_done;
        }
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 408, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_3, 0, 4, NULL, NULL, &__pyx_slice__17, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 408, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s_dna, Py_NE)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 408, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = __pyx_t_10;
        __pyx_L11_bool_binop_done:;
        if (!__pyx_t_8) break;

        /* "world_cy.pyx":409
 *         while True: #parsing one dna per loop
 *             while len(lines[at])<4 or lines[at][:4]!="#dna":
 *                 at+=1             # <<<<<<<<<<<<<<
 *             while len(lines[at])<1 or lines[at][0]!="<":
 *                 at+=1
 */
        __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_at, __pyx_t_1);
        __pyx_t_1 = 0;
      }

      /* "world_cy.pyx":410
 *             while len(lines[at])<4 or lines[at][:4]!="#dna":
 *                 at+=1
 *             while len(lines[at])<1 or lines[at][0]!="<":             # <<<<<<<<<<<<<<
 *                 at+=1
 *             assert lines[at]=="<color>\n"
 */
      while (1) {
        __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 410, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(1, 410, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = ((__pyx_t_9 < 1) != 0);
        if (!__pyx_t_10) {
        } else {
          __pyx_t_8 = __pyx_t_10;
          goto __pyx_L15_bool_binop_done;
        }
        __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 410, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 410, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s__18, Py_NE)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 410, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_8 = __pyx_t_10;
        __pyx_L15_bool_binop_done:;
        if (!__pyx_t_8) break;

        /* "world_cy.pyx":411
 *                 at+=1
 *             while len(lines[at])<1 or lines[at][0]!="<":
 *                 at+=1             # <<<<<<<<<<<<<<
 *             assert lines[at]=="<color>\n"
 *             r=int(lines[at+1])
 */
        __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 411, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF_SET(__pyx_v_at, __pyx_t_3);
        __pyx_t_3 = 0;
      }

      /* "world_cy.pyx":412
 *             while len(lines[at])<1 or lines[at][0]!="<":
 *                 at+=1
 *             assert lines[at]=="<color>\n"             # <<<<<<<<<<<<<<
 *             r=int(lines[at+1])
 *             g=int(lines[at+2])
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 412, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s_color, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 412, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_8)) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(1, 412, __pyx_L1_error)
        }
      }
      #endif

      /* "world_cy.pyx":413
 *                 at+=1
 *             assert lines[at]=="<color>\n"
 *             r=int(lines[at+1])             # <<<<<<<<<<<<<<
 *             g=int(lines[at+2])
 *             b=int(lines[at+3])
 */
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 413, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 413, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 413, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "world_cy.pyx":414
 *             assert lines[at]=="<color>\n"
 *             r=int(lines[at+1])
 *             g=int(lines[at+2])             # <<<<<<<<<<<<<<
 *             b=int(lines[at+3])
 *             ct=ColorTrait(r,g,b)
 */
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 414, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 414, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 414, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "world_cy.pyx":415
 *             r=int(lines[at+1])
 *             g=int(lines[at+2])
 *             b=int(lines[at+3])             # <<<<<<<<<<<<<<
 *             ct=ColorTrait(r,g,b)
 *             at+=3
 */
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_3, 3, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 415, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 415, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 415, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "world_cy.pyx":416
 *             g=int(lines[at+2])
 *             b=int(lines[at+3])
 *             ct=ColorTrait(r,g,b)             # <<<<<<<<<<<<<<
 *             at+=3
 *             while len(lines[at])<1 or lines[at][0]!="<":
 */
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 416, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_r);
      __Pyx_GIVEREF(__pyx_v_r);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_r);
      __Pyx_INCREF(__pyx_v_g);
      __Pyx_GIVEREF(__pyx_v_g);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_g);
      __Pyx_INCREF(__pyx_v_b);
      __Pyx_GIVEREF(__pyx_v_b);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_b);
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8world_cy_ColorTrait), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 416, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ct, ((struct __pyx_obj_8world_cy_ColorTrait *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "world_cy.pyx":417
 *             b=int(lines[at+3])
 *             ct=ColorTrait(r,g,b)
 *             at+=3             # <<<<<<<<<<<<<<
 *             while len(lines[at])<1 or lines[at][0]!="<":
 *                 at+=1
 */
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_3, 3, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 417, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_at, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "world_cy.pyx":418
 *             ct=ColorTrait(r,g,b)
 *             at+=3
 *             while len(lines[at])<1 or lines[at][0]!="<":             # <<<<<<<<<<<<<<
 *                 at+=1
 *             assert lines[at]=="<maxsize>\n"
 */
      while (1) {
        __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 418, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(1, 418, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = ((__pyx_t_9 < 1) != 0);
        if (!__pyx_t_10) {
        } else {
          __pyx_t_8 = __pyx_t_10;
          goto __pyx_L19_bool_binop_done;
        }
        __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 418, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 418, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s__18, Py_NE)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 418, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_8 = __pyx_t_10;
        __pyx_L19_bool_binop_done:;
        if (!__pyx_t_8) break;

        /* "world_cy.pyx":419
 *             at+=3
 *             while len(lines[at])<1 or lines[at][0]!="<":
 *                 at+=1             # <<<<<<<<<<<<<<
 *             assert lines[at]=="<maxsize>\n"
 *             a=float(lines[at+1])
 */
        __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 419, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF_SET(__pyx_v_at, __pyx_t_3);
        __pyx_t_3 = 0;
      }

      /* "world_cy.pyx":420
 *             while len(lines[at])<1 or lines[at][0]!="<":
 *                 at+=1
 *             assert lines[at]=="<maxsize>\n"             # <<<<<<<<<<<<<<
 *             a=float(lines[at+1])
 *             mst=PositiveTrait(a)
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 420, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s_maxsize, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 420, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_8)) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(1, 420, __pyx_L1_error)
        }
      }
      #endif

      /* "world_cy.pyx":421
 *                 at+=1
 *             assert lines[at]=="<maxsize>\n"
 *             a=float(lines[at+1])             # <<<<<<<<<<<<<<
 *             mst=PositiveTrait(a)
 *             at+=1
 */
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_11 = __Pyx_PyObject_AsDouble(__pyx_t_1); if (unlikely(__pyx_t_11 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(1, 421, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_a = __pyx_t_11;

      /* "world_cy.pyx":422
 *             assert lines[at]=="<maxsize>\n"
 *             a=float(lines[at+1])
 *             mst=PositiveTrait(a)             # <<<<<<<<<<<<<<
 *             at+=1
 *             while len(lines[at])<1 or lines[at][0]!="<":
 */
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 422, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8world_cy_PositiveTrait), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 422, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_mst, ((struct __pyx_obj_8world_cy_PositiveTrait *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "world_cy.pyx":423
 *             a=float(lines[at+1])
 *             mst=PositiveTrait(a)
 *             at+=1             # <<<<<<<<<<<<<<
 *             while len(lines[at])<1 or lines[at][0]!="<":
 *                 at+=1
 */
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 423, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_at, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "world_cy.pyx":424
 *             mst=PositiveTrait(a)
 *             at+=1
 *             while len(lines[at])<1 or lines[at][0]!="<":             # <<<<<<<<<<<<<<
 *                 at+=1
 *             assert lines[at]=="<uptake>\n"
 */
      while (1) {
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 424, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_9 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(1, 424, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_10 = ((__pyx_t_9 < 1) != 0);
        if (!__pyx_t_10) {
        } else {
          __pyx_t_8 = __pyx_t_10;
          goto __pyx_L23_bool_binop_done;
        }
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 424, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 424, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__18, Py_NE)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 424, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = __pyx_t_10;
        __pyx_L23_bool_binop_done:;
        if (!__pyx_t_8) break;

        /* "world_cy.pyx":425
 *             at+=1
 *             while len(lines[at])<1 or lines[at][0]!="<":
 *                 at+=1             # <<<<<<<<<<<<<<
 *             assert lines[at]=="<uptake>\n"
 *             a=float(lines[at+1])
 */
        __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 425, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_at, __pyx_t_1);
        __pyx_t_1 = 0;
      }

      /* "world_cy.pyx":426
 *             while len(lines[at])<1 or lines[at][0]!="<":
 *                 at+=1
 *             assert lines[at]=="<uptake>\n"             # <<<<<<<<<<<<<<
 *             a=float(lines[at+1])
 *             utt=UnitTrait(a)
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 426, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s_uptake, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 426, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_8)) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(1, 426, __pyx_L1_error)
        }
      }
      #endif

      /* "world_cy.pyx":427
 *                 at+=1
 *             assert lines[at]=="<uptake>\n"
 *             a=float(lines[at+1])             # <<<<<<<<<<<<<<
 *             utt=UnitTrait(a)
 *             at+=1
 */
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_11 = __Pyx_PyObject_AsDouble(__pyx_t_3); if (unlikely(__pyx_t_11 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_a = __pyx_t_11;

      /* "world_cy.pyx":428
 *             assert lines[at]=="<uptake>\n"
 *             a=float(lines[at+1])
 *             utt=UnitTrait(a)             # <<<<<<<<<<<<<<
 *             at+=1
 *             while len(lines[at])<1 or lines[at][0]!="<":
 */
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_a); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 428, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8world_cy_UnitTrait), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 428, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_utt, ((struct __pyx_obj_8world_cy_UnitTrait *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "world_cy.pyx":429
 *             a=float(lines[at+1])
 *             utt=UnitTrait(a)
 *             at+=1             # <<<<<<<<<<<<<<
 *             while len(lines[at])<1 or lines[at][0]!="<":
 *                 at+=1
 */
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_at, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "world_cy.pyx":430
 *             utt=UnitTrait(a)
 *             at+=1
 *             while len(lines[at])<1 or lines[at][0]!="<":             # <<<<<<<<<<<<<<
 *                 at+=1
 *             assert lines[at]=="<maxage>\n"
 */
      while (1) {
        __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 430, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(1, 430, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = ((__pyx_t_9 < 1) != 0);
        if (!__pyx_t_10) {
        } else {
          __pyx_t_8 = __pyx_t_10;
          goto __pyx_L27_bool_binop_done;
        }
        __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 430, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 430, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s__18, Py_NE)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 430, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_8 = __pyx_t_10;
        __pyx_L27_bool_binop_done:;
        if (!__pyx_t_8) break;

        /* "world_cy.pyx":431
 *             at+=1
 *             while len(lines[at])<1 or lines[at][0]!="<":
 *                 at+=1             # <<<<<<<<<<<<<<
 *             assert lines[at]=="<maxage>\n"
 *             a=float(lines[at+1])
 */
        __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 431, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF_SET(__pyx_v_at, __pyx_t_3);
        __pyx_t_3 = 0;
      }

      /* "world_cy.pyx":432
 *             while len(lines[at])<1 or lines[at][0]!="<":
 *                 at+=1
 *             assert lines[at]=="<maxage>\n"             # <<<<<<<<<<<<<<
 *             a=float(lines[at+1])
 *             mat=PositiveTrait(a)
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 432, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s_maxage, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 432, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_8)) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(1, 432, __pyx_L1_error)
        }
      }
      #endif

      /* "world_cy.pyx":433
 *                 at+=1
 *             assert lines[at]=="<maxage>\n"
 *             a=float(lines[at+1])             # <<<<<<<<<<<<<<
 *             mat=PositiveTrait(a)
 *             at+=1
 */
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 433, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 433, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_11 = __Pyx_PyObject_AsDouble(__pyx_t_1); if (unlikely(__pyx_t_11 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(1, 433, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_a = __pyx_t_11;

      /* "world_cy.pyx":434
 *             assert lines[at]=="<maxage>\n"
 *             a=float(lines[at+1])
 *             mat=PositiveTrait(a)             # <<<<<<<<<<<<<<
 *             at+=1
 *             while len(lines[at])<1 or lines[at][0]!="<":
 */
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8world_cy_PositiveTrait), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_mat, ((struct __pyx_obj_8world_cy_PositiveTrait *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "world_cy.pyx":435
 *             a=float(lines[at+1])
 *             mat=PositiveTrait(a)
 *             at+=1             # <<<<<<<<<<<<<<
 *             while len(lines[at])<1 or lines[at][0]!="<":
 *                 at+=1
 */
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_at, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "world_cy.pyx":436
 *             mat=PositiveTrait(a)
 *             at+=1
 *             while len(lines[at])<1 or lines[at][0]!="<":             # <<<<<<<<<<<<<<
 *                 at+=1
 *             assert lines[at]=="<weights>\n"
 */
      while (1) {
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 436, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_9 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(1, 436, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_10 = ((__pyx_t_9 < 1) != 0);
        if (!__pyx_t_10) {
        } else {
          __pyx_t_8 = __pyx_t_10;
          goto __pyx_L31_bool_binop_done;
        }
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 436, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 436, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__18, Py_NE)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 436, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = __pyx_t_10;
        __pyx_L31_bool_binop_done:;
        if (!__pyx_t_8) break;

        /* "world_cy.pyx":437
 *             at+=1
 *             while len(lines[at])<1 or lines[at][0]!="<":
 *                 at+=1             # <<<<<<<<<<<<<<
 *             assert lines[at]=="<weights>\n"
 *             at+=1
 */
        __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 437, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_at, __pyx_t_1);
        __pyx_t_1 = 0;
      }

      /* "world_cy.pyx":438
 *             while len(lines[at])<1 or lines[at][0]!="<":
 *                 at+=1
 *             assert lines[at]=="<weights>\n"             # <<<<<<<<<<<<<<
 *             at+=1
 *             l=cvarray(shape=(wdim,), itemsize=sizeof(double), format="d")
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 438, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s_weights, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 438, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_8)) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(1, 438, __pyx_L1_error)
        }
      }
      #endif

      /* "world_cy.pyx":439
 *                 at+=1
 *             assert lines[at]=="<weights>\n"
 *             at+=1             # <<<<<<<<<<<<<<
 *             l=cvarray(shape=(wdim,), itemsize=sizeof(double), format="d")
 *             i=0
 */
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 439, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_at, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "world_cy.pyx":440
 *             assert lines[at]=="<weights>\n"
 *             at+=1
 *             l=cvarray(shape=(wdim,), itemsize=sizeof(double), format="d")             # <<<<<<<<<<<<<<
 *             i=0
 *             while lines[at]!="#end_dna\n":
 */
      __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_wdim);
      __Pyx_GIVEREF(__pyx_v_wdim);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_wdim);
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_3) < 0) __PYX_ERR(1, 440, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_3) < 0) __PYX_ERR(1, 440, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_d) < 0) __PYX_ERR(1, 440, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_l, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "world_cy.pyx":441
 *             at+=1
 *             l=cvarray(shape=(wdim,), itemsize=sizeof(double), format="d")
 *             i=0             # <<<<<<<<<<<<<<
 *             while lines[at]!="#end_dna\n":
 *                 l[i]=float(lines[at])
 */
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_int_0);

      /* "world_cy.pyx":442
 *             l=cvarray(shape=(wdim,), itemsize=sizeof(double), format="d")
 *             i=0
 *             while lines[at]!="#end_dna\n":             # <<<<<<<<<<<<<<
 *                 l[i]=float(lines[at])
 *                 at+=1
 */
      while (1) {
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 442, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s_end_dna, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 442, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!__pyx_t_8) break;

        /* "world_cy.pyx":443
 *             i=0
 *             while lines[at]!="#end_dna\n":
 *                 l[i]=float(lines[at])             # <<<<<<<<<<<<<<
 *                 at+=1
 *                 i+=1
 */
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 443, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 443, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(PyObject_SetItem(__pyx_v_l, __pyx_v_i, __pyx_t_1) < 0)) __PYX_ERR(1, 443, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "world_cy.pyx":444
 *             while lines[at]!="#end_dna\n":
 *                 l[i]=float(lines[at])
 *                 at+=1             # <<<<<<<<<<<<<<
 *                 i+=1
 *             at+=1
 */
        __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 444, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_at, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "world_cy.pyx":445
 *                 l[i]=float(lines[at])
 *                 at+=1
 *                 i+=1             # <<<<<<<<<<<<<<
 *             at+=1
 *             wt=FloatListTrait(l,group_sizes)
 */
        __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 445, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_i, __pyx_t_1);
        __pyx_t_1 = 0;
      }

      /* "world_cy.pyx":446
 *                 at+=1
 *                 i+=1
 *             at+=1             # <<<<<<<<<<<<<<
 *             wt=FloatListTrait(l,group_sizes)
 *             dna=LinearDNA(ct,mst,utt,mat,wt)
 */
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_at, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 446, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_at, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "world_cy.pyx":447
 *                 i+=1
 *             at+=1
 *             wt=FloatListTrait(l,group_sizes)             # <<<<<<<<<<<<<<
 *             dna=LinearDNA(ct,mst,utt,mat,wt)
 *             dnas.append(dna)
 */
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_l);
      __Pyx_GIVEREF(__pyx_v_l);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_l);
      __Pyx_INCREF(__pyx_v_group_sizes);
      __Pyx_GIVEREF(__pyx_v_group_sizes);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_group_sizes);
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8world_cy_FloatListTrait), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_wt, ((struct __pyx_obj_8world_cy_FloatListTrait *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "world_cy.pyx":448
 *             at+=1
 *             wt=FloatListTrait(l,group_sizes)
 *             dna=LinearDNA(ct,mst,utt,mat,wt)             # <<<<<<<<<<<<<<
 *             dnas.append(dna)
 *             if lines[at]=="#end_dnas\n":
 */
      __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 448, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(((PyObject *)__pyx_v_ct));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_ct));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_ct));
      __Pyx_INCREF(((PyObject *)__pyx_v_mst));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_mst));
      PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_mst));
      __Pyx_INCREF(((PyObject *)__pyx_v_utt));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_utt));
      PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_utt));
      __Pyx_INCREF(((PyObject *)__pyx_v_mat));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_mat));
      PyTuple_SET_ITEM(__pyx_t_3, 3, ((PyObject *)__pyx_v_mat));
      __Pyx_INCREF(((PyObject *)__pyx_v_wt));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_wt));
      PyTuple_SET_ITEM(__pyx_t_3, 4, ((PyObject *)__pyx_v_wt));
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8world_cy_LinearDNA), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 448, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_dna, ((struct __pyx_obj_8world_cy_LinearDNA *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "world_cy.pyx":449
 *             wt=FloatListTrait(l,group_sizes)
 *             dna=LinearDNA(ct,mst,utt,mat,wt)
 *             dnas.append(dna)             # <<<<<<<<<<<<<<
 *             if lines[at]=="#end_dnas\n":
 *                 break
 */
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_dnas, ((PyObject *)__pyx_v_dna)); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(1, 449, __pyx_L1_error)

      /* "world_cy.pyx":450
 *             dna=LinearDNA(ct,mst,utt,mat,wt)
 *             dnas.append(dna)
 *             if lines[at]=="#end_dnas\n":             # <<<<<<<<<<<<<<
 *                 break
 *         dnas_list.append(dnas)
 */
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_lines, __pyx_v_at); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 450, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s_end_dnas, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(1, 450, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_8) {

        /* "world_cy.pyx":451
 *             dnas.append(dna)
 *             if lines[at]=="#end_dnas\n":
 *                 break             # <<<<<<<<<<<<<<
 *         dnas_list.append(dnas)
 *     return dnas_list
 */
        goto __pyx_L8_break;

        /* "world_cy.pyx":450
 *             dna=LinearDNA(ct,mst,utt,mat,wt)
 *             dnas.append(dna)
 *             if lines[at]=="#end_dnas\n":             # <<<<<<<<<<<<<<
 *                 break
 *         dnas_list.append(dnas)
 */
      }
    }
    __pyx_L8_break:;

    /* "world_cy.pyx":452
 *             if lines[at]=="#end_dnas\n":
 *                 break
 *         dnas_list.append(dnas)             # <<<<<<<<<<<<<<
 *     return dnas_list
 * 
 */
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_dnas_list, __pyx_v_dnas); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(1, 452, __pyx_L1_error)

    /* "world_cy.pyx":405
 *     at=3+group_sizes_len
 *     dnas_list=[]
 *     for _ in range(num):             # <<<<<<<<<<<<<<
 *         dnas=[]
 *         while True: #parsing one dna per loop
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "world_cy.pyx":453
 *                 break
 *         dnas_list.append(dnas)
 *     return dnas_list             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_dnas_list);
  __pyx_r = __pyx_v_dnas_list;
  goto __pyx_L0;

  /* "world_cy.pyx":393
 *     f.write("#end")
 *     f.close()
 * def read_list_of_dnas_file(filename):             # <<<<<<<<<<<<<<
 *     f=open(filename,'r')
 *     lines=f.readlines()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("world_cy.read_list_of_dnas_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_lines);
  __Pyx_XDECREF(__pyx_v_num);
  __Pyx_XDECREF(__pyx_v_wdim);
  __Pyx_XDECREF(__pyx_v_group_sizes_len);
  __Pyx_XDECREF(__pyx_v_group_sizes);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_at);
  __Pyx_XDECREF(__pyx_v_dnas_list);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_dnas);
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF((PyObject *)__pyx_v_ct);
  __Pyx_XDECREF((PyObject *)__pyx_v_mst);
  __Pyx_XDECREF((PyObject *)__pyx_v_utt);
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XDECREF((PyObject *)__pyx_v_wt);
  __Pyx_XDECREF((PyObject *)__pyx_v_dna);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":463
 * 
 * cdef class LinearDNA():
 *     def __cinit__(self,ColorTrait colorTrait,PositiveTrait maxsizeTrait,UnitTrait uptakeTrait,PositiveTrait maxageTrait,FloatListTrait weightsTrait):             # <<<<<<<<<<<<<<
 *         self.colorTrait=colorTrait
 *         self.maxsizeTrait=maxsizeTrait
 */

/* Python wrapper */
static int __pyx_pw_8world_cy_9LinearDNA_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8world_cy_9LinearDNA_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_colorTrait = 0;
  struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_maxsizeTrait = 0;
  struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_uptakeTrait = 0;
  struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_maxageTrait = 0;
  struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_weightsTrait = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_colorTrait,&__pyx_n_s_maxsizeTrait,&__pyx_n_s_uptakeTrait,&__pyx_n_s_maxageTrait,&__pyx_n_s_weightsTrait,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_colorTrait)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxsizeTrait)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, 1); __PYX_ERR(1, 463, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uptakeTrait)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, 2); __PYX_ERR(1, 463, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxageTrait)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, 3); __PYX_ERR(1, 463, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weightsTrait)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, 4); __PYX_ERR(1, 463, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 463, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_colorTrait = ((struct __pyx_obj_8world_cy_ColorTrait *)values[0]);
    __pyx_v_maxsizeTrait = ((struct __pyx_obj_8world_cy_PositiveTrait *)values[1]);
    __pyx_v_uptakeTrait = ((struct __pyx_obj_8world_cy_UnitTrait *)values[2]);
    __pyx_v_maxageTrait = ((struct __pyx_obj_8world_cy_PositiveTrait *)values[3]);
    __pyx_v_weightsTrait = ((struct __pyx_obj_8world_cy_FloatListTrait *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 463, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.LinearDNA.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_colorTrait), __pyx_ptype_8world_cy_ColorTrait, 1, "colorTrait", 0))) __PYX_ERR(1, 463, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_maxsizeTrait), __pyx_ptype_8world_cy_PositiveTrait, 1, "maxsizeTrait", 0))) __PYX_ERR(1, 463, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uptakeTrait), __pyx_ptype_8world_cy_UnitTrait, 1, "uptakeTrait", 0))) __PYX_ERR(1, 463, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_maxageTrait), __pyx_ptype_8world_cy_PositiveTrait, 1, "maxageTrait", 0))) __PYX_ERR(1, 463, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weightsTrait), __pyx_ptype_8world_cy_FloatListTrait, 1, "weightsTrait", 0))) __PYX_ERR(1, 463, __pyx_L1_error)
  __pyx_r = __pyx_pf_8world_cy_9LinearDNA___cinit__(((struct __pyx_obj_8world_cy_LinearDNA *)__pyx_v_self), __pyx_v_colorTrait, __pyx_v_maxsizeTrait, __pyx_v_uptakeTrait, __pyx_v_maxageTrait, __pyx_v_weightsTrait);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8world_cy_9LinearDNA___cinit__(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self, struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_colorTrait, struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_maxsizeTrait, struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_uptakeTrait, struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_maxageTrait, struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_weightsTrait) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[1], 463, 0, __PYX_ERR(1, 463, __pyx_L1_error));

  /* "world_cy.pyx":464
 * cdef class LinearDNA():
 *     def __cinit__(self,ColorTrait colorTrait,PositiveTrait maxsizeTrait,UnitTrait uptakeTrait,PositiveTrait maxageTrait,FloatListTrait weightsTrait):
 *         self.colorTrait=colorTrait             # <<<<<<<<<<<<<<
 *         self.maxsizeTrait=maxsizeTrait
 *         self.uptakeTrait=uptakeTrait
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_colorTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_colorTrait));
  __Pyx_GOTREF(__pyx_v_self->colorTrait);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->colorTrait));
  __pyx_v_self->colorTrait = __pyx_v_colorTrait;

  /* "world_cy.pyx":465
 *     def __cinit__(self,ColorTrait colorTrait,PositiveTrait maxsizeTrait,UnitTrait uptakeTrait,PositiveTrait maxageTrait,FloatListTrait weightsTrait):
 *         self.colorTrait=colorTrait
 *         self.maxsizeTrait=maxsizeTrait             # <<<<<<<<<<<<<<
 *         self.uptakeTrait=uptakeTrait
 *         self.maxageTrait=maxageTrait
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_maxsizeTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_maxsizeTrait));
  __Pyx_GOTREF(__pyx_v_self->maxsizeTrait);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->maxsizeTrait));
  __pyx_v_self->maxsizeTrait = __pyx_v_maxsizeTrait;

  /* "world_cy.pyx":466
 *         self.colorTrait=colorTrait
 *         self.maxsizeTrait=maxsizeTrait
 *         self.uptakeTrait=uptakeTrait             # <<<<<<<<<<<<<<
 *         self.maxageTrait=maxageTrait
 *         self.weightsTrait=weightsTrait
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_uptakeTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_uptakeTrait));
  __Pyx_GOTREF(__pyx_v_self->uptakeTrait);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->uptakeTrait));
  __pyx_v_self->uptakeTrait = __pyx_v_uptakeTrait;

  /* "world_cy.pyx":467
 *         self.maxsizeTrait=maxsizeTrait
 *         self.uptakeTrait=uptakeTrait
 *         self.maxageTrait=maxageTrait             # <<<<<<<<<<<<<<
 *         self.weightsTrait=weightsTrait
 *     def get_wdim(self):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_maxageTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_maxageTrait));
  __Pyx_GOTREF(__pyx_v_self->maxageTrait);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->maxageTrait));
  __pyx_v_self->maxageTrait = __pyx_v_maxageTrait;

  /* "world_cy.pyx":468
 *         self.uptakeTrait=uptakeTrait
 *         self.maxageTrait=maxageTrait
 *         self.weightsTrait=weightsTrait             # <<<<<<<<<<<<<<
 *     def get_wdim(self):
 *         return self.weightsTrait.l.shape[0]
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_weightsTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_weightsTrait));
  __Pyx_GOTREF(__pyx_v_self->weightsTrait);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->weightsTrait));
  __pyx_v_self->weightsTrait = __pyx_v_weightsTrait;

  /* "world_cy.pyx":463
 * 
 * cdef class LinearDNA():
 *     def __cinit__(self,ColorTrait colorTrait,PositiveTrait maxsizeTrait,UnitTrait uptakeTrait,PositiveTrait maxageTrait,FloatListTrait weightsTrait):             # <<<<<<<<<<<<<<
 *         self.colorTrait=colorTrait
 *         self.maxsizeTrait=maxsizeTrait
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.LinearDNA.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":469
 *         self.maxageTrait=maxageTrait
 *         self.weightsTrait=weightsTrait
 *     def get_wdim(self):             # <<<<<<<<<<<<<<
 *         return self.weightsTrait.l.shape[0]
 *     def get_group_sizes(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9LinearDNA_3get_wdim(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_9LinearDNA_3get_wdim(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_wdim (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9LinearDNA_2get_wdim(((struct __pyx_obj_8world_cy_LinearDNA *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9LinearDNA_2get_wdim(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_wdim", 0);
  __Pyx_TraceCall("get_wdim", __pyx_f[1], 469, 0, __PYX_ERR(1, 469, __pyx_L1_error));

  /* "world_cy.pyx":470
 *         self.weightsTrait=weightsTrait
 *     def get_wdim(self):
 *         return self.weightsTrait.l.shape[0]             # <<<<<<<<<<<<<<
 *     def get_group_sizes(self):
 *         return self.weightsTrait.get_group_sizes()
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->weightsTrait->l.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 470, __pyx_L1_error)}
  __pyx_t_1 = PyInt_FromSsize_t((__pyx_v_self->weightsTrait->l.shape[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":469
 *         self.maxageTrait=maxageTrait
 *         self.weightsTrait=weightsTrait
 *     def get_wdim(self):             # <<<<<<<<<<<<<<
 *         return self.weightsTrait.l.shape[0]
 *     def get_group_sizes(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.LinearDNA.get_wdim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":471
 *     def get_wdim(self):
 *         return self.weightsTrait.l.shape[0]
 *     def get_group_sizes(self):             # <<<<<<<<<<<<<<
 *         return self.weightsTrait.get_group_sizes()
 *     def get_traits(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9LinearDNA_5get_group_sizes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_9LinearDNA_5get_group_sizes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_group_sizes (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9LinearDNA_4get_group_sizes(((struct __pyx_obj_8world_cy_LinearDNA *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9LinearDNA_4get_group_sizes(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_group_sizes", 0);
  __Pyx_TraceCall("get_group_sizes", __pyx_f[1], 471, 0, __PYX_ERR(1, 471, __pyx_L1_error));

  /* "world_cy.pyx":472
 *         return self.weightsTrait.l.shape[0]
 *     def get_group_sizes(self):
 *         return self.weightsTrait.get_group_sizes()             # <<<<<<<<<<<<<<
 *     def get_traits(self):
 *         return (self.colorTrait,self.maxsizeTrait,self.uptakeTrait,self.maxageTrait,self.weightsTrait)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->weightsTrait), __pyx_n_s_get_group_sizes); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":471
 *     def get_wdim(self):
 *         return self.weightsTrait.l.shape[0]
 *     def get_group_sizes(self):             # <<<<<<<<<<<<<<
 *         return self.weightsTrait.get_group_sizes()
 *     def get_traits(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("world_cy.LinearDNA.get_group_sizes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":473
 *     def get_group_sizes(self):
 *         return self.weightsTrait.get_group_sizes()
 *     def get_traits(self):             # <<<<<<<<<<<<<<
 *         return (self.colorTrait,self.maxsizeTrait,self.uptakeTrait,self.maxageTrait,self.weightsTrait)
 *     def get_colorTrait(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9LinearDNA_7get_traits(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_9LinearDNA_7get_traits(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_traits (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9LinearDNA_6get_traits(((struct __pyx_obj_8world_cy_LinearDNA *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9LinearDNA_6get_traits(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_traits", 0);
  __Pyx_TraceCall("get_traits", __pyx_f[1], 473, 0, __PYX_ERR(1, 473, __pyx_L1_error));

  /* "world_cy.pyx":474
 *         return self.weightsTrait.get_group_sizes()
 *     def get_traits(self):
 *         return (self.colorTrait,self.maxsizeTrait,self.uptakeTrait,self.maxageTrait,self.weightsTrait)             # <<<<<<<<<<<<<<
 *     def get_colorTrait(self):
 *         return self.colorTrait
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->colorTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->colorTrait));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->colorTrait));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->maxsizeTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->maxsizeTrait));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->maxsizeTrait));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->uptakeTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->uptakeTrait));
  PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_self->uptakeTrait));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->maxageTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->maxageTrait));
  PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_v_self->maxageTrait));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->weightsTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->weightsTrait));
  PyTuple_SET_ITEM(__pyx_t_1, 4, ((PyObject *)__pyx_v_self->weightsTrait));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":473
 *     def get_group_sizes(self):
 *         return self.weightsTrait.get_group_sizes()
 *     def get_traits(self):             # <<<<<<<<<<<<<<
 *         return (self.colorTrait,self.maxsizeTrait,self.uptakeTrait,self.maxageTrait,self.weightsTrait)
 *     def get_colorTrait(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.LinearDNA.get_traits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":475
 *     def get_traits(self):
 *         return (self.colorTrait,self.maxsizeTrait,self.uptakeTrait,self.maxageTrait,self.weightsTrait)
 *     def get_colorTrait(self):             # <<<<<<<<<<<<<<
 *         return self.colorTrait
 *     cdef bint mergeable(self,LinearDNA dna):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9LinearDNA_9get_colorTrait(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_9LinearDNA_9get_colorTrait(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_colorTrait (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9LinearDNA_8get_colorTrait(((struct __pyx_obj_8world_cy_LinearDNA *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9LinearDNA_8get_colorTrait(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_colorTrait", 0);
  __Pyx_TraceCall("get_colorTrait", __pyx_f[1], 475, 0, __PYX_ERR(1, 475, __pyx_L1_error));

  /* "world_cy.pyx":476
 *         return (self.colorTrait,self.maxsizeTrait,self.uptakeTrait,self.maxageTrait,self.weightsTrait)
 *     def get_colorTrait(self):
 *         return self.colorTrait             # <<<<<<<<<<<<<<
 *     cdef bint mergeable(self,LinearDNA dna):
 *         if self.colorTrait.r!=dna.colorTrait.r:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->colorTrait));
  __pyx_r = ((PyObject *)__pyx_v_self->colorTrait);
  goto __pyx_L0;

  /* "world_cy.pyx":475
 *     def get_traits(self):
 *         return (self.colorTrait,self.maxsizeTrait,self.uptakeTrait,self.maxageTrait,self.weightsTrait)
 *     def get_colorTrait(self):             # <<<<<<<<<<<<<<
 *         return self.colorTrait
 *     cdef bint mergeable(self,LinearDNA dna):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.LinearDNA.get_colorTrait", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":477
 *     def get_colorTrait(self):
 *         return self.colorTrait
 *     cdef bint mergeable(self,LinearDNA dna):             # <<<<<<<<<<<<<<
 *         if self.colorTrait.r!=dna.colorTrait.r:
 *             return False
 */

static int __pyx_f_8world_cy_9LinearDNA_mergeable(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self, struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_dna) {
  double __pyx_v_d;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("mergeable", 0);
  __Pyx_TraceCall("mergeable", __pyx_f[1], 477, 0, __PYX_ERR(1, 477, __pyx_L1_error));

  /* "world_cy.pyx":478
 *         return self.colorTrait
 *     cdef bint mergeable(self,LinearDNA dna):
 *         if self.colorTrait.r!=dna.colorTrait.r:             # <<<<<<<<<<<<<<
 *             return False
 *         if self.colorTrait.g!=dna.colorTrait.g:
 */
  __pyx_t_1 = ((__pyx_v_self->colorTrait->r != __pyx_v_dna->colorTrait->r) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":479
 *     cdef bint mergeable(self,LinearDNA dna):
 *         if self.colorTrait.r!=dna.colorTrait.r:
 *             return False             # <<<<<<<<<<<<<<
 *         if self.colorTrait.g!=dna.colorTrait.g:
 *             return False
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "world_cy.pyx":478
 *         return self.colorTrait
 *     cdef bint mergeable(self,LinearDNA dna):
 *         if self.colorTrait.r!=dna.colorTrait.r:             # <<<<<<<<<<<<<<
 *             return False
 *         if self.colorTrait.g!=dna.colorTrait.g:
 */
  }

  /* "world_cy.pyx":480
 *         if self.colorTrait.r!=dna.colorTrait.r:
 *             return False
 *         if self.colorTrait.g!=dna.colorTrait.g:             # <<<<<<<<<<<<<<
 *             return False
 *         if self.colorTrait.b!=dna.colorTrait.b:
 */
  __pyx_t_1 = ((__pyx_v_self->colorTrait->g != __pyx_v_dna->colorTrait->g) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":481
 *             return False
 *         if self.colorTrait.g!=dna.colorTrait.g:
 *             return False             # <<<<<<<<<<<<<<
 *         if self.colorTrait.b!=dna.colorTrait.b:
 *             return False
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "world_cy.pyx":480
 *         if self.colorTrait.r!=dna.colorTrait.r:
 *             return False
 *         if self.colorTrait.g!=dna.colorTrait.g:             # <<<<<<<<<<<<<<
 *             return False
 *         if self.colorTrait.b!=dna.colorTrait.b:
 */
  }

  /* "world_cy.pyx":482
 *         if self.colorTrait.g!=dna.colorTrait.g:
 *             return False
 *         if self.colorTrait.b!=dna.colorTrait.b:             # <<<<<<<<<<<<<<
 *             return False
 *         cdef double d
 */
  __pyx_t_1 = ((__pyx_v_self->colorTrait->b != __pyx_v_dna->colorTrait->b) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":483
 *             return False
 *         if self.colorTrait.b!=dna.colorTrait.b:
 *             return False             # <<<<<<<<<<<<<<
 *         cdef double d
 *         d=FloatListTrait.normalized_difference(self.weightsTrait,dna.weightsTrait)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "world_cy.pyx":482
 *         if self.colorTrait.g!=dna.colorTrait.g:
 *             return False
 *         if self.colorTrait.b!=dna.colorTrait.b:             # <<<<<<<<<<<<<<
 *             return False
 *         cdef double d
 */
  }

  /* "world_cy.pyx":485
 *             return False
 *         cdef double d
 *         d=FloatListTrait.normalized_difference(self.weightsTrait,dna.weightsTrait)             # <<<<<<<<<<<<<<
 *         return uniform()<1-erf(d/merge_thres)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->weightsTrait);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = ((PyObject *)__pyx_v_dna->weightsTrait);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_d = __pyx_f_8world_cy_14FloatListTrait_normalized_difference(((struct __pyx_obj_8world_cy_FloatListTrait *)__pyx_t_2), ((struct __pyx_obj_8world_cy_FloatListTrait *)__pyx_t_3));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "world_cy.pyx":486
 *         cdef double d
 *         d=FloatListTrait.normalized_difference(self.weightsTrait,dna.weightsTrait)
 *         return uniform()<1-erf(d/merge_thres)             # <<<<<<<<<<<<<<
 * 
 *     cdef LinearDNA merge(self,LinearDNA dna):
 */
  if (unlikely(__pyx_v_8world_cy_merge_thres == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 486, __pyx_L1_error)
  }
  __pyx_r = (__pyx_f_11fast_random_uniform() < (1.0 - erf((__pyx_v_d / __pyx_v_8world_cy_merge_thres))));
  goto __pyx_L0;

  /* "world_cy.pyx":477
 *     def get_colorTrait(self):
 *         return self.colorTrait
 *     cdef bint mergeable(self,LinearDNA dna):             # <<<<<<<<<<<<<<
 *         if self.colorTrait.r!=dna.colorTrait.r:
 *             return False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("world_cy.LinearDNA.mergeable", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":488
 *         return uniform()<1-erf(d/merge_thres)
 * 
 *     cdef LinearDNA merge(self,LinearDNA dna):             # <<<<<<<<<<<<<<
 *         cdef ColorTrait colorTrait
 *         colorTrait=self.colorTrait
 */

static struct __pyx_obj_8world_cy_LinearDNA *__pyx_f_8world_cy_9LinearDNA_merge(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self, struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_dna) {
  struct __pyx_obj_8world_cy_ColorTrait *__pyx_v_colorTrait = 0;
  struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_maxsizeTrait = 0;
  struct __pyx_obj_8world_cy_UnitTrait *__pyx_v_uptakeTrait = 0;
  struct __pyx_obj_8world_cy_PositiveTrait *__pyx_v_maxageTrait = 0;
  struct __pyx_obj_8world_cy_FloatListTrait *__pyx_v_weightsTrait = 0;
  struct __pyx_obj_8world_cy_LinearDNA *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("merge", 0);
  __Pyx_TraceCall("merge", __pyx_f[1], 488, 0, __PYX_ERR(1, 488, __pyx_L1_error));

  /* "world_cy.pyx":490
 *     cdef LinearDNA merge(self,LinearDNA dna):
 *         cdef ColorTrait colorTrait
 *         colorTrait=self.colorTrait             # <<<<<<<<<<<<<<
 *         cdef PositiveTrait maxsizeTrait
 *         maxsizeTrait=self.maxsizeTrait
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->colorTrait);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_colorTrait = ((struct __pyx_obj_8world_cy_ColorTrait *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "world_cy.pyx":492
 *         colorTrait=self.colorTrait
 *         cdef PositiveTrait maxsizeTrait
 *         maxsizeTrait=self.maxsizeTrait             # <<<<<<<<<<<<<<
 *         cdef UnitTrait uptakeTrait
 *         uptakeTrait=self.uptakeTrait
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->maxsizeTrait);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_maxsizeTrait = ((struct __pyx_obj_8world_cy_PositiveTrait *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "world_cy.pyx":494
 *         maxsizeTrait=self.maxsizeTrait
 *         cdef UnitTrait uptakeTrait
 *         uptakeTrait=self.uptakeTrait             # <<<<<<<<<<<<<<
 *         cdef PositiveTrait maxageTrait
 *         maxageTrait=self.maxageTrait
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->uptakeTrait);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_uptakeTrait = ((struct __pyx_obj_8world_cy_UnitTrait *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "world_cy.pyx":496
 *         uptakeTrait=self.uptakeTrait
 *         cdef PositiveTrait maxageTrait
 *         maxageTrait=self.maxageTrait             # <<<<<<<<<<<<<<
 *         cdef FloatListTrait weightsTrait
 *         weightsTrait=FloatListTrait.mixed(self.weightsTrait,dna.weightsTrait)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->maxageTrait);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_maxageTrait = ((struct __pyx_obj_8world_cy_PositiveTrait *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "world_cy.pyx":498
 *         maxageTrait=self.maxageTrait
 *         cdef FloatListTrait weightsTrait
 *         weightsTrait=FloatListTrait.mixed(self.weightsTrait,dna.weightsTrait)             # <<<<<<<<<<<<<<
 *         weightsTrait.mutate(mut_rate)
 *         return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->weightsTrait);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_v_dna->weightsTrait);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = ((PyObject *)__pyx_f_8world_cy_14FloatListTrait_mixed(((struct __pyx_obj_8world_cy_FloatListTrait *)__pyx_t_1), ((struct __pyx_obj_8world_cy_FloatListTrait *)__pyx_t_2))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_weightsTrait = ((struct __pyx_obj_8world_cy_FloatListTrait *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "world_cy.pyx":499
 *         cdef FloatListTrait weightsTrait
 *         weightsTrait=FloatListTrait.mixed(self.weightsTrait,dna.weightsTrait)
 *         weightsTrait.mutate(mut_rate)             # <<<<<<<<<<<<<<
 *         return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)
 *     cdef ((int,int,int),double,double,double) translate(self):
 */
  ((struct __pyx_vtabstruct_8world_cy_FloatListTrait *)__pyx_v_weightsTrait->__pyx_vtab)->mutate(__pyx_v_weightsTrait, __pyx_v_8world_cy_mut_rate);

  /* "world_cy.pyx":500
 *         weightsTrait=FloatListTrait.mixed(self.weightsTrait,dna.weightsTrait)
 *         weightsTrait.mutate(mut_rate)
 *         return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)             # <<<<<<<<<<<<<<
 *     cdef ((int,int,int),double,double,double) translate(self):
 *         return (self.colorTrait.r,self.colorTrait.g,self.colorTrait.b),\
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_colorTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_colorTrait));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_colorTrait));
  __Pyx_INCREF(((PyObject *)__pyx_v_maxsizeTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_maxsizeTrait));
  PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_maxsizeTrait));
  __Pyx_INCREF(((PyObject *)__pyx_v_uptakeTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_uptakeTrait));
  PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_uptakeTrait));
  __Pyx_INCREF(((PyObject *)__pyx_v_maxageTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_maxageTrait));
  PyTuple_SET_ITEM(__pyx_t_3, 3, ((PyObject *)__pyx_v_maxageTrait));
  __Pyx_INCREF(((PyObject *)__pyx_v_weightsTrait));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_weightsTrait));
  PyTuple_SET_ITEM(__pyx_t_3, 4, ((PyObject *)__pyx_v_weightsTrait));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8world_cy_LinearDNA), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = ((struct __pyx_obj_8world_cy_LinearDNA *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":488
 *         return uniform()<1-erf(d/merge_thres)
 * 
 *     cdef LinearDNA merge(self,LinearDNA dna):             # <<<<<<<<<<<<<<
 *         cdef ColorTrait colorTrait
 *         colorTrait=self.colorTrait
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("world_cy.LinearDNA.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_colorTrait);
  __Pyx_XDECREF((PyObject *)__pyx_v_maxsizeTrait);
  __Pyx_XDECREF((PyObject *)__pyx_v_uptakeTrait);
  __Pyx_XDECREF((PyObject *)__pyx_v_maxageTrait);
  __Pyx_XDECREF((PyObject *)__pyx_v_weightsTrait);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":501
 *         weightsTrait.mutate(mut_rate)
 *         return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)
 *     cdef ((int,int,int),double,double,double) translate(self):             # <<<<<<<<<<<<<<
 *         return (self.colorTrait.r,self.colorTrait.g,self.colorTrait.b),\
 *                self.maxsizeTrait.a,self.uptakeTrait.a,self.maxageTrait.a
 */

static __pyx_ctuple_68ea0____dunderpyx_ctuple_int__dunderand_int__dunderand_int__and_double__and_double__and_double__etc __pyx_f_8world_cy_9LinearDNA_translate(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self) {
  __pyx_ctuple_68ea0____dunderpyx_ctuple_int__dunderand_int__dunderand_int__and_double__and_double__and_double__etc __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __pyx_ctuple_int__and_int__and_int __pyx_t_1;
  __pyx_ctuple_68ea0____dunderpyx_ctuple_int__dunderand_int__dunderand_int__and_double__and_double__and_double__etc __pyx_t_2;
  __Pyx_RefNannySetupContext("translate", 0);
  __Pyx_TraceCall("translate", __pyx_f[1], 501, 0, __PYX_ERR(1, 501, __pyx_L1_error));

  /* "world_cy.pyx":502
 *         return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)
 *     cdef ((int,int,int),double,double,double) translate(self):
 *         return (self.colorTrait.r,self.colorTrait.g,self.colorTrait.b),\             # <<<<<<<<<<<<<<
 *                self.maxsizeTrait.a,self.uptakeTrait.a,self.maxageTrait.a
 *     cdef double[:] translate_weights(self):
 */
  __pyx_t_1.f0 = __pyx_v_self->colorTrait->r;
  __pyx_t_1.f1 = __pyx_v_self->colorTrait->g;
  __pyx_t_1.f2 = __pyx_v_self->colorTrait->b;

  /* "world_cy.pyx":503
 *     cdef ((int,int,int),double,double,double) translate(self):
 *         return (self.colorTrait.r,self.colorTrait.g,self.colorTrait.b),\
 *                self.maxsizeTrait.a,self.uptakeTrait.a,self.maxageTrait.a             # <<<<<<<<<<<<<<
 *     cdef double[:] translate_weights(self):
 *         return self.weightsTrait.l
 */
  __pyx_t_2.f0 = __pyx_t_1;
  __pyx_t_2.f1 = __pyx_v_self->maxsizeTrait->a;
  __pyx_t_2.f2 = __pyx_v_self->uptakeTrait->a;
  __pyx_t_2.f3 = __pyx_v_self->maxageTrait->a;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "world_cy.pyx":501
 *         weightsTrait.mutate(mut_rate)
 *         return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)
 *     cdef ((int,int,int),double,double,double) translate(self):             # <<<<<<<<<<<<<<
 *         return (self.colorTrait.r,self.colorTrait.g,self.colorTrait.b),\
 *                self.maxsizeTrait.a,self.uptakeTrait.a,self.maxageTrait.a
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.LinearDNA.translate", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":504
 *         return (self.colorTrait.r,self.colorTrait.g,self.colorTrait.b),\
 *                self.maxsizeTrait.a,self.uptakeTrait.a,self.maxageTrait.a
 *     cdef double[:] translate_weights(self):             # <<<<<<<<<<<<<<
 *         return self.weightsTrait.l
 * 
 */

static __Pyx_memviewslice __pyx_f_8world_cy_9LinearDNA_translate_weights(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self) {
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("translate_weights", 0);
  __Pyx_TraceCall("translate_weights", __pyx_f[1], 504, 0, __PYX_ERR(1, 504, __pyx_L1_error));

  /* "world_cy.pyx":505
 *                self.maxsizeTrait.a,self.uptakeTrait.a,self.maxageTrait.a
 *     cdef double[:] translate_weights(self):
 *         return self.weightsTrait.l             # <<<<<<<<<<<<<<
 * 
 * #--------------------------------------------------------------
 */
  if (unlikely(!__pyx_v_self->weightsTrait->l.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 505, __pyx_L1_error)}
  __PYX_INC_MEMVIEW(&__pyx_v_self->weightsTrait->l, 0);
  __pyx_r = __pyx_v_self->weightsTrait->l;
  goto __pyx_L0;

  /* "world_cy.pyx":504
 *         return (self.colorTrait.r,self.colorTrait.g,self.colorTrait.b),\
 *                self.maxsizeTrait.a,self.uptakeTrait.a,self.maxageTrait.a
 *     cdef double[:] translate_weights(self):             # <<<<<<<<<<<<<<
 *         return self.weightsTrait.l
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("world_cy.LinearDNA.translate_weights", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9LinearDNA_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_9LinearDNA_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9LinearDNA_10__reduce_cython__(((struct __pyx_obj_8world_cy_LinearDNA *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9LinearDNA_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.LinearDNA.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9LinearDNA_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8world_cy_9LinearDNA_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9LinearDNA_12__setstate_cython__(((struct __pyx_obj_8world_cy_LinearDNA *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9LinearDNA_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[0], 3, 0, __PYX_ERR(0, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.LinearDNA.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":510
 * 
 * cdef class Brain():
 *     cdef void control(self,Minion mi,double[:] inp):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static void __pyx_f_8world_cy_5Brain_control(CYTHON_UNUSED struct __pyx_obj_8world_cy_Brain *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, CYTHON_UNUSED __Pyx_memviewslice __pyx_v_inp) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("control", 0);
  __Pyx_TraceCall("control", __pyx_f[1], 510, 0, __PYX_ERR(1, 510, __pyx_L1_error));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.Brain.control", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5Brain_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5Brain_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5Brain___reduce_cython__(((struct __pyx_obj_8world_cy_Brain *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5Brain___reduce_cython__(struct __pyx_obj_8world_cy_Brain *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.weights,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  if (unlikely(!__pyx_v_self->weights.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 5, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->weights, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.weights,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.weights,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.weights,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Brain, (type(self), 0x63f4f1e, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Brain, (type(self), 0x63f4f1e, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_Brain, (type(self), 0x63f4f1e, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Brain, (type(self), 0x63f4f1e, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_Brain); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_104812318);
    __Pyx_GIVEREF(__pyx_int_104812318);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_104812318);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Brain, (type(self), 0x63f4f1e, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Brain, (type(self), 0x63f4f1e, None), state
 *     else:
 *         return __pyx_unpickle_Brain, (type(self), 0x63f4f1e, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Brain__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Brain); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_104812318);
    __Pyx_GIVEREF(__pyx_int_104812318);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_104812318);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("world_cy.Brain.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Brain, (type(self), 0x63f4f1e, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Brain__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5Brain_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8world_cy_5Brain_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5Brain_2__setstate_cython__(((struct __pyx_obj_8world_cy_Brain *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5Brain_2__setstate_cython__(struct __pyx_obj_8world_cy_Brain *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[0], 16, 0, __PYX_ERR(0, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Brain, (type(self), 0x63f4f1e, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Brain__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_8world_cy___pyx_unpickle_Brain__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Brain, (type(self), 0x63f4f1e, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Brain__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.Brain.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":514
 * 
 * 
 * cdef double[:] apply_linear(double[:] v,double[:] A):             # <<<<<<<<<<<<<<
 *     cdef size_t n,m,i,j
 *     cdef double[:] result
 */

static __Pyx_memviewslice __pyx_f_8world_cy_apply_linear(__Pyx_memviewslice __pyx_v_v, __Pyx_memviewslice __pyx_v_A) {
  size_t __pyx_v_n;
  size_t __pyx_v_m;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  __Pyx_memviewslice __pyx_v_result = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_sum;
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  size_t __pyx_t_10;
  size_t __pyx_t_11;
  int __pyx_t_12;
  size_t __pyx_t_13;
  __Pyx_RefNannySetupContext("apply_linear", 0);
  __Pyx_TraceCall("apply_linear", __pyx_f[1], 514, 0, __PYX_ERR(1, 514, __pyx_L1_error));

  /* "world_cy.pyx":518
 *     cdef double[:] result
 *     cdef double sum
 *     n=v.shape[0]             # <<<<<<<<<<<<<<
 *     m=A.shape[0]
 *     m/=n
 */
  __pyx_v_n = (__pyx_v_v.shape[0]);

  /* "world_cy.pyx":519
 *     cdef double sum
 *     n=v.shape[0]
 *     m=A.shape[0]             # <<<<<<<<<<<<<<
 *     m/=n
 *     result = cvarray(shape=(m,), itemsize=sizeof(double), format="d")
 */
  __pyx_v_m = (__pyx_v_A.shape[0]);

  /* "world_cy.pyx":520
 *     n=v.shape[0]
 *     m=A.shape[0]
 *     m/=n             # <<<<<<<<<<<<<<
 *     result = cvarray(shape=(m,), itemsize=sizeof(double), format="d")
 *     for j in range(m):
 */
  if (unlikely(__pyx_v_n == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(1, 520, __pyx_L1_error)
  }
  __pyx_v_m = (__pyx_v_m / __pyx_v_n);

  /* "world_cy.pyx":521
 *     m=A.shape[0]
 *     m/=n
 *     result = cvarray(shape=(m,), itemsize=sizeof(double), format="d")             # <<<<<<<<<<<<<<
 *     for j in range(m):
 *         sum=0
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_m); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_3) < 0) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_3) < 0) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_d) < 0) __PYX_ERR(1, 521, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "world_cy.pyx":522
 *     m/=n
 *     result = cvarray(shape=(m,), itemsize=sizeof(double), format="d")
 *     for j in range(m):             # <<<<<<<<<<<<<<
 *         sum=0
 *         for i in range(n):
 */
  __pyx_t_5 = __pyx_v_m;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_j = __pyx_t_7;

    /* "world_cy.pyx":523
 *     result = cvarray(shape=(m,), itemsize=sizeof(double), format="d")
 *     for j in range(m):
 *         sum=0             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             sum+=v[i]*A[j*n+i]
 */
    __pyx_v_sum = 0.0;

    /* "world_cy.pyx":524
 *     for j in range(m):
 *         sum=0
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             sum+=v[i]*A[j*n+i]
 *         result[j]=sum
 */
    __pyx_t_8 = __pyx_v_n;
    __pyx_t_9 = __pyx_t_8;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_i = __pyx_t_10;

      /* "world_cy.pyx":525
 *         sum=0
 *         for i in range(n):
 *             sum+=v[i]*A[j*n+i]             # <<<<<<<<<<<<<<
 *         result[j]=sum
 *     return result
 */
      __pyx_t_11 = __pyx_v_i;
      __pyx_t_12 = -1;
      if (unlikely(__pyx_t_11 >= (size_t)__pyx_v_v.shape[0])) __pyx_t_12 = 0;
      if (unlikely(__pyx_t_12 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_12);
        __PYX_ERR(1, 525, __pyx_L1_error)
      }
      __pyx_t_13 = ((__pyx_v_j * __pyx_v_n) + __pyx_v_i);
      __pyx_t_12 = -1;
      if (unlikely(__pyx_t_13 >= (size_t)__pyx_v_A.shape[0])) __pyx_t_12 = 0;
      if (unlikely(__pyx_t_12 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_12);
        __PYX_ERR(1, 525, __pyx_L1_error)
      }
      __pyx_v_sum = (__pyx_v_sum + ((*((double *) ( /* dim=0 */ (__pyx_v_v.data + __pyx_t_11 * __pyx_v_v.strides[0]) ))) * (*((double *) ( /* dim=0 */ (__pyx_v_A.data + __pyx_t_13 * __pyx_v_A.strides[0]) )))));
    }

    /* "world_cy.pyx":526
 *         for i in range(n):
 *             sum+=v[i]*A[j*n+i]
 *         result[j]=sum             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
    __pyx_t_8 = __pyx_v_j;
    __pyx_t_12 = -1;
    if (unlikely(__pyx_t_8 >= (size_t)__pyx_v_result.shape[0])) __pyx_t_12 = 0;
    if (unlikely(__pyx_t_12 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_12);
      __PYX_ERR(1, 526, __pyx_L1_error)
    }
    *((double *) ( /* dim=0 */ (__pyx_v_result.data + __pyx_t_8 * __pyx_v_result.strides[0]) )) = __pyx_v_sum;
  }

  /* "world_cy.pyx":527
 *             sum+=v[i]*A[j*n+i]
 *         result[j]=sum
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __PYX_INC_MEMVIEW(&__pyx_v_result, 0);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "world_cy.pyx":514
 * 
 * 
 * cdef double[:] apply_linear(double[:] v,double[:] A):             # <<<<<<<<<<<<<<
 *     cdef size_t n,m,i,j
 *     cdef double[:] result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("world_cy.apply_linear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_result, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":532
 * 
 * cdef class LinearBrain(Brain):
 *     def __cinit__(self,double[:] weights,bint init=False):             # <<<<<<<<<<<<<<
 *         if init:
 *             weights=1-2*np.random.rand(linear_wdim)
 */

/* Python wrapper */
static int __pyx_pw_8world_cy_11LinearBrain_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8world_cy_11LinearBrain_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_weights = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_init;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_weights_2,&__pyx_n_s_init,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weights_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_init);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 532, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_weights = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_weights.memview)) __PYX_ERR(1, 532, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_init = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_init == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 532, __pyx_L3_error)
    } else {
      __pyx_v_init = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 532, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.LinearBrain.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8world_cy_11LinearBrain___cinit__(((struct __pyx_obj_8world_cy_LinearBrain *)__pyx_v_self), __pyx_v_weights, __pyx_v_init);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8world_cy_11LinearBrain___cinit__(struct __pyx_obj_8world_cy_LinearBrain *__pyx_v_self, __Pyx_memviewslice __pyx_v_weights, int __pyx_v_init) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[1], 532, 0, __PYX_ERR(1, 532, __pyx_L1_error));

  /* "world_cy.pyx":533
 * cdef class LinearBrain(Brain):
 *     def __cinit__(self,double[:] weights,bint init=False):
 *         if init:             # <<<<<<<<<<<<<<
 *             weights=1-2*np.random.rand(linear_wdim)
 *         self.weights=weights
 */
  __pyx_t_1 = (__pyx_v_init != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":534
 *     def __cinit__(self,double[:] weights,bint init=False):
 *         if init:
 *             weights=1-2*np.random.rand(linear_wdim)             # <<<<<<<<<<<<<<
 *         self.weights=weights
 *     cdef void control(self,Minion mi,double[:] inp):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_random); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_rand); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_8world_cy_linear_wdim); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_int_2, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_3, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_2, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(1, 534, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_XDEC_MEMVIEW(&__pyx_v_weights, 1);
    __pyx_v_weights = __pyx_t_6;
    __pyx_t_6.memview = NULL;
    __pyx_t_6.data = NULL;

    /* "world_cy.pyx":533
 * cdef class LinearBrain(Brain):
 *     def __cinit__(self,double[:] weights,bint init=False):
 *         if init:             # <<<<<<<<<<<<<<
 *             weights=1-2*np.random.rand(linear_wdim)
 *         self.weights=weights
 */
  }

  /* "world_cy.pyx":535
 *         if init:
 *             weights=1-2*np.random.rand(linear_wdim)
 *         self.weights=weights             # <<<<<<<<<<<<<<
 *     cdef void control(self,Minion mi,double[:] inp):
 *         if mi.frozen:
 */
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->__pyx_base.weights, 0);
  __PYX_INC_MEMVIEW(&__pyx_v_weights, 0);
  __pyx_v_self->__pyx_base.weights = __pyx_v_weights;

  /* "world_cy.pyx":532
 * 
 * cdef class LinearBrain(Brain):
 *     def __cinit__(self,double[:] weights,bint init=False):             # <<<<<<<<<<<<<<
 *         if init:
 *             weights=1-2*np.random.rand(linear_wdim)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_AddTraceback("world_cy.LinearBrain.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_weights, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":536
 *             weights=1-2*np.random.rand(linear_wdim)
 *         self.weights=weights
 *     cdef void control(self,Minion mi,double[:] inp):             # <<<<<<<<<<<<<<
 *         if mi.frozen:
 *             return
 */

static void __pyx_f_8world_cy_11LinearBrain_control(struct __pyx_obj_8world_cy_LinearBrain *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, __Pyx_memviewslice __pyx_v_inp) {
  __Pyx_memviewslice __pyx_v_out = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_direc_probs = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_action_probs = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_c;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  __Pyx_memviewslice __pyx_t_3 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_4;
  size_t __pyx_t_5;
  __Pyx_RefNannySetupContext("control", 0);
  __Pyx_TraceCall("control", __pyx_f[1], 536, 0, __PYX_ERR(1, 536, __pyx_L1_error));

  /* "world_cy.pyx":537
 *         self.weights=weights
 *     cdef void control(self,Minion mi,double[:] inp):
 *         if mi.frozen:             # <<<<<<<<<<<<<<
 *             return
 *         cdef double[:] out,direc_probs,action_probs
 */
  __pyx_t_1 = (__pyx_v_mi->frozen != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":538
 *     cdef void control(self,Minion mi,double[:] inp):
 *         if mi.frozen:
 *             return             # <<<<<<<<<<<<<<
 *         cdef double[:] out,direc_probs,action_probs
 *         cdef double c=1/sqrt((<double>clear_idim)*5/16)
 */
    goto __pyx_L0;

    /* "world_cy.pyx":537
 *         self.weights=weights
 *     cdef void control(self,Minion mi,double[:] inp):
 *         if mi.frozen:             # <<<<<<<<<<<<<<
 *             return
 *         cdef double[:] out,direc_probs,action_probs
 */
  }

  /* "world_cy.pyx":540
 *             return
 *         cdef double[:] out,direc_probs,action_probs
 *         cdef double c=1/sqrt((<double>clear_idim)*5/16)             # <<<<<<<<<<<<<<
 *         out=apply_linear(inp,self.weights)
 *         direc_probs=out[:4]
 */
  __pyx_t_2 = sqrt(((((double)__pyx_v_8world_cy_clear_idim) * 5.0) / 16.0));
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 540, __pyx_L1_error)
  }
  __pyx_v_c = (1.0 / __pyx_t_2);

  /* "world_cy.pyx":541
 *         cdef double[:] out,direc_probs,action_probs
 *         cdef double c=1/sqrt((<double>clear_idim)*5/16)
 *         out=apply_linear(inp,self.weights)             # <<<<<<<<<<<<<<
 *         direc_probs=out[:4]
 *         take_softmax(direc_probs,c)
 */
  if (unlikely(!__pyx_v_self->__pyx_base.weights.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 541, __pyx_L1_error)}
  __pyx_t_3 = __pyx_f_8world_cy_apply_linear(__pyx_v_inp, __pyx_v_self->__pyx_base.weights); if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(1, 541, __pyx_L1_error)
  __pyx_v_out = __pyx_t_3;
  __pyx_t_3.memview = NULL;
  __pyx_t_3.data = NULL;

  /* "world_cy.pyx":542
 *         cdef double c=1/sqrt((<double>clear_idim)*5/16)
 *         out=apply_linear(inp,self.weights)
 *         direc_probs=out[:4]             # <<<<<<<<<<<<<<
 *         take_softmax(direc_probs,c)
 *         action_probs=out[8:12]
 */
  __pyx_t_3.data = __pyx_v_out.data;
  __pyx_t_3.memview = __pyx_v_out.memview;
  __PYX_INC_MEMVIEW(&__pyx_t_3, 0);
  __pyx_t_4 = -1;
  if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_3,
    __pyx_v_out.shape[0], __pyx_v_out.strides[0], __pyx_v_out.suboffsets[0],
    0,
    0,
    &__pyx_t_4,
    0,
    4,
    0,
    0,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(1, 542, __pyx_L1_error)
}

__pyx_v_direc_probs = __pyx_t_3;
  __pyx_t_3.memview = NULL;
  __pyx_t_3.data = NULL;

  /* "world_cy.pyx":543
 *         out=apply_linear(inp,self.weights)
 *         direc_probs=out[:4]
 *         take_softmax(direc_probs,c)             # <<<<<<<<<<<<<<
 *         action_probs=out[8:12]
 *         take_softmax(action_probs,c)
 */
  __pyx_f_8world_cy_take_softmax(__pyx_v_direc_probs, __pyx_v_c);

  /* "world_cy.pyx":544
 *         direc_probs=out[:4]
 *         take_softmax(direc_probs,c)
 *         action_probs=out[8:12]             # <<<<<<<<<<<<<<
 *         take_softmax(action_probs,c)
 *         mi.move_direc=randint_with_probs(0,3,direc_probs)
 */
  __pyx_t_3.data = __pyx_v_out.data;
  __pyx_t_3.memview = __pyx_v_out.memview;
  __PYX_INC_MEMVIEW(&__pyx_t_3, 0);
  __pyx_t_4 = -1;
  if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_3,
    __pyx_v_out.shape[0], __pyx_v_out.strides[0], __pyx_v_out.suboffsets[0],
    0,
    0,
    &__pyx_t_4,
    8,
    12,
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(1, 544, __pyx_L1_error)
}

__pyx_v_action_probs = __pyx_t_3;
  __pyx_t_3.memview = NULL;
  __pyx_t_3.data = NULL;

  /* "world_cy.pyx":545
 *         take_softmax(direc_probs,c)
 *         action_probs=out[8:12]
 *         take_softmax(action_probs,c)             # <<<<<<<<<<<<<<
 *         mi.move_direc=randint_with_probs(0,3,direc_probs)
 *         mi.move_dist=sigmoid(out[4+<size_t>mi.move_direc],c)
 */
  __pyx_f_8world_cy_take_softmax(__pyx_v_action_probs, __pyx_v_c);

  /* "world_cy.pyx":546
 *         action_probs=out[8:12]
 *         take_softmax(action_probs,c)
 *         mi.move_direc=randint_with_probs(0,3,direc_probs)             # <<<<<<<<<<<<<<
 *         mi.move_dist=sigmoid(out[4+<size_t>mi.move_direc],c)
 *         mi.action=randint_with_probs(0,3,action_probs)
 */
  __pyx_v_mi->move_direc = __pyx_f_11fast_random_randint_with_probs(0, 3, __pyx_v_direc_probs);

  /* "world_cy.pyx":547
 *         take_softmax(action_probs,c)
 *         mi.move_direc=randint_with_probs(0,3,direc_probs)
 *         mi.move_dist=sigmoid(out[4+<size_t>mi.move_direc],c)             # <<<<<<<<<<<<<<
 *         mi.action=randint_with_probs(0,3,action_probs)
 * 
 */
  __pyx_t_5 = (4 + ((size_t)__pyx_v_mi->move_direc));
  __pyx_t_4 = -1;
  if (unlikely(__pyx_t_5 >= (size_t)__pyx_v_out.shape[0])) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(1, 547, __pyx_L1_error)
  }
  __pyx_v_mi->move_dist = __pyx_f_8world_cy_sigmoid((*((double *) ( /* dim=0 */ (__pyx_v_out.data + __pyx_t_5 * __pyx_v_out.strides[0]) ))), __pyx_v_c);

  /* "world_cy.pyx":548
 *         mi.move_direc=randint_with_probs(0,3,direc_probs)
 *         mi.move_dist=sigmoid(out[4+<size_t>mi.move_direc],c)
 *         mi.action=randint_with_probs(0,3,action_probs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_mi->action = __pyx_f_11fast_random_randint_with_probs(0, 3, __pyx_v_action_probs);

  /* "world_cy.pyx":536
 *             weights=1-2*np.random.rand(linear_wdim)
 *         self.weights=weights
 *     cdef void control(self,Minion mi,double[:] inp):             # <<<<<<<<<<<<<<
 *         if mi.frozen:
 *             return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_3, 1);
  __Pyx_WriteUnraisable("world_cy.LinearBrain.control", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_out, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_direc_probs, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_action_probs, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_11LinearBrain_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_11LinearBrain_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_11LinearBrain_2__reduce_cython__(((struct __pyx_obj_8world_cy_LinearBrain *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_11LinearBrain_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_LinearBrain *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.LinearBrain.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_11LinearBrain_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8world_cy_11LinearBrain_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_11LinearBrain_4__setstate_cython__(((struct __pyx_obj_8world_cy_LinearBrain *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_11LinearBrain_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_LinearBrain *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[0], 3, 0, __PYX_ERR(0, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.LinearBrain.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":556
 * #--------------------------------------------------------------
 * 
 * cpdef Minion construct_minion(LinearDNA dna,int alen,(int,int) pos,bint do_freeze):             # <<<<<<<<<<<<<<
 *     cdef Minion mi
 *     mi=Minion(dna)
 */

static PyObject *__pyx_pw_8world_cy_19construct_minion(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_8world_cy_Minion *__pyx_f_8world_cy_construct_minion(struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_dna, int __pyx_v_alen, __pyx_ctuple_int__and_int __pyx_v_pos, int __pyx_v_do_freeze, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_8world_cy_Minion *__pyx_v_mi = 0;
  struct __pyx_obj_8world_cy_Minion *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("construct_minion", 0);
  __Pyx_TraceCall("construct_minion", __pyx_f[1], 556, 0, __PYX_ERR(1, 556, __pyx_L1_error));

  /* "world_cy.pyx":558
 * cpdef Minion construct_minion(LinearDNA dna,int alen,(int,int) pos,bint do_freeze):
 *     cdef Minion mi
 *     mi=Minion(dna)             # <<<<<<<<<<<<<<
 *     mi.take_mass(<double>((1+2*alen)**2-9))
 *     if pos==(-1,-1):
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8world_cy_Minion), ((PyObject *)__pyx_v_dna)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mi = ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "world_cy.pyx":559
 *     cdef Minion mi
 *     mi=Minion(dna)
 *     mi.take_mass(<double>((1+2*alen)**2-9))             # <<<<<<<<<<<<<<
 *     if pos==(-1,-1):
 *         pos[0]=randint(0,xsize-1)
 */
  ((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_mi->__pyx_vtab)->take_mass(__pyx_v_mi, ((double)(__Pyx_pow_long((1 + (2 * __pyx_v_alen)), 2) - 9)));

  /* "world_cy.pyx":560
 *     mi=Minion(dna)
 *     mi.take_mass(<double>((1+2*alen)**2-9))
 *     if pos==(-1,-1):             # <<<<<<<<<<<<<<
 *         pos[0]=randint(0,xsize-1)
 *         pos[1]=randint(0,ysize-1)
 */
  __pyx_t_1 = __pyx_convert__to_py___pyx_ctuple_int__and_int(__pyx_v_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_tuple__23, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 560, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 560, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "world_cy.pyx":561
 *     mi.take_mass(<double>((1+2*alen)**2-9))
 *     if pos==(-1,-1):
 *         pos[0]=randint(0,xsize-1)             # <<<<<<<<<<<<<<
 *         pos[1]=randint(0,ysize-1)
 *     mi.pos[0]=<size_t>pos[0]
 */
    __pyx_v_pos.f0 = __pyx_f_11fast_random_randint(0, (__pyx_v_8world_cy_xsize - 1));

    /* "world_cy.pyx":562
 *     if pos==(-1,-1):
 *         pos[0]=randint(0,xsize-1)
 *         pos[1]=randint(0,ysize-1)             # <<<<<<<<<<<<<<
 *     mi.pos[0]=<size_t>pos[0]
 *     mi.pos[1]=<size_t>pos[1]
 */
    __pyx_v_pos.f1 = __pyx_f_11fast_random_randint(0, (__pyx_v_8world_cy_ysize - 1));

    /* "world_cy.pyx":560
 *     mi=Minion(dna)
 *     mi.take_mass(<double>((1+2*alen)**2-9))
 *     if pos==(-1,-1):             # <<<<<<<<<<<<<<
 *         pos[0]=randint(0,xsize-1)
 *         pos[1]=randint(0,ysize-1)
 */
  }

  /* "world_cy.pyx":563
 *         pos[0]=randint(0,xsize-1)
 *         pos[1]=randint(0,ysize-1)
 *     mi.pos[0]=<size_t>pos[0]             # <<<<<<<<<<<<<<
 *     mi.pos[1]=<size_t>pos[1]
 *     if do_freeze:
 */
  __pyx_v_mi->pos.f0 = ((size_t)__pyx_v_pos.f0);

  /* "world_cy.pyx":564
 *         pos[1]=randint(0,ysize-1)
 *     mi.pos[0]=<size_t>pos[0]
 *     mi.pos[1]=<size_t>pos[1]             # <<<<<<<<<<<<<<
 *     if do_freeze:
 *         mi.freeze()
 */
  __pyx_v_mi->pos.f1 = ((size_t)__pyx_v_pos.f1);

  /* "world_cy.pyx":565
 *     mi.pos[0]=<size_t>pos[0]
 *     mi.pos[1]=<size_t>pos[1]
 *     if do_freeze:             # <<<<<<<<<<<<<<
 *         mi.freeze()
 *     return mi
 */
  __pyx_t_3 = (__pyx_v_do_freeze != 0);
  if (__pyx_t_3) {

    /* "world_cy.pyx":566
 *     mi.pos[1]=<size_t>pos[1]
 *     if do_freeze:
 *         mi.freeze()             # <<<<<<<<<<<<<<
 *     return mi
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_mi), __pyx_n_s_freeze); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "world_cy.pyx":565
 *     mi.pos[0]=<size_t>pos[0]
 *     mi.pos[1]=<size_t>pos[1]
 *     if do_freeze:             # <<<<<<<<<<<<<<
 *         mi.freeze()
 *     return mi
 */
  }

  /* "world_cy.pyx":567
 *     if do_freeze:
 *         mi.freeze()
 *     return mi             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_mi));
  __pyx_r = __pyx_v_mi;
  goto __pyx_L0;

  /* "world_cy.pyx":556
 * #--------------------------------------------------------------
 * 
 * cpdef Minion construct_minion(LinearDNA dna,int alen,(int,int) pos,bint do_freeze):             # <<<<<<<<<<<<<<
 *     cdef Minion mi
 *     mi=Minion(dna)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("world_cy.construct_minion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mi);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_19construct_minion(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8world_cy_19construct_minion(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_dna = 0;
  int __pyx_v_alen;
  __pyx_ctuple_int__and_int __pyx_v_pos;
  int __pyx_v_do_freeze;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("construct_minion (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dna_2,&__pyx_n_s_alen,&__pyx_n_s_pos,&__pyx_n_s_do_freeze,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dna_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alen)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("construct_minion", 1, 4, 4, 1); __PYX_ERR(1, 556, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("construct_minion", 1, 4, 4, 2); __PYX_ERR(1, 556, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_do_freeze)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("construct_minion", 1, 4, 4, 3); __PYX_ERR(1, 556, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "construct_minion") < 0)) __PYX_ERR(1, 556, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_dna = ((struct __pyx_obj_8world_cy_LinearDNA *)values[0]);
    __pyx_v_alen = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_alen == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 556, __pyx_L3_error)
    __pyx_v_pos = __pyx_convert__from_py___pyx_ctuple_int__and_int(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 556, __pyx_L3_error)
    __pyx_v_do_freeze = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_do_freeze == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 556, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("construct_minion", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 556, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.construct_minion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dna), __pyx_ptype_8world_cy_LinearDNA, 1, "dna", 0))) __PYX_ERR(1, 556, __pyx_L1_error)
  __pyx_r = __pyx_pf_8world_cy_18construct_minion(__pyx_self, __pyx_v_dna, __pyx_v_alen, __pyx_v_pos, __pyx_v_do_freeze);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_18construct_minion(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_dna, int __pyx_v_alen, __pyx_ctuple_int__and_int __pyx_v_pos, int __pyx_v_do_freeze) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("construct_minion", 0);
  __Pyx_TraceCall("construct_minion (wrapper)", __pyx_f[1], 556, 0, __PYX_ERR(1, 556, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8world_cy_construct_minion(__pyx_v_dna, __pyx_v_alen, __pyx_v_pos, __pyx_v_do_freeze, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.construct_minion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":572
 * 
 * cdef class Minion():
 *     def __cinit__(self,LinearDNA dna):             # <<<<<<<<<<<<<<
 *         self.dna=dna
 *         self.color,self.maxsize,self.uptake,self.maxage=self.dna.translate()
 */

/* Python wrapper */
static int __pyx_pw_8world_cy_6Minion_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8world_cy_6Minion_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_dna = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dna_2,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dna_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 572, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_dna = ((struct __pyx_obj_8world_cy_LinearDNA *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 572, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.Minion.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dna), __pyx_ptype_8world_cy_LinearDNA, 1, "dna", 0))) __PYX_ERR(1, 572, __pyx_L1_error)
  __pyx_r = __pyx_pf_8world_cy_6Minion___cinit__(((struct __pyx_obj_8world_cy_Minion *)__pyx_v_self), __pyx_v_dna);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8world_cy_6Minion___cinit__(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, struct __pyx_obj_8world_cy_LinearDNA *__pyx_v_dna) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __pyx_ctuple_68ea0____dunderpyx_ctuple_int__dunderand_int__dunderand_int__and_double__and_double__and_double__etc __pyx_t_1;
  __pyx_ctuple_int__and_int__and_int __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __pyx_ctuple_int__and_int __pyx_t_10;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[1], 572, 0, __PYX_ERR(1, 572, __pyx_L1_error));

  /* "world_cy.pyx":573
 * cdef class Minion():
 *     def __cinit__(self,LinearDNA dna):
 *         self.dna=dna             # <<<<<<<<<<<<<<
 *         self.color,self.maxsize,self.uptake,self.maxage=self.dna.translate()
 *         self.brain=LinearBrain(self.dna.translate_weights(),init=False)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_dna));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_dna));
  __Pyx_GOTREF(__pyx_v_self->dna);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->dna));
  __pyx_v_self->dna = __pyx_v_dna;

  /* "world_cy.pyx":574
 *     def __cinit__(self,LinearDNA dna):
 *         self.dna=dna
 *         self.color,self.maxsize,self.uptake,self.maxage=self.dna.translate()             # <<<<<<<<<<<<<<
 *         self.brain=LinearBrain(self.dna.translate_weights(),init=False)
 *         self.idim=clear_idim
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8world_cy_LinearDNA *)__pyx_v_self->dna->__pyx_vtab)->translate(__pyx_v_self->dna);
  __pyx_t_2 = __pyx_t_1.f0;
  __pyx_t_3 = __pyx_t_1.f1;
  __pyx_t_4 = __pyx_t_1.f2;
  __pyx_t_5 = __pyx_t_1.f3;
  __pyx_v_self->color = __pyx_t_2;
  __pyx_v_self->maxsize = __pyx_t_3;
  __pyx_v_self->uptake = __pyx_t_4;
  __pyx_v_self->maxage = __pyx_t_5;

  /* "world_cy.pyx":575
 *         self.dna=dna
 *         self.color,self.maxsize,self.uptake,self.maxage=self.dna.translate()
 *         self.brain=LinearBrain(self.dna.translate_weights(),init=False)             # <<<<<<<<<<<<<<
 *         self.idim=clear_idim
 *         self.id=-1
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_8world_cy_LinearDNA *)__pyx_v_self->dna->__pyx_vtab)->translate_weights(__pyx_v_self->dna); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(1, 575, __pyx_L1_error)
  __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_t_6, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_init, Py_False) < 0) __PYX_ERR(1, 575, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8world_cy_LinearBrain), __pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GIVEREF(__pyx_t_9);
  __Pyx_GOTREF(__pyx_v_self->brain);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->brain));
  __pyx_v_self->brain = ((struct __pyx_obj_8world_cy_Brain *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "world_cy.pyx":576
 *         self.color,self.maxsize,self.uptake,self.maxage=self.dna.translate()
 *         self.brain=LinearBrain(self.dna.translate_weights(),init=False)
 *         self.idim=clear_idim             # <<<<<<<<<<<<<<
 *         self.id=-1
 *         self.pos=(0,0)
 */
  __pyx_v_self->idim = __pyx_v_8world_cy_clear_idim;

  /* "world_cy.pyx":577
 *         self.brain=LinearBrain(self.dna.translate_weights(),init=False)
 *         self.idim=clear_idim
 *         self.id=-1             # <<<<<<<<<<<<<<
 *         self.pos=(0,0)
 *         self.age=0
 */
  __pyx_v_self->id = -1;

  /* "world_cy.pyx":578
 *         self.idim=clear_idim
 *         self.id=-1
 *         self.pos=(0,0)             # <<<<<<<<<<<<<<
 *         self.age=0
 *         self.dead=False
 */
  __pyx_t_10.f0 = 0;
  __pyx_t_10.f1 = 0;
  __pyx_v_self->pos = __pyx_t_10;

  /* "world_cy.pyx":579
 *         self.id=-1
 *         self.pos=(0,0)
 *         self.age=0             # <<<<<<<<<<<<<<
 *         self.dead=False
 *         self.alen=1
 */
  __pyx_v_self->age = 0;

  /* "world_cy.pyx":580
 *         self.pos=(0,0)
 *         self.age=0
 *         self.dead=False             # <<<<<<<<<<<<<<
 *         self.alen=1
 *         self.mass=9.0
 */
  __pyx_v_self->dead = 0;

  /* "world_cy.pyx":581
 *         self.age=0
 *         self.dead=False
 *         self.alen=1             # <<<<<<<<<<<<<<
 *         self.mass=9.0
 *         self.action=0
 */
  __pyx_v_self->alen = 1;

  /* "world_cy.pyx":582
 *         self.dead=False
 *         self.alen=1
 *         self.mass=9.0             # <<<<<<<<<<<<<<
 *         self.action=0
 *         self.move_direc=0
 */
  __pyx_v_self->mass = 9.0;

  /* "world_cy.pyx":583
 *         self.alen=1
 *         self.mass=9.0
 *         self.action=0             # <<<<<<<<<<<<<<
 *         self.move_direc=0
 *         self.move_dist=0.0
 */
  __pyx_v_self->action = 0;

  /* "world_cy.pyx":584
 *         self.mass=9.0
 *         self.action=0
 *         self.move_direc=0             # <<<<<<<<<<<<<<
 *         self.move_dist=0.0
 *         self.cum_dist=0
 */
  __pyx_v_self->move_direc = 0;

  /* "world_cy.pyx":585
 *         self.action=0
 *         self.move_direc=0
 *         self.move_dist=0.0             # <<<<<<<<<<<<<<
 *         self.cum_dist=0
 *         self.frozen=False
 */
  __pyx_v_self->move_dist = 0.0;

  /* "world_cy.pyx":586
 *         self.move_direc=0
 *         self.move_dist=0.0
 *         self.cum_dist=0             # <<<<<<<<<<<<<<
 *         self.frozen=False
 *         self.node=None
 */
  __pyx_v_self->cum_dist = 0;

  /* "world_cy.pyx":587
 *         self.move_dist=0.0
 *         self.cum_dist=0
 *         self.frozen=False             # <<<<<<<<<<<<<<
 *         self.node=None
 * 
 */
  __pyx_v_self->frozen = 0;

  /* "world_cy.pyx":588
 *         self.cum_dist=0
 *         self.frozen=False
 *         self.node=None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->node);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->node));
  __pyx_v_self->node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None);

  /* "world_cy.pyx":591
 * 
 * 
 *         self.energy=5.0*self.mass             # <<<<<<<<<<<<<<
 *         self.adjust_energy_from_mass()
 *         self.avg_consum_rate=avg_consum_rate
 */
  __pyx_v_self->energy = (5.0 * __pyx_v_self->mass);

  /* "world_cy.pyx":592
 * 
 *         self.energy=5.0*self.mass
 *         self.adjust_energy_from_mass()             # <<<<<<<<<<<<<<
 *         self.avg_consum_rate=avg_consum_rate
 *         self.basal_metabolic_rate=self.avg_consum_rate/4 #this*self.mass per moment
 */
  ((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_self->__pyx_vtab)->adjust_energy_from_mass(__pyx_v_self);

  /* "world_cy.pyx":593
 *         self.energy=5.0*self.mass
 *         self.adjust_energy_from_mass()
 *         self.avg_consum_rate=avg_consum_rate             # <<<<<<<<<<<<<<
 *         self.basal_metabolic_rate=self.avg_consum_rate/4 #this*self.mass per moment
 *         self.move_consum_rate=self.avg_consum_rate/40
 */
  __pyx_v_self->avg_consum_rate = __pyx_v_8world_cy_avg_consum_rate;

  /* "world_cy.pyx":594
 *         self.adjust_energy_from_mass()
 *         self.avg_consum_rate=avg_consum_rate
 *         self.basal_metabolic_rate=self.avg_consum_rate/4 #this*self.mass per moment             # <<<<<<<<<<<<<<
 *         self.move_consum_rate=self.avg_consum_rate/40
 *         self.stretch_consum_rate=self.avg_consum_rate/4
 */
  __pyx_v_self->basal_metabolic_rate = (__pyx_v_self->avg_consum_rate / 4.0);

  /* "world_cy.pyx":595
 *         self.avg_consum_rate=avg_consum_rate
 *         self.basal_metabolic_rate=self.avg_consum_rate/4 #this*self.mass per moment
 *         self.move_consum_rate=self.avg_consum_rate/40             # <<<<<<<<<<<<<<
 *         self.stretch_consum_rate=self.avg_consum_rate/4
 *         self.sex_consum_rate=self.avg_consum_rate/4
 */
  __pyx_v_self->move_consum_rate = (__pyx_v_self->avg_consum_rate / 40.0);

  /* "world_cy.pyx":596
 *         self.basal_metabolic_rate=self.avg_consum_rate/4 #this*self.mass per moment
 *         self.move_consum_rate=self.avg_consum_rate/40
 *         self.stretch_consum_rate=self.avg_consum_rate/4             # <<<<<<<<<<<<<<
 *         self.sex_consum_rate=self.avg_consum_rate/4
 *         self.birth_consum_rate=0.3
 */
  __pyx_v_self->stretch_consum_rate = (__pyx_v_self->avg_consum_rate / 4.0);

  /* "world_cy.pyx":597
 *         self.move_consum_rate=self.avg_consum_rate/40
 *         self.stretch_consum_rate=self.avg_consum_rate/4
 *         self.sex_consum_rate=self.avg_consum_rate/4             # <<<<<<<<<<<<<<
 *         self.birth_consum_rate=0.3
 *     def get_dna(self):
 */
  __pyx_v_self->sex_consum_rate = (__pyx_v_self->avg_consum_rate / 4.0);

  /* "world_cy.pyx":598
 *         self.stretch_consum_rate=self.avg_consum_rate/4
 *         self.sex_consum_rate=self.avg_consum_rate/4
 *         self.birth_consum_rate=0.3             # <<<<<<<<<<<<<<
 *     def get_dna(self):
 *         return self.dna
 */
  __pyx_v_self->birth_consum_rate = 0.3;

  /* "world_cy.pyx":572
 * 
 * cdef class Minion():
 *     def __cinit__(self,LinearDNA dna):             # <<<<<<<<<<<<<<
 *         self.dna=dna
 *         self.color,self.maxsize,self.uptake,self.maxage=self.dna.translate()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("world_cy.Minion.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":599
 *         self.sex_consum_rate=self.avg_consum_rate/4
 *         self.birth_consum_rate=0.3
 *     def get_dna(self):             # <<<<<<<<<<<<<<
 *         return self.dna
 *     def get_color(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_6Minion_3get_dna(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_6Minion_3get_dna(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_dna (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_6Minion_2get_dna(((struct __pyx_obj_8world_cy_Minion *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_6Minion_2get_dna(struct __pyx_obj_8world_cy_Minion *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_dna", 0);
  __Pyx_TraceCall("get_dna", __pyx_f[1], 599, 0, __PYX_ERR(1, 599, __pyx_L1_error));

  /* "world_cy.pyx":600
 *         self.birth_consum_rate=0.3
 *     def get_dna(self):
 *         return self.dna             # <<<<<<<<<<<<<<
 *     def get_color(self):
 *         return self.color
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->dna));
  __pyx_r = ((PyObject *)__pyx_v_self->dna);
  goto __pyx_L0;

  /* "world_cy.pyx":599
 *         self.sex_consum_rate=self.avg_consum_rate/4
 *         self.birth_consum_rate=0.3
 *     def get_dna(self):             # <<<<<<<<<<<<<<
 *         return self.dna
 *     def get_color(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.Minion.get_dna", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":601
 *     def get_dna(self):
 *         return self.dna
 *     def get_color(self):             # <<<<<<<<<<<<<<
 *         return self.color
 *     def get_mass(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_6Minion_5get_color(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_6Minion_5get_color(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_color (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_6Minion_4get_color(((struct __pyx_obj_8world_cy_Minion *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_6Minion_4get_color(struct __pyx_obj_8world_cy_Minion *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_color", 0);
  __Pyx_TraceCall("get_color", __pyx_f[1], 601, 0, __PYX_ERR(1, 601, __pyx_L1_error));

  /* "world_cy.pyx":602
 *         return self.dna
 *     def get_color(self):
 *         return self.color             # <<<<<<<<<<<<<<
 *     def get_mass(self):
 *         return self.mass
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert__to_py___pyx_ctuple_int__and_int__and_int(__pyx_v_self->color); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":601
 *     def get_dna(self):
 *         return self.dna
 *     def get_color(self):             # <<<<<<<<<<<<<<
 *         return self.color
 *     def get_mass(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.Minion.get_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":603
 *     def get_color(self):
 *         return self.color
 *     def get_mass(self):             # <<<<<<<<<<<<<<
 *         return self.mass
 *     def get_alen(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_6Minion_7get_mass(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_6Minion_7get_mass(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mass (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_6Minion_6get_mass(((struct __pyx_obj_8world_cy_Minion *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_6Minion_6get_mass(struct __pyx_obj_8world_cy_Minion *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_mass", 0);
  __Pyx_TraceCall("get_mass", __pyx_f[1], 603, 0, __PYX_ERR(1, 603, __pyx_L1_error));

  /* "world_cy.pyx":604
 *         return self.color
 *     def get_mass(self):
 *         return self.mass             # <<<<<<<<<<<<<<
 *     def get_alen(self):
 *         return self.alen
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mass); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":603
 *     def get_color(self):
 *         return self.color
 *     def get_mass(self):             # <<<<<<<<<<<<<<
 *         return self.mass
 *     def get_alen(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.Minion.get_mass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":605
 *     def get_mass(self):
 *         return self.mass
 *     def get_alen(self):             # <<<<<<<<<<<<<<
 *         return self.alen
 *     def get_pos(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_6Minion_9get_alen(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_6Minion_9get_alen(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_alen (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_6Minion_8get_alen(((struct __pyx_obj_8world_cy_Minion *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_6Minion_8get_alen(struct __pyx_obj_8world_cy_Minion *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_alen", 0);
  __Pyx_TraceCall("get_alen", __pyx_f[1], 605, 0, __PYX_ERR(1, 605, __pyx_L1_error));

  /* "world_cy.pyx":606
 *         return self.mass
 *     def get_alen(self):
 *         return self.alen             # <<<<<<<<<<<<<<
 *     def get_pos(self):
 *         return self.pos
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->alen); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":605
 *     def get_mass(self):
 *         return self.mass
 *     def get_alen(self):             # <<<<<<<<<<<<<<
 *         return self.alen
 *     def get_pos(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.Minion.get_alen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":607
 *     def get_alen(self):
 *         return self.alen
 *     def get_pos(self):             # <<<<<<<<<<<<<<
 *         return self.pos
 *     def get_action(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_6Minion_11get_pos(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_6Minion_11get_pos(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_6Minion_10get_pos(((struct __pyx_obj_8world_cy_Minion *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_6Minion_10get_pos(struct __pyx_obj_8world_cy_Minion *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_pos", 0);
  __Pyx_TraceCall("get_pos", __pyx_f[1], 607, 0, __PYX_ERR(1, 607, __pyx_L1_error));

  /* "world_cy.pyx":608
 *         return self.alen
 *     def get_pos(self):
 *         return self.pos             # <<<<<<<<<<<<<<
 *     def get_action(self):
 *         return self.action
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert__to_py___pyx_ctuple_int__and_int(__pyx_v_self->pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":607
 *     def get_alen(self):
 *         return self.alen
 *     def get_pos(self):             # <<<<<<<<<<<<<<
 *         return self.pos
 *     def get_action(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.Minion.get_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":609
 *     def get_pos(self):
 *         return self.pos
 *     def get_action(self):             # <<<<<<<<<<<<<<
 *         return self.action
 *     def get_move_direc(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_6Minion_13get_action(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_6Minion_13get_action(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_action (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_6Minion_12get_action(((struct __pyx_obj_8world_cy_Minion *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_6Minion_12get_action(struct __pyx_obj_8world_cy_Minion *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_action", 0);
  __Pyx_TraceCall("get_action", __pyx_f[1], 609, 0, __PYX_ERR(1, 609, __pyx_L1_error));

  /* "world_cy.pyx":610
 *         return self.pos
 *     def get_action(self):
 *         return self.action             # <<<<<<<<<<<<<<
 *     def get_move_direc(self):
 *         return self.move_direc
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->action); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":609
 *     def get_pos(self):
 *         return self.pos
 *     def get_action(self):             # <<<<<<<<<<<<<<
 *         return self.action
 *     def get_move_direc(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.Minion.get_action", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":611
 *     def get_action(self):
 *         return self.action
 *     def get_move_direc(self):             # <<<<<<<<<<<<<<
 *         return self.move_direc
 *     def get_frozen(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_6Minion_15get_move_direc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_6Minion_15get_move_direc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_move_direc (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_6Minion_14get_move_direc(((struct __pyx_obj_8world_cy_Minion *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_6Minion_14get_move_direc(struct __pyx_obj_8world_cy_Minion *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_move_direc", 0);
  __Pyx_TraceCall("get_move_direc", __pyx_f[1], 611, 0, __PYX_ERR(1, 611, __pyx_L1_error));

  /* "world_cy.pyx":612
 *         return self.action
 *     def get_move_direc(self):
 *         return self.move_direc             # <<<<<<<<<<<<<<
 *     def get_frozen(self):
 *         return self.frozen
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->move_direc); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":611
 *     def get_action(self):
 *         return self.action
 *     def get_move_direc(self):             # <<<<<<<<<<<<<<
 *         return self.move_direc
 *     def get_frozen(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.Minion.get_move_direc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":613
 *     def get_move_direc(self):
 *         return self.move_direc
 *     def get_frozen(self):             # <<<<<<<<<<<<<<
 *         return self.frozen
 *     def get_cum_dist(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_6Minion_17get_frozen(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_6Minion_17get_frozen(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_frozen (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_6Minion_16get_frozen(((struct __pyx_obj_8world_cy_Minion *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_6Minion_16get_frozen(struct __pyx_obj_8world_cy_Minion *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_frozen", 0);
  __Pyx_TraceCall("get_frozen", __pyx_f[1], 613, 0, __PYX_ERR(1, 613, __pyx_L1_error));

  /* "world_cy.pyx":614
 *         return self.move_direc
 *     def get_frozen(self):
 *         return self.frozen             # <<<<<<<<<<<<<<
 *     def get_cum_dist(self):
 *         return self.cum_dist
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->frozen); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":613
 *     def get_move_direc(self):
 *         return self.move_direc
 *     def get_frozen(self):             # <<<<<<<<<<<<<<
 *         return self.frozen
 *     def get_cum_dist(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.Minion.get_frozen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":615
 *     def get_frozen(self):
 *         return self.frozen
 *     def get_cum_dist(self):             # <<<<<<<<<<<<<<
 *         return self.cum_dist
 *     def freeze(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_6Minion_19get_cum_dist(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_6Minion_19get_cum_dist(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cum_dist (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_6Minion_18get_cum_dist(((struct __pyx_obj_8world_cy_Minion *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_6Minion_18get_cum_dist(struct __pyx_obj_8world_cy_Minion *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_cum_dist", 0);
  __Pyx_TraceCall("get_cum_dist", __pyx_f[1], 615, 0, __PYX_ERR(1, 615, __pyx_L1_error));

  /* "world_cy.pyx":616
 *         return self.frozen
 *     def get_cum_dist(self):
 *         return self.cum_dist             # <<<<<<<<<<<<<<
 *     def freeze(self):
 *         self.frozen=True
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->cum_dist); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":615
 *     def get_frozen(self):
 *         return self.frozen
 *     def get_cum_dist(self):             # <<<<<<<<<<<<<<
 *         return self.cum_dist
 *     def freeze(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.Minion.get_cum_dist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":617
 *     def get_cum_dist(self):
 *         return self.cum_dist
 *     def freeze(self):             # <<<<<<<<<<<<<<
 *         self.frozen=True
 *     def defreeze(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_6Minion_21freeze(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_6Minion_21freeze(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("freeze (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_6Minion_20freeze(((struct __pyx_obj_8world_cy_Minion *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_6Minion_20freeze(struct __pyx_obj_8world_cy_Minion *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("freeze", 0);
  __Pyx_TraceCall("freeze", __pyx_f[1], 617, 0, __PYX_ERR(1, 617, __pyx_L1_error));

  /* "world_cy.pyx":618
 *         return self.cum_dist
 *     def freeze(self):
 *         self.frozen=True             # <<<<<<<<<<<<<<
 *     def defreeze(self):
 *         self.frozen=False
 */
  __pyx_v_self->frozen = 1;

  /* "world_cy.pyx":617
 *     def get_cum_dist(self):
 *         return self.cum_dist
 *     def freeze(self):             # <<<<<<<<<<<<<<
 *         self.frozen=True
 *     def defreeze(self):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.Minion.freeze", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":619
 *     def freeze(self):
 *         self.frozen=True
 *     def defreeze(self):             # <<<<<<<<<<<<<<
 *         self.frozen=False
 *     def set_alen(self,n):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_6Minion_23defreeze(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_6Minion_23defreeze(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("defreeze (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_6Minion_22defreeze(((struct __pyx_obj_8world_cy_Minion *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_6Minion_22defreeze(struct __pyx_obj_8world_cy_Minion *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("defreeze", 0);
  __Pyx_TraceCall("defreeze", __pyx_f[1], 619, 0, __PYX_ERR(1, 619, __pyx_L1_error));

  /* "world_cy.pyx":620
 *         self.frozen=True
 *     def defreeze(self):
 *         self.frozen=False             # <<<<<<<<<<<<<<
 *     def set_alen(self,n):
 *         self.alen=n
 */
  __pyx_v_self->frozen = 0;

  /* "world_cy.pyx":619
 *     def freeze(self):
 *         self.frozen=True
 *     def defreeze(self):             # <<<<<<<<<<<<<<
 *         self.frozen=False
 *     def set_alen(self,n):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.Minion.defreeze", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":621
 *     def defreeze(self):
 *         self.frozen=False
 *     def set_alen(self,n):             # <<<<<<<<<<<<<<
 *         self.alen=n
 *     def set_pos(self,a,b):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_6Minion_25set_alen(PyObject *__pyx_v_self, PyObject *__pyx_v_n); /*proto*/
static PyObject *__pyx_pw_8world_cy_6Minion_25set_alen(PyObject *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_alen (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_6Minion_24set_alen(((struct __pyx_obj_8world_cy_Minion *)__pyx_v_self), ((PyObject *)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_6Minion_24set_alen(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("set_alen", 0);
  __Pyx_TraceCall("set_alen", __pyx_f[1], 621, 0, __PYX_ERR(1, 621, __pyx_L1_error));

  /* "world_cy.pyx":622
 *         self.frozen=False
 *     def set_alen(self,n):
 *         self.alen=n             # <<<<<<<<<<<<<<
 *     def set_pos(self,a,b):
 *         self.pos=(a,b)
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 622, __pyx_L1_error)
  __pyx_v_self->alen = __pyx_t_1;

  /* "world_cy.pyx":621
 *     def defreeze(self):
 *         self.frozen=False
 *     def set_alen(self,n):             # <<<<<<<<<<<<<<
 *         self.alen=n
 *     def set_pos(self,a,b):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.Minion.set_alen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":623
 *     def set_alen(self,n):
 *         self.alen=n
 *     def set_pos(self,a,b):             # <<<<<<<<<<<<<<
 *         self.pos=(a,b)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_6Minion_27set_pos(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8world_cy_6Minion_27set_pos(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_pos (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_pos", 1, 2, 2, 1); __PYX_ERR(1, 623, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_pos") < 0)) __PYX_ERR(1, 623, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_pos", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 623, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.Minion.set_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8world_cy_6Minion_26set_pos(((struct __pyx_obj_8world_cy_Minion *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_6Minion_26set_pos(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __pyx_ctuple_int__and_int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_pos", 0);
  __Pyx_TraceCall("set_pos", __pyx_f[1], 623, 0, __PYX_ERR(1, 623, __pyx_L1_error));

  /* "world_cy.pyx":624
 *         self.alen=n
 *     def set_pos(self,a,b):
 *         self.pos=(a,b)             # <<<<<<<<<<<<<<
 * 
 *     cdef bint increase_age(self):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_a); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 624, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_b); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 624, __pyx_L1_error)
  __pyx_t_3.f0 = __pyx_t_1;
  __pyx_t_3.f1 = __pyx_t_2;
  __pyx_v_self->pos = __pyx_t_3;

  /* "world_cy.pyx":623
 *     def set_alen(self,n):
 *         self.alen=n
 *     def set_pos(self,a,b):             # <<<<<<<<<<<<<<
 *         self.pos=(a,b)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.Minion.set_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":626
 *         self.pos=(a,b)
 * 
 *     cdef bint increase_age(self):             # <<<<<<<<<<<<<<
 *         self.age+=1
 *         if <double>self.age>self.maxage:
 */

static int __pyx_f_8world_cy_6Minion_increase_age(struct __pyx_obj_8world_cy_Minion *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("increase_age", 0);
  __Pyx_TraceCall("increase_age", __pyx_f[1], 626, 0, __PYX_ERR(1, 626, __pyx_L1_error));

  /* "world_cy.pyx":627
 * 
 *     cdef bint increase_age(self):
 *         self.age+=1             # <<<<<<<<<<<<<<
 *         if <double>self.age>self.maxage:
 *             return False
 */
  __pyx_v_self->age = (__pyx_v_self->age + 1);

  /* "world_cy.pyx":628
 *     cdef bint increase_age(self):
 *         self.age+=1
 *         if <double>self.age>self.maxage:             # <<<<<<<<<<<<<<
 *             return False
 *         return True
 */
  __pyx_t_1 = ((((double)__pyx_v_self->age) > __pyx_v_self->maxage) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":629
 *         self.age+=1
 *         if <double>self.age>self.maxage:
 *             return False             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "world_cy.pyx":628
 *     cdef bint increase_age(self):
 *         self.age+=1
 *         if <double>self.age>self.maxage:             # <<<<<<<<<<<<<<
 *             return False
 *         return True
 */
  }

  /* "world_cy.pyx":630
 *         if <double>self.age>self.maxage:
 *             return False
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cdef double energy_with_constant(self,double const):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "world_cy.pyx":626
 *         self.pos=(a,b)
 * 
 *     cdef bint increase_age(self):             # <<<<<<<<<<<<<<
 *         self.age+=1
 *         if <double>self.age>self.maxage:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.Minion.increase_age", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":632
 *         return True
 * 
 *     cdef double energy_with_constant(self,double const):             # <<<<<<<<<<<<<<
 *         return const*self.mass*(self.mass/9)**consum_exp
 * 
 */

static double __pyx_f_8world_cy_6Minion_energy_with_constant(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, double __pyx_v_const) {
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("energy_with_constant", 0);
  __Pyx_TraceCall("energy_with_constant", __pyx_f[1], 632, 0, __PYX_ERR(1, 632, __pyx_L1_error));

  /* "world_cy.pyx":633
 * 
 *     cdef double energy_with_constant(self,double const):
 *         return const*self.mass*(self.mass/9)**consum_exp             # <<<<<<<<<<<<<<
 * 
 *     cdef void take_energy(self,double amount):
 */
  __pyx_r = ((__pyx_v_const * __pyx_v_self->mass) * pow((__pyx_v_self->mass / 9.0), __pyx_v_8world_cy_consum_exp));
  goto __pyx_L0;

  /* "world_cy.pyx":632
 *         return True
 * 
 *     cdef double energy_with_constant(self,double const):             # <<<<<<<<<<<<<<
 *         return const*self.mass*(self.mass/9)**consum_exp
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.Minion.energy_with_constant", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":635
 *         return const*self.mass*(self.mass/9)**consum_exp
 * 
 *     cdef void take_energy(self,double amount):             # <<<<<<<<<<<<<<
 *         if amount<=self.max_energy-self.energy:
 *             self.energy+=amount
 */

static void __pyx_f_8world_cy_6Minion_take_energy(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, double __pyx_v_amount) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("take_energy", 0);
  __Pyx_TraceCall("take_energy", __pyx_f[1], 635, 0, __PYX_ERR(1, 635, __pyx_L1_error));

  /* "world_cy.pyx":636
 * 
 *     cdef void take_energy(self,double amount):
 *         if amount<=self.max_energy-self.energy:             # <<<<<<<<<<<<<<
 *             self.energy+=amount
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_amount <= (__pyx_v_self->max_energy - __pyx_v_self->energy)) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":637
 *     cdef void take_energy(self,double amount):
 *         if amount<=self.max_energy-self.energy:
 *             self.energy+=amount             # <<<<<<<<<<<<<<
 *         else:
 *             self.energy=self.max_energy
 */
    __pyx_v_self->energy = (__pyx_v_self->energy + __pyx_v_amount);

    /* "world_cy.pyx":636
 * 
 *     cdef void take_energy(self,double amount):
 *         if amount<=self.max_energy-self.energy:             # <<<<<<<<<<<<<<
 *             self.energy+=amount
 *         else:
 */
    goto __pyx_L3;
  }

  /* "world_cy.pyx":639
 *             self.energy+=amount
 *         else:
 *             self.energy=self.max_energy             # <<<<<<<<<<<<<<
 *     cdef bint loss_energy(self,double amount):
 *         self.energy-=amount
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_self->max_energy;
    __pyx_v_self->energy = __pyx_t_2;
  }
  __pyx_L3:;

  /* "world_cy.pyx":635
 *         return const*self.mass*(self.mass/9)**consum_exp
 * 
 *     cdef void take_energy(self,double amount):             # <<<<<<<<<<<<<<
 *         if amount<=self.max_energy-self.energy:
 *             self.energy+=amount
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.Minion.take_energy", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":640
 *         else:
 *             self.energy=self.max_energy
 *     cdef bint loss_energy(self,double amount):             # <<<<<<<<<<<<<<
 *         self.energy-=amount
 *         if self.energy<=0:
 */

static int __pyx_f_8world_cy_6Minion_loss_energy(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, double __pyx_v_amount) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("loss_energy", 0);
  __Pyx_TraceCall("loss_energy", __pyx_f[1], 640, 0, __PYX_ERR(1, 640, __pyx_L1_error));

  /* "world_cy.pyx":641
 *             self.energy=self.max_energy
 *     cdef bint loss_energy(self,double amount):
 *         self.energy-=amount             # <<<<<<<<<<<<<<
 *         if self.energy<=0:
 *             return False
 */
  __pyx_v_self->energy = (__pyx_v_self->energy - __pyx_v_amount);

  /* "world_cy.pyx":642
 *     cdef bint loss_energy(self,double amount):
 *         self.energy-=amount
 *         if self.energy<=0:             # <<<<<<<<<<<<<<
 *             return False
 *         return True
 */
  __pyx_t_1 = ((__pyx_v_self->energy <= 0.0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":643
 *         self.energy-=amount
 *         if self.energy<=0:
 *             return False             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "world_cy.pyx":642
 *     cdef bint loss_energy(self,double amount):
 *         self.energy-=amount
 *         if self.energy<=0:             # <<<<<<<<<<<<<<
 *             return False
 *         return True
 */
  }

  /* "world_cy.pyx":644
 *         if self.energy<=0:
 *             return False
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cdef void adjust_energy_from_mass(self):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "world_cy.pyx":640
 *         else:
 *             self.energy=self.max_energy
 *     cdef bint loss_energy(self,double amount):             # <<<<<<<<<<<<<<
 *         self.energy-=amount
 *         if self.energy<=0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.Minion.loss_energy", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":646
 *         return True
 * 
 *     cdef void adjust_energy_from_mass(self):             # <<<<<<<<<<<<<<
 *         self.max_energy=10*self.mass
 *         if self.energy>self.max_energy:
 */

static void __pyx_f_8world_cy_6Minion_adjust_energy_from_mass(struct __pyx_obj_8world_cy_Minion *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("adjust_energy_from_mass", 0);
  __Pyx_TraceCall("adjust_energy_from_mass", __pyx_f[1], 646, 0, __PYX_ERR(1, 646, __pyx_L1_error));

  /* "world_cy.pyx":647
 * 
 *     cdef void adjust_energy_from_mass(self):
 *         self.max_energy=10*self.mass             # <<<<<<<<<<<<<<
 *         if self.energy>self.max_energy:
 *             self.energy=self.max_energy
 */
  __pyx_v_self->max_energy = (10.0 * __pyx_v_self->mass);

  /* "world_cy.pyx":648
 *     cdef void adjust_energy_from_mass(self):
 *         self.max_energy=10*self.mass
 *         if self.energy>self.max_energy:             # <<<<<<<<<<<<<<
 *             self.energy=self.max_energy
 *     cdef void take_mass(self,double amount):
 */
  __pyx_t_1 = ((__pyx_v_self->energy > __pyx_v_self->max_energy) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":649
 *         self.max_energy=10*self.mass
 *         if self.energy>self.max_energy:
 *             self.energy=self.max_energy             # <<<<<<<<<<<<<<
 *     cdef void take_mass(self,double amount):
 *         #print("amount",amount)
 */
    __pyx_t_2 = __pyx_v_self->max_energy;
    __pyx_v_self->energy = __pyx_t_2;

    /* "world_cy.pyx":648
 *     cdef void adjust_energy_from_mass(self):
 *         self.max_energy=10*self.mass
 *         if self.energy>self.max_energy:             # <<<<<<<<<<<<<<
 *             self.energy=self.max_energy
 *     cdef void take_mass(self,double amount):
 */
  }

  /* "world_cy.pyx":646
 *         return True
 * 
 *     cdef void adjust_energy_from_mass(self):             # <<<<<<<<<<<<<<
 *         self.max_energy=10*self.mass
 *         if self.energy>self.max_energy:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.Minion.adjust_energy_from_mass", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":650
 *         if self.energy>self.max_energy:
 *             self.energy=self.max_energy
 *     cdef void take_mass(self,double amount):             # <<<<<<<<<<<<<<
 *         #print("amount",amount)
 *         self.mass+=amount
 */

static void __pyx_f_8world_cy_6Minion_take_mass(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, double __pyx_v_amount) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("take_mass", 0);
  __Pyx_TraceCall("take_mass", __pyx_f[1], 650, 0, __PYX_ERR(1, 650, __pyx_L1_error));

  /* "world_cy.pyx":652
 *     cdef void take_mass(self,double amount):
 *         #print("amount",amount)
 *         self.mass+=amount             # <<<<<<<<<<<<<<
 *         self.adjust_energy_from_mass()
 *         self.alen=<int>((sqrt(self.mass)-1)/2)
 */
  __pyx_v_self->mass = (__pyx_v_self->mass + __pyx_v_amount);

  /* "world_cy.pyx":653
 *         #print("amount",amount)
 *         self.mass+=amount
 *         self.adjust_energy_from_mass()             # <<<<<<<<<<<<<<
 *         self.alen=<int>((sqrt(self.mass)-1)/2)
 *     cdef void loss_mass(self,double amount):
 */
  ((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_self->__pyx_vtab)->adjust_energy_from_mass(__pyx_v_self);

  /* "world_cy.pyx":654
 *         self.mass+=amount
 *         self.adjust_energy_from_mass()
 *         self.alen=<int>((sqrt(self.mass)-1)/2)             # <<<<<<<<<<<<<<
 *     cdef void loss_mass(self,double amount):
 *         self.mass-=amount
 */
  __pyx_v_self->alen = ((int)((sqrt(__pyx_v_self->mass) - 1.0) / 2.0));

  /* "world_cy.pyx":650
 *         if self.energy>self.max_energy:
 *             self.energy=self.max_energy
 *     cdef void take_mass(self,double amount):             # <<<<<<<<<<<<<<
 *         #print("amount",amount)
 *         self.mass+=amount
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.Minion.take_mass", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":655
 *         self.adjust_energy_from_mass()
 *         self.alen=<int>((sqrt(self.mass)-1)/2)
 *     cdef void loss_mass(self,double amount):             # <<<<<<<<<<<<<<
 *         self.mass-=amount
 *         self.adjust_energy_from_mass()
 */

static void __pyx_f_8world_cy_6Minion_loss_mass(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, double __pyx_v_amount) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loss_mass", 0);
  __Pyx_TraceCall("loss_mass", __pyx_f[1], 655, 0, __PYX_ERR(1, 655, __pyx_L1_error));

  /* "world_cy.pyx":656
 *         self.alen=<int>((sqrt(self.mass)-1)/2)
 *     cdef void loss_mass(self,double amount):
 *         self.mass-=amount             # <<<<<<<<<<<<<<
 *         self.adjust_energy_from_mass()
 *         self.alen=<int>((sqrt(self.mass)-1)/2)
 */
  __pyx_v_self->mass = (__pyx_v_self->mass - __pyx_v_amount);

  /* "world_cy.pyx":657
 *     cdef void loss_mass(self,double amount):
 *         self.mass-=amount
 *         self.adjust_energy_from_mass()             # <<<<<<<<<<<<<<
 *         self.alen=<int>((sqrt(self.mass)-1)/2)
 *     cdef bint mergeable(self,Minion mi):
 */
  ((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_self->__pyx_vtab)->adjust_energy_from_mass(__pyx_v_self);

  /* "world_cy.pyx":658
 *         self.mass-=amount
 *         self.adjust_energy_from_mass()
 *         self.alen=<int>((sqrt(self.mass)-1)/2)             # <<<<<<<<<<<<<<
 *     cdef bint mergeable(self,Minion mi):
 *         return self.alen>=2 and self.dna.mergeable(mi.dna)
 */
  __pyx_v_self->alen = ((int)((sqrt(__pyx_v_self->mass) - 1.0) / 2.0));

  /* "world_cy.pyx":655
 *         self.adjust_energy_from_mass()
 *         self.alen=<int>((sqrt(self.mass)-1)/2)
 *     cdef void loss_mass(self,double amount):             # <<<<<<<<<<<<<<
 *         self.mass-=amount
 *         self.adjust_energy_from_mass()
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.Minion.loss_mass", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":659
 *         self.adjust_energy_from_mass()
 *         self.alen=<int>((sqrt(self.mass)-1)/2)
 *     cdef bint mergeable(self,Minion mi):             # <<<<<<<<<<<<<<
 *         return self.alen>=2 and self.dna.mergeable(mi.dna)
 *     cdef Minion get_child(self,Minion mi):
 */

static int __pyx_f_8world_cy_6Minion_mergeable(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("mergeable", 0);
  __Pyx_TraceCall("mergeable", __pyx_f[1], 659, 0, __PYX_ERR(1, 659, __pyx_L1_error));

  /* "world_cy.pyx":660
 *         self.alen=<int>((sqrt(self.mass)-1)/2)
 *     cdef bint mergeable(self,Minion mi):
 *         return self.alen>=2 and self.dna.mergeable(mi.dna)             # <<<<<<<<<<<<<<
 *     cdef Minion get_child(self,Minion mi):
 *         return Minion(self.dna.merge(mi.dna))
 */
  __pyx_t_2 = ((__pyx_v_self->alen >= 2) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_3 = ((PyObject *)__pyx_v_mi->dna);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_2 = (((struct __pyx_vtabstruct_8world_cy_LinearDNA *)__pyx_v_self->dna->__pyx_vtab)->mergeable(__pyx_v_self->dna, ((struct __pyx_obj_8world_cy_LinearDNA *)__pyx_t_3)) != 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "world_cy.pyx":659
 *         self.adjust_energy_from_mass()
 *         self.alen=<int>((sqrt(self.mass)-1)/2)
 *     cdef bint mergeable(self,Minion mi):             # <<<<<<<<<<<<<<
 *         return self.alen>=2 and self.dna.mergeable(mi.dna)
 *     cdef Minion get_child(self,Minion mi):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("world_cy.Minion.mergeable", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":661
 *     cdef bint mergeable(self,Minion mi):
 *         return self.alen>=2 and self.dna.mergeable(mi.dna)
 *     cdef Minion get_child(self,Minion mi):             # <<<<<<<<<<<<<<
 *         return Minion(self.dna.merge(mi.dna))
 * 
 */

static struct __pyx_obj_8world_cy_Minion *__pyx_f_8world_cy_6Minion_get_child(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi) {
  struct __pyx_obj_8world_cy_Minion *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_child", 0);
  __Pyx_TraceCall("get_child", __pyx_f[1], 661, 0, __PYX_ERR(1, 661, __pyx_L1_error));

  /* "world_cy.pyx":662
 *         return self.alen>=2 and self.dna.mergeable(mi.dna)
 *     cdef Minion get_child(self,Minion mi):
 *         return Minion(self.dna.merge(mi.dna))             # <<<<<<<<<<<<<<
 * 
 *     cdef double[:] get_input(self,int[:,:] snapshot):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_v_mi->dna);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_LinearDNA *)__pyx_v_self->dna->__pyx_vtab)->merge(__pyx_v_self->dna, ((struct __pyx_obj_8world_cy_LinearDNA *)__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8world_cy_Minion), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":661
 *     cdef bint mergeable(self,Minion mi):
 *         return self.alen>=2 and self.dna.mergeable(mi.dna)
 *     cdef Minion get_child(self,Minion mi):             # <<<<<<<<<<<<<<
 *         return Minion(self.dna.merge(mi.dna))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("world_cy.Minion.get_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":664
 *         return Minion(self.dna.merge(mi.dna))
 * 
 *     cdef double[:] get_input(self,int[:,:] snapshot):             # <<<<<<<<<<<<<<
 *         cdef int xsize,ysize
 *         cdef double x_min,x_max,y_min,y_max
 */

static __Pyx_memviewslice __pyx_f_8world_cy_6Minion_get_input(struct __pyx_obj_8world_cy_Minion *__pyx_v_self, __Pyx_memviewslice __pyx_v_snapshot) {
  int __pyx_v_xsize;
  int __pyx_v_ysize;
  double __pyx_v_x_min;
  double __pyx_v_x_max;
  double __pyx_v_y_min;
  double __pyx_v_y_max;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  size_t __pyx_v_vlen;
  int __pyx_v_n;
  double __pyx_v_r;
  double __pyx_v_g;
  double __pyx_v_b;
  __Pyx_memviewslice __pyx_v_inp = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  double __pyx_t_8;
  long __pyx_t_9;
  int __pyx_t_10;
  size_t __pyx_t_11;
  size_t __pyx_t_12;
  size_t __pyx_t_13;
  size_t __pyx_t_14;
  size_t __pyx_t_15;
  size_t __pyx_t_16;
  size_t __pyx_t_17;
  size_t __pyx_t_18;
  __Pyx_RefNannySetupContext("get_input", 0);
  __Pyx_TraceCall("get_input", __pyx_f[1], 664, 0, __PYX_ERR(1, 664, __pyx_L1_error));

  /* "world_cy.pyx":671
 *         cdef double r,g,b
 *         cdef double[:] inp
 *         xsize=snapshot.shape[0]             # <<<<<<<<<<<<<<
 *         ysize=snapshot.shape[1]
 *         x_min = self.pos[0] - (1 + 2 * self.alen) * ((vision_range - 1) / 2) - self.alen
 */
  __pyx_v_xsize = (__pyx_v_snapshot.shape[0]);

  /* "world_cy.pyx":672
 *         cdef double[:] inp
 *         xsize=snapshot.shape[0]
 *         ysize=snapshot.shape[1]             # <<<<<<<<<<<<<<
 *         x_min = self.pos[0] - (1 + 2 * self.alen) * ((vision_range - 1) / 2) - self.alen
 *         x_max = self.pos[0] + (1 + 2 * self.alen) * ((vision_range - 1) / 2) + self.alen
 */
  __pyx_v_ysize = (__pyx_v_snapshot.shape[1]);

  /* "world_cy.pyx":673
 *         xsize=snapshot.shape[0]
 *         ysize=snapshot.shape[1]
 *         x_min = self.pos[0] - (1 + 2 * self.alen) * ((vision_range - 1) / 2) - self.alen             # <<<<<<<<<<<<<<
 *         x_max = self.pos[0] + (1 + 2 * self.alen) * ((vision_range - 1) / 2) + self.alen
 *         y_min = self.pos[1] - (1 + 2 * self.alen) * ((vision_range - 1) / 2) - self.alen
 */
  __pyx_v_x_min = ((__pyx_v_self->pos.f0 - ((1 + (2 * __pyx_v_self->alen)) * __Pyx_div_long((__pyx_v_8world_cy_vision_range - 1), 2))) - __pyx_v_self->alen);

  /* "world_cy.pyx":674
 *         ysize=snapshot.shape[1]
 *         x_min = self.pos[0] - (1 + 2 * self.alen) * ((vision_range - 1) / 2) - self.alen
 *         x_max = self.pos[0] + (1 + 2 * self.alen) * ((vision_range - 1) / 2) + self.alen             # <<<<<<<<<<<<<<
 *         y_min = self.pos[1] - (1 + 2 * self.alen) * ((vision_range - 1) / 2) - self.alen
 *         y_max = self.pos[1] + (1 + 2 * self.alen) * ((vision_range - 1) / 2) + self.alen
 */
  __pyx_v_x_max = ((__pyx_v_self->pos.f0 + ((1 + (2 * __pyx_v_self->alen)) * __Pyx_div_long((__pyx_v_8world_cy_vision_range - 1), 2))) + __pyx_v_self->alen);

  /* "world_cy.pyx":675
 *         x_min = self.pos[0] - (1 + 2 * self.alen) * ((vision_range - 1) / 2) - self.alen
 *         x_max = self.pos[0] + (1 + 2 * self.alen) * ((vision_range - 1) / 2) + self.alen
 *         y_min = self.pos[1] - (1 + 2 * self.alen) * ((vision_range - 1) / 2) - self.alen             # <<<<<<<<<<<<<<
 *         y_max = self.pos[1] + (1 + 2 * self.alen) * ((vision_range - 1) / 2) + self.alen
 *         inp=cvarray(shape=(clear_idim,), itemsize=sizeof(double), format="d")
 */
  __pyx_v_y_min = ((__pyx_v_self->pos.f1 - ((1 + (2 * __pyx_v_self->alen)) * __Pyx_div_long((__pyx_v_8world_cy_vision_range - 1), 2))) - __pyx_v_self->alen);

  /* "world_cy.pyx":676
 *         x_max = self.pos[0] + (1 + 2 * self.alen) * ((vision_range - 1) / 2) + self.alen
 *         y_min = self.pos[1] - (1 + 2 * self.alen) * ((vision_range - 1) / 2) - self.alen
 *         y_max = self.pos[1] + (1 + 2 * self.alen) * ((vision_range - 1) / 2) + self.alen             # <<<<<<<<<<<<<<
 *         inp=cvarray(shape=(clear_idim,), itemsize=sizeof(double), format="d")
 *         vlen=<size_t>vision_len
 */
  __pyx_v_y_max = ((__pyx_v_self->pos.f1 + ((1 + (2 * __pyx_v_self->alen)) * __Pyx_div_long((__pyx_v_8world_cy_vision_range - 1), 2))) + __pyx_v_self->alen);

  /* "world_cy.pyx":677
 *         y_min = self.pos[1] - (1 + 2 * self.alen) * ((vision_range - 1) / 2) - self.alen
 *         y_max = self.pos[1] + (1 + 2 * self.alen) * ((vision_range - 1) / 2) + self.alen
 *         inp=cvarray(shape=(clear_idim,), itemsize=sizeof(double), format="d")             # <<<<<<<<<<<<<<
 *         vlen=<size_t>vision_len
 *         for i in range(vlen):
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_8world_cy_clear_idim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_3) < 0) __PYX_ERR(1, 677, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_3) < 0) __PYX_ERR(1, 677, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_d) < 0) __PYX_ERR(1, 677, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(1, 677, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_inp = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "world_cy.pyx":678
 *         y_max = self.pos[1] + (1 + 2 * self.alen) * ((vision_range - 1) / 2) + self.alen
 *         inp=cvarray(shape=(clear_idim,), itemsize=sizeof(double), format="d")
 *         vlen=<size_t>vision_len             # <<<<<<<<<<<<<<
 *         for i in range(vlen):
 *             x=<size_t>((<int>(x_min+i*(x_max-x_min)/(vision_len-1)))%xsize)
 */
  __pyx_v_vlen = ((size_t)__pyx_v_8world_cy_vision_len);

  /* "world_cy.pyx":679
 *         inp=cvarray(shape=(clear_idim,), itemsize=sizeof(double), format="d")
 *         vlen=<size_t>vision_len
 *         for i in range(vlen):             # <<<<<<<<<<<<<<
 *             x=<size_t>((<int>(x_min+i*(x_max-x_min)/(vision_len-1)))%xsize)
 *             for j in range(vlen):
 */
  __pyx_t_5 = __pyx_v_vlen;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "world_cy.pyx":680
 *         vlen=<size_t>vision_len
 *         for i in range(vlen):
 *             x=<size_t>((<int>(x_min+i*(x_max-x_min)/(vision_len-1)))%xsize)             # <<<<<<<<<<<<<<
 *             for j in range(vlen):
 *                 y=<size_t>((<int>(y_min+j*(y_max-y_min)/(vision_len-1)))%ysize)
 */
    __pyx_t_8 = (__pyx_v_i * (__pyx_v_x_max - __pyx_v_x_min));
    __pyx_t_9 = (__pyx_v_8world_cy_vision_len - 1);
    if (unlikely(__pyx_t_9 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(1, 680, __pyx_L1_error)
    }
    __pyx_t_10 = ((int)(__pyx_v_x_min + (__pyx_t_8 / __pyx_t_9)));
    if (unlikely(__pyx_v_xsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 680, __pyx_L1_error)
    }
    __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_10, __pyx_v_xsize));

    /* "world_cy.pyx":681
 *         for i in range(vlen):
 *             x=<size_t>((<int>(x_min+i*(x_max-x_min)/(vision_len-1)))%xsize)
 *             for j in range(vlen):             # <<<<<<<<<<<<<<
 *                 y=<size_t>((<int>(y_min+j*(y_max-y_min)/(vision_len-1)))%ysize)
 *                 n=snapshot[x,y]
 */
    __pyx_t_11 = __pyx_v_vlen;
    __pyx_t_12 = __pyx_t_11;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
      __pyx_v_j = __pyx_t_13;

      /* "world_cy.pyx":682
 *             x=<size_t>((<int>(x_min+i*(x_max-x_min)/(vision_len-1)))%xsize)
 *             for j in range(vlen):
 *                 y=<size_t>((<int>(y_min+j*(y_max-y_min)/(vision_len-1)))%ysize)             # <<<<<<<<<<<<<<
 *                 n=snapshot[x,y]
 *                 r=(<double>(n/256**2))/256
 */
      __pyx_t_8 = (__pyx_v_j * (__pyx_v_y_max - __pyx_v_y_min));
      __pyx_t_9 = (__pyx_v_8world_cy_vision_len - 1);
      if (unlikely(__pyx_t_9 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(1, 682, __pyx_L1_error)
      }
      __pyx_t_10 = ((int)(__pyx_v_y_min + (__pyx_t_8 / __pyx_t_9)));
      if (unlikely(__pyx_v_ysize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 682, __pyx_L1_error)
      }
      __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_10, __pyx_v_ysize));

      /* "world_cy.pyx":683
 *             for j in range(vlen):
 *                 y=<size_t>((<int>(y_min+j*(y_max-y_min)/(vision_len-1)))%ysize)
 *                 n=snapshot[x,y]             # <<<<<<<<<<<<<<
 *                 r=(<double>(n/256**2))/256
 *                 g=(<double>((n%256**2)/256))/256
 */
      __pyx_t_14 = __pyx_v_x;
      __pyx_t_15 = __pyx_v_y;
      __pyx_t_10 = -1;
      if (unlikely(__pyx_t_14 >= (size_t)__pyx_v_snapshot.shape[0])) __pyx_t_10 = 0;
      if (unlikely(__pyx_t_15 >= (size_t)__pyx_v_snapshot.shape[1])) __pyx_t_10 = 1;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(1, 683, __pyx_L1_error)
      }
      __pyx_v_n = (*((int *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_snapshot.data + __pyx_t_14 * __pyx_v_snapshot.strides[0]) ) + __pyx_t_15 * __pyx_v_snapshot.strides[1]) )));

      /* "world_cy.pyx":684
 *                 y=<size_t>((<int>(y_min+j*(y_max-y_min)/(vision_len-1)))%ysize)
 *                 n=snapshot[x,y]
 *                 r=(<double>(n/256**2))/256             # <<<<<<<<<<<<<<
 *                 g=(<double>((n%256**2)/256))/256
 *                 b=(<double>(n%256))/256
 */
      __pyx_v_r = (((double)__Pyx_div_long(__pyx_v_n, 0x10000)) / 256.0);

      /* "world_cy.pyx":685
 *                 n=snapshot[x,y]
 *                 r=(<double>(n/256**2))/256
 *                 g=(<double>((n%256**2)/256))/256             # <<<<<<<<<<<<<<
 *                 b=(<double>(n%256))/256
 *                 inp[i*vision_len+j]=r
 */
      __pyx_v_g = (((double)__Pyx_div_long(__Pyx_mod_long(__pyx_v_n, 0x10000), 0x100)) / 256.0);

      /* "world_cy.pyx":686
 *                 r=(<double>(n/256**2))/256
 *                 g=(<double>((n%256**2)/256))/256
 *                 b=(<double>(n%256))/256             # <<<<<<<<<<<<<<
 *                 inp[i*vision_len+j]=r
 *                 inp[vision_len**2+i*vision_len+j]=g
 */
      __pyx_v_b = (((double)__Pyx_mod_long(__pyx_v_n, 0x100)) / 256.0);

      /* "world_cy.pyx":687
 *                 g=(<double>((n%256**2)/256))/256
 *                 b=(<double>(n%256))/256
 *                 inp[i*vision_len+j]=r             # <<<<<<<<<<<<<<
 *                 inp[vision_len**2+i*vision_len+j]=g
 *                 inp[2*vision_len**2+i*vision_len+j]=b
 */
      __pyx_t_16 = ((__pyx_v_i * __pyx_v_8world_cy_vision_len) + __pyx_v_j);
      __pyx_t_10 = -1;
      if (unlikely(__pyx_t_16 >= (size_t)__pyx_v_inp.shape[0])) __pyx_t_10 = 0;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(1, 687, __pyx_L1_error)
      }
      *((double *) ( /* dim=0 */ (__pyx_v_inp.data + __pyx_t_16 * __pyx_v_inp.strides[0]) )) = __pyx_v_r;

      /* "world_cy.pyx":688
 *                 b=(<double>(n%256))/256
 *                 inp[i*vision_len+j]=r
 *                 inp[vision_len**2+i*vision_len+j]=g             # <<<<<<<<<<<<<<
 *                 inp[2*vision_len**2+i*vision_len+j]=b
 *         #print(inp[7*vision_len+7],inp[vision_len**2+7*vision_len+7],inp[2*vision_len**2+7*vision_len+7])
 */
      __pyx_t_17 = ((__Pyx_pow_long(((long)__pyx_v_8world_cy_vision_len), 2) + (__pyx_v_i * __pyx_v_8world_cy_vision_len)) + __pyx_v_j);
      __pyx_t_10 = -1;
      if (unlikely(__pyx_t_17 >= (size_t)__pyx_v_inp.shape[0])) __pyx_t_10 = 0;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(1, 688, __pyx_L1_error)
      }
      *((double *) ( /* dim=0 */ (__pyx_v_inp.data + __pyx_t_17 * __pyx_v_inp.strides[0]) )) = __pyx_v_g;

      /* "world_cy.pyx":689
 *                 inp[i*vision_len+j]=r
 *                 inp[vision_len**2+i*vision_len+j]=g
 *                 inp[2*vision_len**2+i*vision_len+j]=b             # <<<<<<<<<<<<<<
 *         #print(inp[7*vision_len+7],inp[vision_len**2+7*vision_len+7],inp[2*vision_len**2+7*vision_len+7])
 *         return inp
 */
      __pyx_t_18 = (((2 * __Pyx_pow_long(((long)__pyx_v_8world_cy_vision_len), 2)) + (__pyx_v_i * __pyx_v_8world_cy_vision_len)) + __pyx_v_j);
      __pyx_t_10 = -1;
      if (unlikely(__pyx_t_18 >= (size_t)__pyx_v_inp.shape[0])) __pyx_t_10 = 0;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(1, 689, __pyx_L1_error)
      }
      *((double *) ( /* dim=0 */ (__pyx_v_inp.data + __pyx_t_18 * __pyx_v_inp.strides[0]) )) = __pyx_v_b;
    }
  }

  /* "world_cy.pyx":691
 *                 inp[2*vision_len**2+i*vision_len+j]=b
 *         #print(inp[7*vision_len+7],inp[vision_len**2+7*vision_len+7],inp[2*vision_len**2+7*vision_len+7])
 *         return inp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __PYX_INC_MEMVIEW(&__pyx_v_inp, 0);
  __pyx_r = __pyx_v_inp;
  goto __pyx_L0;

  /* "world_cy.pyx":664
 *         return Minion(self.dna.merge(mi.dna))
 * 
 *     cdef double[:] get_input(self,int[:,:] snapshot):             # <<<<<<<<<<<<<<
 *         cdef int xsize,ysize
 *         cdef double x_min,x_max,y_min,y_max
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("world_cy.Minion.get_input", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_inp, 1);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_6Minion_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_6Minion_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_6Minion_28__reduce_cython__(((struct __pyx_obj_8world_cy_Minion *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_6Minion_28__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_Minion *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.Minion.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_6Minion_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8world_cy_6Minion_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_6Minion_30__setstate_cython__(((struct __pyx_obj_8world_cy_Minion *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_6Minion_30__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_Minion *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[0], 3, 0, __PYX_ERR(0, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.Minion.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":696
 * #--------------------------------------------------------------
 * cdef class MinionDLLNode():
 *     def __cinit__(self,MinionDLL dll,Minion mi,MinionDLLNode prev,MinionDLLNode next):             # <<<<<<<<<<<<<<
 *         self.mi=mi
 *         self.prev=prev
 */

/* Python wrapper */
static int __pyx_pw_8world_cy_13MinionDLLNode_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8world_cy_13MinionDLLNode_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_dll = 0;
  struct __pyx_obj_8world_cy_Minion *__pyx_v_mi = 0;
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_prev = 0;
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_next = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dll,&__pyx_n_s_mi,&__pyx_n_s_prev,&__pyx_n_s_next,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dll)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 1); __PYX_ERR(1, 696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prev)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 2); __PYX_ERR(1, 696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_next)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 3); __PYX_ERR(1, 696, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 696, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_dll = ((struct __pyx_obj_8world_cy_MinionDLL *)values[0]);
    __pyx_v_mi = ((struct __pyx_obj_8world_cy_Minion *)values[1]);
    __pyx_v_prev = ((struct __pyx_obj_8world_cy_MinionDLLNode *)values[2]);
    __pyx_v_next = ((struct __pyx_obj_8world_cy_MinionDLLNode *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 696, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.MinionDLLNode.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dll), __pyx_ptype_8world_cy_MinionDLL, 1, "dll", 0))) __PYX_ERR(1, 696, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mi), __pyx_ptype_8world_cy_Minion, 1, "mi", 0))) __PYX_ERR(1, 696, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prev), __pyx_ptype_8world_cy_MinionDLLNode, 1, "prev", 0))) __PYX_ERR(1, 696, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_next), __pyx_ptype_8world_cy_MinionDLLNode, 1, "next", 0))) __PYX_ERR(1, 696, __pyx_L1_error)
  __pyx_r = __pyx_pf_8world_cy_13MinionDLLNode___cinit__(((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_v_self), __pyx_v_dll, __pyx_v_mi, __pyx_v_prev, __pyx_v_next);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8world_cy_13MinionDLLNode___cinit__(struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_self, struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_dll, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_prev, struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_next) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[1], 696, 0, __PYX_ERR(1, 696, __pyx_L1_error));

  /* "world_cy.pyx":697
 * cdef class MinionDLLNode():
 *     def __cinit__(self,MinionDLL dll,Minion mi,MinionDLLNode prev,MinionDLLNode next):
 *         self.mi=mi             # <<<<<<<<<<<<<<
 *         self.prev=prev
 *         self.next=next
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_mi));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_mi));
  __Pyx_GOTREF(__pyx_v_self->mi);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mi));
  __pyx_v_self->mi = __pyx_v_mi;

  /* "world_cy.pyx":698
 *     def __cinit__(self,MinionDLL dll,Minion mi,MinionDLLNode prev,MinionDLLNode next):
 *         self.mi=mi
 *         self.prev=prev             # <<<<<<<<<<<<<<
 *         self.next=next
 *         if next==None:
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_prev));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_prev));
  __Pyx_GOTREF(__pyx_v_self->prev);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->prev));
  __pyx_v_self->prev = __pyx_v_prev;

  /* "world_cy.pyx":699
 *         self.mi=mi
 *         self.prev=prev
 *         self.next=next             # <<<<<<<<<<<<<<
 *         if next==None:
 *             self.is_tail=True
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_next));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_next));
  __Pyx_GOTREF(__pyx_v_self->next);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->next));
  __pyx_v_self->next = __pyx_v_next;

  /* "world_cy.pyx":700
 *         self.prev=prev
 *         self.next=next
 *         if next==None:             # <<<<<<<<<<<<<<
 *             self.is_tail=True
 *         else:
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_next), Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 700, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 700, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "world_cy.pyx":701
 *         self.next=next
 *         if next==None:
 *             self.is_tail=True             # <<<<<<<<<<<<<<
 *         else:
 *             self.is_tail=False
 */
    __pyx_v_self->is_tail = 1;

    /* "world_cy.pyx":700
 *         self.prev=prev
 *         self.next=next
 *         if next==None:             # <<<<<<<<<<<<<<
 *             self.is_tail=True
 *         else:
 */
    goto __pyx_L3;
  }

  /* "world_cy.pyx":703
 *             self.is_tail=True
 *         else:
 *             self.is_tail=False             # <<<<<<<<<<<<<<
 *         self.dll=dll
 *     def get_mi(self):
 */
  /*else*/ {
    __pyx_v_self->is_tail = 0;
  }
  __pyx_L3:;

  /* "world_cy.pyx":704
 *         else:
 *             self.is_tail=False
 *         self.dll=dll             # <<<<<<<<<<<<<<
 *     def get_mi(self):
 *         return self.mi
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_dll));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_dll));
  __Pyx_GOTREF(__pyx_v_self->dll);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->dll));
  __pyx_v_self->dll = __pyx_v_dll;

  /* "world_cy.pyx":696
 * #--------------------------------------------------------------
 * cdef class MinionDLLNode():
 *     def __cinit__(self,MinionDLL dll,Minion mi,MinionDLLNode prev,MinionDLLNode next):             # <<<<<<<<<<<<<<
 *         self.mi=mi
 *         self.prev=prev
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.MinionDLLNode.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":705
 *             self.is_tail=False
 *         self.dll=dll
 *     def get_mi(self):             # <<<<<<<<<<<<<<
 *         return self.mi
 * def dll_from_list(mi_list):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_13MinionDLLNode_3get_mi(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_13MinionDLLNode_3get_mi(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mi (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_13MinionDLLNode_2get_mi(((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_13MinionDLLNode_2get_mi(struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mi", 0);
  __Pyx_TraceCall("get_mi", __pyx_f[1], 705, 0, __PYX_ERR(1, 705, __pyx_L1_error));

  /* "world_cy.pyx":706
 *         self.dll=dll
 *     def get_mi(self):
 *         return self.mi             # <<<<<<<<<<<<<<
 * def dll_from_list(mi_list):
 *     dll=MinionDLL()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mi));
  __pyx_r = ((PyObject *)__pyx_v_self->mi);
  goto __pyx_L0;

  /* "world_cy.pyx":705
 *             self.is_tail=False
 *         self.dll=dll
 *     def get_mi(self):             # <<<<<<<<<<<<<<
 *         return self.mi
 * def dll_from_list(mi_list):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.MinionDLLNode.get_mi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_13MinionDLLNode_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_13MinionDLLNode_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_13MinionDLLNode_4__reduce_cython__(((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_13MinionDLLNode_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.MinionDLLNode.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_13MinionDLLNode_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8world_cy_13MinionDLLNode_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_13MinionDLLNode_6__setstate_cython__(((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_13MinionDLLNode_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[0], 3, 0, __PYX_ERR(0, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.MinionDLLNode.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":707
 *     def get_mi(self):
 *         return self.mi
 * def dll_from_list(mi_list):             # <<<<<<<<<<<<<<
 *     dll=MinionDLL()
 *     for mi in mi_list:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_21dll_from_list(PyObject *__pyx_self, PyObject *__pyx_v_mi_list); /*proto*/
static PyMethodDef __pyx_mdef_8world_cy_21dll_from_list = {"dll_from_list", (PyCFunction)__pyx_pw_8world_cy_21dll_from_list, METH_O, 0};
static PyObject *__pyx_pw_8world_cy_21dll_from_list(PyObject *__pyx_self, PyObject *__pyx_v_mi_list) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dll_from_list (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_20dll_from_list(__pyx_self, ((PyObject *)__pyx_v_mi_list));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_20dll_from_list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_mi_list) {
  struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_dll = NULL;
  PyObject *__pyx_v_mi = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__28)
  __Pyx_RefNannySetupContext("dll_from_list", 0);
  __Pyx_TraceCall("dll_from_list", __pyx_f[1], 707, 0, __PYX_ERR(1, 707, __pyx_L1_error));

  /* "world_cy.pyx":708
 *         return self.mi
 * def dll_from_list(mi_list):
 *     dll=MinionDLL()             # <<<<<<<<<<<<<<
 *     for mi in mi_list:
 *         dll.push_py(mi)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8world_cy_MinionDLL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dll = ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "world_cy.pyx":709
 * def dll_from_list(mi_list):
 *     dll=MinionDLL()
 *     for mi in mi_list:             # <<<<<<<<<<<<<<
 *         dll.push_py(mi)
 *     return dll
 */
  if (likely(PyList_CheckExact(__pyx_v_mi_list)) || PyTuple_CheckExact(__pyx_v_mi_list)) {
    __pyx_t_1 = __pyx_v_mi_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_mi_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 709, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 709, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 709, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 709, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 709, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 709, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 709, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_mi, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "world_cy.pyx":710
 *     dll=MinionDLL()
 *     for mi in mi_list:
 *         dll.push_py(mi)             # <<<<<<<<<<<<<<
 *     return dll
 * cdef class MinionDLL():
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_dll), __pyx_n_s_push_py); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 710, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_mi) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_mi);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 710, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "world_cy.pyx":709
 * def dll_from_list(mi_list):
 *     dll=MinionDLL()
 *     for mi in mi_list:             # <<<<<<<<<<<<<<
 *         dll.push_py(mi)
 *     return dll
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "world_cy.pyx":711
 *     for mi in mi_list:
 *         dll.push_py(mi)
 *     return dll             # <<<<<<<<<<<<<<
 * cdef class MinionDLL():
 *     def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_dll));
  __pyx_r = ((PyObject *)__pyx_v_dll);
  goto __pyx_L0;

  /* "world_cy.pyx":707
 *     def get_mi(self):
 *         return self.mi
 * def dll_from_list(mi_list):             # <<<<<<<<<<<<<<
 *     dll=MinionDLL()
 *     for mi in mi_list:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("world_cy.dll_from_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dll);
  __Pyx_XDECREF(__pyx_v_mi);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":713
 *     return dll
 * cdef class MinionDLL():
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.len=0
 *         self.head=None
 */

/* Python wrapper */
static int __pyx_pw_8world_cy_9MinionDLL_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8world_cy_9MinionDLL_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8world_cy_9MinionDLL___cinit__(((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8world_cy_9MinionDLL___cinit__(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[1], 713, 0, __PYX_ERR(1, 713, __pyx_L1_error));

  /* "world_cy.pyx":714
 * cdef class MinionDLL():
 *     def __cinit__(self):
 *         self.len=0             # <<<<<<<<<<<<<<
 *         self.head=None
 *         self.tail=None
 */
  __pyx_v_self->len = 0;

  /* "world_cy.pyx":715
 *     def __cinit__(self):
 *         self.len=0
 *         self.head=None             # <<<<<<<<<<<<<<
 *         self.tail=None
 *         self.current=None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->head);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->head));
  __pyx_v_self->head = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None);

  /* "world_cy.pyx":716
 *         self.len=0
 *         self.head=None
 *         self.tail=None             # <<<<<<<<<<<<<<
 *         self.current=None
 *     def is_empty(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->tail);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tail));
  __pyx_v_self->tail = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None);

  /* "world_cy.pyx":717
 *         self.head=None
 *         self.tail=None
 *         self.current=None             # <<<<<<<<<<<<<<
 *     def is_empty(self):
 *         return self.len==0
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->current);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->current));
  __pyx_v_self->current = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None);

  /* "world_cy.pyx":713
 *     return dll
 * cdef class MinionDLL():
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.len=0
 *         self.head=None
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.MinionDLL.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":718
 *         self.tail=None
 *         self.current=None
 *     def is_empty(self):             # <<<<<<<<<<<<<<
 *         return self.len==0
 *     def push_py(self,mi):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9MinionDLL_3is_empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_9MinionDLL_3is_empty(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_empty (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9MinionDLL_2is_empty(((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9MinionDLL_2is_empty(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_empty", 0);
  __Pyx_TraceCall("is_empty", __pyx_f[1], 718, 0, __PYX_ERR(1, 718, __pyx_L1_error));

  /* "world_cy.pyx":719
 *         self.current=None
 *     def is_empty(self):
 *         return self.len==0             # <<<<<<<<<<<<<<
 *     def push_py(self,mi):
 *         self.push(mi)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->len == 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":718
 *         self.tail=None
 *         self.current=None
 *     def is_empty(self):             # <<<<<<<<<<<<<<
 *         return self.len==0
 *     def push_py(self,mi):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.MinionDLL.is_empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":720
 *     def is_empty(self):
 *         return self.len==0
 *     def push_py(self,mi):             # <<<<<<<<<<<<<<
 *         self.push(mi)
 *     def remove_py(self,mi):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9MinionDLL_5push_py(PyObject *__pyx_v_self, PyObject *__pyx_v_mi); /*proto*/
static PyObject *__pyx_pw_8world_cy_9MinionDLL_5push_py(PyObject *__pyx_v_self, PyObject *__pyx_v_mi) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("push_py (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9MinionDLL_4push_py(((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_v_self), ((PyObject *)__pyx_v_mi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9MinionDLL_4push_py(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, PyObject *__pyx_v_mi) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("push_py", 0);
  __Pyx_TraceCall("push_py", __pyx_f[1], 720, 0, __PYX_ERR(1, 720, __pyx_L1_error));

  /* "world_cy.pyx":721
 *         return self.len==0
 *     def push_py(self,mi):
 *         self.push(mi)             # <<<<<<<<<<<<<<
 *     def remove_py(self,mi):
 *         self.remove_by_search(mi)
 */
  if (!(likely(((__pyx_v_mi) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_mi, __pyx_ptype_8world_cy_Minion))))) __PYX_ERR(1, 721, __pyx_L1_error)
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->__pyx_vtab)->push(__pyx_v_self, ((struct __pyx_obj_8world_cy_Minion *)__pyx_v_mi))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "world_cy.pyx":720
 *     def is_empty(self):
 *         return self.len==0
 *     def push_py(self,mi):             # <<<<<<<<<<<<<<
 *         self.push(mi)
 *     def remove_py(self,mi):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.MinionDLL.push_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":722
 *     def push_py(self,mi):
 *         self.push(mi)
 *     def remove_py(self,mi):             # <<<<<<<<<<<<<<
 *         self.remove_by_search(mi)
 *     def contains_py(self,mi):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9MinionDLL_7remove_py(PyObject *__pyx_v_self, PyObject *__pyx_v_mi); /*proto*/
static PyObject *__pyx_pw_8world_cy_9MinionDLL_7remove_py(PyObject *__pyx_v_self, PyObject *__pyx_v_mi) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_py (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9MinionDLL_6remove_py(((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_v_self), ((PyObject *)__pyx_v_mi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9MinionDLL_6remove_py(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, PyObject *__pyx_v_mi) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_py", 0);
  __Pyx_TraceCall("remove_py", __pyx_f[1], 722, 0, __PYX_ERR(1, 722, __pyx_L1_error));

  /* "world_cy.pyx":723
 *         self.push(mi)
 *     def remove_py(self,mi):
 *         self.remove_by_search(mi)             # <<<<<<<<<<<<<<
 *     def contains_py(self,mi):
 *         return self.contains(mi)
 */
  if (!(likely(((__pyx_v_mi) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_mi, __pyx_ptype_8world_cy_Minion))))) __PYX_ERR(1, 723, __pyx_L1_error)
  ((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->__pyx_vtab)->remove_by_search(__pyx_v_self, ((struct __pyx_obj_8world_cy_Minion *)__pyx_v_mi));

  /* "world_cy.pyx":722
 *     def push_py(self,mi):
 *         self.push(mi)
 *     def remove_py(self,mi):             # <<<<<<<<<<<<<<
 *         self.remove_by_search(mi)
 *     def contains_py(self,mi):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.MinionDLL.remove_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":724
 *     def remove_py(self,mi):
 *         self.remove_by_search(mi)
 *     def contains_py(self,mi):             # <<<<<<<<<<<<<<
 *         return self.contains(mi)
 *     def get_nth_py(self,n):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9MinionDLL_9contains_py(PyObject *__pyx_v_self, PyObject *__pyx_v_mi); /*proto*/
static PyObject *__pyx_pw_8world_cy_9MinionDLL_9contains_py(PyObject *__pyx_v_self, PyObject *__pyx_v_mi) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("contains_py (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9MinionDLL_8contains_py(((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_v_self), ((PyObject *)__pyx_v_mi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9MinionDLL_8contains_py(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, PyObject *__pyx_v_mi) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("contains_py", 0);
  __Pyx_TraceCall("contains_py", __pyx_f[1], 724, 0, __PYX_ERR(1, 724, __pyx_L1_error));

  /* "world_cy.pyx":725
 *         self.remove_by_search(mi)
 *     def contains_py(self,mi):
 *         return self.contains(mi)             # <<<<<<<<<<<<<<
 *     def get_nth_py(self,n):
 *         if self.len<=n:
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(((__pyx_v_mi) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_mi, __pyx_ptype_8world_cy_Minion))))) __PYX_ERR(1, 725, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->__pyx_vtab)->contains(__pyx_v_self, ((struct __pyx_obj_8world_cy_Minion *)__pyx_v_mi))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":724
 *     def remove_py(self,mi):
 *         self.remove_by_search(mi)
 *     def contains_py(self,mi):             # <<<<<<<<<<<<<<
 *         return self.contains(mi)
 *     def get_nth_py(self,n):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.MinionDLL.contains_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":726
 *     def contains_py(self,mi):
 *         return self.contains(mi)
 *     def get_nth_py(self,n):             # <<<<<<<<<<<<<<
 *         if self.len<=n:
 *             raise Exception("MinionDLL out of range!!")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9MinionDLL_11get_nth_py(PyObject *__pyx_v_self, PyObject *__pyx_v_n); /*proto*/
static PyObject *__pyx_pw_8world_cy_9MinionDLL_11get_nth_py(PyObject *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_nth_py (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9MinionDLL_10get_nth_py(((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_v_self), ((PyObject *)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9MinionDLL_10get_nth_py(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, PyObject *__pyx_v_n) {
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  __Pyx_RefNannySetupContext("get_nth_py", 0);
  __Pyx_TraceCall("get_nth_py", __pyx_f[1], 726, 0, __PYX_ERR(1, 726, __pyx_L1_error));

  /* "world_cy.pyx":727
 *         return self.contains(mi)
 *     def get_nth_py(self,n):
 *         if self.len<=n:             # <<<<<<<<<<<<<<
 *             raise Exception("MinionDLL out of range!!")
 *         node=self.head
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->len); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_n, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 727, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 727, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "world_cy.pyx":728
 *     def get_nth_py(self,n):
 *         if self.len<=n:
 *             raise Exception("MinionDLL out of range!!")             # <<<<<<<<<<<<<<
 *         node=self.head
 *         if n==0:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 728, __pyx_L1_error)

    /* "world_cy.pyx":727
 *         return self.contains(mi)
 *     def get_nth_py(self,n):
 *         if self.len<=n:             # <<<<<<<<<<<<<<
 *             raise Exception("MinionDLL out of range!!")
 *         node=self.head
 */
  }

  /* "world_cy.pyx":729
 *         if self.len<=n:
 *             raise Exception("MinionDLL out of range!!")
 *         node=self.head             # <<<<<<<<<<<<<<
 *         if n==0:
 *             return node.get_mi()
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->head);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "world_cy.pyx":730
 *             raise Exception("MinionDLL out of range!!")
 *         node=self.head
 *         if n==0:             # <<<<<<<<<<<<<<
 *             return node.get_mi()
 *         for _ in range(n-1):
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_n, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 730, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "world_cy.pyx":731
 *         node=self.head
 *         if n==0:
 *             return node.get_mi()             # <<<<<<<<<<<<<<
 *         for _ in range(n-1):
 *             node=self.next(node)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_node), __pyx_n_s_get_mi); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "world_cy.pyx":730
 *             raise Exception("MinionDLL out of range!!")
 *         node=self.head
 *         if n==0:             # <<<<<<<<<<<<<<
 *             return node.get_mi()
 *         for _ in range(n-1):
 */
  }

  /* "world_cy.pyx":732
 *         if n==0:
 *             return node.get_mi()
 *         for _ in range(n-1):             # <<<<<<<<<<<<<<
 *             node=self.next(node)
 *         return node.get_mi()
 */
  __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_n, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 732, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 732, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 732, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 732, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 732, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 732, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "world_cy.pyx":733
 *             return node.get_mi()
 *         for _ in range(n-1):
 *             node=self.next(node)             # <<<<<<<<<<<<<<
 *         return node.get_mi()
 *     def __iter__(self):
 */
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->__pyx_vtab)->next(__pyx_v_self, __pyx_v_node)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "world_cy.pyx":732
 *         if n==0:
 *             return node.get_mi()
 *         for _ in range(n-1):             # <<<<<<<<<<<<<<
 *             node=self.next(node)
 *         return node.get_mi()
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":734
 *         for _ in range(n-1):
 *             node=self.next(node)
 *         return node.get_mi()             # <<<<<<<<<<<<<<
 *     def __iter__(self):
 *         self.current=self.head
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_node), __pyx_n_s_get_mi); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":726
 *     def contains_py(self,mi):
 *         return self.contains(mi)
 *     def get_nth_py(self,n):             # <<<<<<<<<<<<<<
 *         if self.len<=n:
 *             raise Exception("MinionDLL out of range!!")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("world_cy.MinionDLL.get_nth_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":735
 *             node=self.next(node)
 *         return node.get_mi()
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         self.current=self.head
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9MinionDLL_13__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8world_cy_9MinionDLL_13__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9MinionDLL_12__iter__(((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9MinionDLL_12__iter__(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __Pyx_TraceCall("__iter__", __pyx_f[1], 735, 0, __PYX_ERR(1, 735, __pyx_L1_error));

  /* "world_cy.pyx":736
 *         return node.get_mi()
 *     def __iter__(self):
 *         self.current=self.head             # <<<<<<<<<<<<<<
 *         return self
 *     def __next__(self):
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->head);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->current);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->current));
  __pyx_v_self->current = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "world_cy.pyx":737
 *     def __iter__(self):
 *         self.current=self.head
 *         return self             # <<<<<<<<<<<<<<
 *     def __next__(self):
 *         if self.current==None:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "world_cy.pyx":735
 *             node=self.next(node)
 *         return node.get_mi()
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         self.current=self.head
 *         return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.MinionDLL.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":738
 *         self.current=self.head
 *         return self
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self.current==None:
 *             raise StopIteration
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9MinionDLL_15__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8world_cy_9MinionDLL_15__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9MinionDLL_14__next__(((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9MinionDLL_14__next__(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self) {
  PyObject *__pyx_v_mi = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__next__", 0);
  __Pyx_TraceCall("__next__", __pyx_f[1], 738, 0, __PYX_ERR(1, 738, __pyx_L1_error));

  /* "world_cy.pyx":739
 *         return self
 *     def __next__(self):
 *         if self.current==None:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         mi=self.current.get_mi()
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->current), Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 739, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 739, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "world_cy.pyx":740
 *     def __next__(self):
 *         if self.current==None:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         mi=self.current.get_mi()
 *         self.current=self.next(self.current)
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    __PYX_ERR(1, 740, __pyx_L1_error)

    /* "world_cy.pyx":739
 *         return self
 *     def __next__(self):
 *         if self.current==None:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         mi=self.current.get_mi()
 */
  }

  /* "world_cy.pyx":741
 *         if self.current==None:
 *             raise StopIteration
 *         mi=self.current.get_mi()             # <<<<<<<<<<<<<<
 *         self.current=self.next(self.current)
 *         return mi
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->current), __pyx_n_s_get_mi); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_mi = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "world_cy.pyx":742
 *             raise StopIteration
 *         mi=self.current.get_mi()
 *         self.current=self.next(self.current)             # <<<<<<<<<<<<<<
 *         return mi
 *     cdef MinionDLLNode prev(self,MinionDLLNode node):
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->current);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->__pyx_vtab)->next(__pyx_v_self, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_1))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->current);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->current));
  __pyx_v_self->current = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "world_cy.pyx":743
 *         mi=self.current.get_mi()
 *         self.current=self.next(self.current)
 *         return mi             # <<<<<<<<<<<<<<
 *     cdef MinionDLLNode prev(self,MinionDLLNode node):
 *         return node.prev
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_mi);
  __pyx_r = __pyx_v_mi;
  goto __pyx_L0;

  /* "world_cy.pyx":738
 *         self.current=self.head
 *         return self
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self.current==None:
 *             raise StopIteration
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("world_cy.MinionDLL.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_mi);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":744
 *         self.current=self.next(self.current)
 *         return mi
 *     cdef MinionDLLNode prev(self,MinionDLLNode node):             # <<<<<<<<<<<<<<
 *         return node.prev
 *     cdef MinionDLLNode next(self,MinionDLLNode node):
 */

static struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_f_8world_cy_9MinionDLL_prev(CYTHON_UNUSED struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node) {
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prev", 0);
  __Pyx_TraceCall("prev", __pyx_f[1], 744, 0, __PYX_ERR(1, 744, __pyx_L1_error));

  /* "world_cy.pyx":745
 *         return mi
 *     cdef MinionDLLNode prev(self,MinionDLLNode node):
 *         return node.prev             # <<<<<<<<<<<<<<
 *     cdef MinionDLLNode next(self,MinionDLLNode node):
 *         return node.next
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_node->prev));
  __pyx_r = __pyx_v_node->prev;
  goto __pyx_L0;

  /* "world_cy.pyx":744
 *         self.current=self.next(self.current)
 *         return mi
 *     cdef MinionDLLNode prev(self,MinionDLLNode node):             # <<<<<<<<<<<<<<
 *         return node.prev
 *     cdef MinionDLLNode next(self,MinionDLLNode node):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.MinionDLL.prev", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":746
 *     cdef MinionDLLNode prev(self,MinionDLLNode node):
 *         return node.prev
 *     cdef MinionDLLNode next(self,MinionDLLNode node):             # <<<<<<<<<<<<<<
 *         return node.next
 *     cdef MinionDLLNode push(self,Minion mi):
 */

static struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_f_8world_cy_9MinionDLL_next(CYTHON_UNUSED struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node) {
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("next", 0);
  __Pyx_TraceCall("next", __pyx_f[1], 746, 0, __PYX_ERR(1, 746, __pyx_L1_error));

  /* "world_cy.pyx":747
 *         return node.prev
 *     cdef MinionDLLNode next(self,MinionDLLNode node):
 *         return node.next             # <<<<<<<<<<<<<<
 *     cdef MinionDLLNode push(self,Minion mi):
 *         cdef MinionDLLNode node,current_tail
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_node->next));
  __pyx_r = __pyx_v_node->next;
  goto __pyx_L0;

  /* "world_cy.pyx":746
 *     cdef MinionDLLNode prev(self,MinionDLLNode node):
 *         return node.prev
 *     cdef MinionDLLNode next(self,MinionDLLNode node):             # <<<<<<<<<<<<<<
 *         return node.next
 *     cdef MinionDLLNode push(self,Minion mi):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.MinionDLL.next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":748
 *     cdef MinionDLLNode next(self,MinionDLLNode node):
 *         return node.next
 *     cdef MinionDLLNode push(self,Minion mi):             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode node,current_tail
 *         if self.len==0:
 */

static struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_f_8world_cy_9MinionDLL_push(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi) {
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_current_tail = 0;
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("push", 0);
  __Pyx_TraceCall("push", __pyx_f[1], 748, 0, __PYX_ERR(1, 748, __pyx_L1_error));

  /* "world_cy.pyx":750
 *     cdef MinionDLLNode push(self,Minion mi):
 *         cdef MinionDLLNode node,current_tail
 *         if self.len==0:             # <<<<<<<<<<<<<<
 *             node=MinionDLLNode(self,mi,None,None)
 *             self.head=node
 */
  __pyx_t_1 = ((__pyx_v_self->len == 0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":751
 *         cdef MinionDLLNode node,current_tail
 *         if self.len==0:
 *             node=MinionDLLNode(self,mi,None,None)             # <<<<<<<<<<<<<<
 *             self.head=node
 *             self.tail=node
 */
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(((PyObject *)__pyx_v_mi));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_mi));
    PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_mi));
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 3, Py_None);
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8world_cy_MinionDLLNode), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "world_cy.pyx":752
 *         if self.len==0:
 *             node=MinionDLLNode(self,mi,None,None)
 *             self.head=node             # <<<<<<<<<<<<<<
 *             self.tail=node
 *             self.len=1
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_node));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_node));
    __Pyx_GOTREF(__pyx_v_self->head);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->head));
    __pyx_v_self->head = __pyx_v_node;

    /* "world_cy.pyx":753
 *             node=MinionDLLNode(self,mi,None,None)
 *             self.head=node
 *             self.tail=node             # <<<<<<<<<<<<<<
 *             self.len=1
 *             return
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_node));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_node));
    __Pyx_GOTREF(__pyx_v_self->tail);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->tail));
    __pyx_v_self->tail = __pyx_v_node;

    /* "world_cy.pyx":754
 *             self.head=node
 *             self.tail=node
 *             self.len=1             # <<<<<<<<<<<<<<
 *             return
 *         current_tail=self.tail
 */
    __pyx_v_self->len = 1;

    /* "world_cy.pyx":755
 *             self.tail=node
 *             self.len=1
 *             return             # <<<<<<<<<<<<<<
 *         current_tail=self.tail
 *         node=MinionDLLNode(self,mi,current_tail,None)
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_r = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None); __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "world_cy.pyx":750
 *     cdef MinionDLLNode push(self,Minion mi):
 *         cdef MinionDLLNode node,current_tail
 *         if self.len==0:             # <<<<<<<<<<<<<<
 *             node=MinionDLLNode(self,mi,None,None)
 *             self.head=node
 */
  }

  /* "world_cy.pyx":756
 *             self.len=1
 *             return
 *         current_tail=self.tail             # <<<<<<<<<<<<<<
 *         node=MinionDLLNode(self,mi,current_tail,None)
 *         current_tail.next=node
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->tail);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_current_tail = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "world_cy.pyx":757
 *             return
 *         current_tail=self.tail
 *         node=MinionDLLNode(self,mi,current_tail,None)             # <<<<<<<<<<<<<<
 *         current_tail.next=node
 *         current_tail.is_tail=False
 */
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_INCREF(((PyObject *)__pyx_v_mi));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_mi));
  PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_mi));
  __Pyx_INCREF(((PyObject *)__pyx_v_current_tail));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_current_tail));
  PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_current_tail));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 3, Py_None);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8world_cy_MinionDLLNode), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "world_cy.pyx":758
 *         current_tail=self.tail
 *         node=MinionDLLNode(self,mi,current_tail,None)
 *         current_tail.next=node             # <<<<<<<<<<<<<<
 *         current_tail.is_tail=False
 *         self.tail=node
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_node));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_node));
  __Pyx_GOTREF(__pyx_v_current_tail->next);
  __Pyx_DECREF(((PyObject *)__pyx_v_current_tail->next));
  __pyx_v_current_tail->next = __pyx_v_node;

  /* "world_cy.pyx":759
 *         node=MinionDLLNode(self,mi,current_tail,None)
 *         current_tail.next=node
 *         current_tail.is_tail=False             # <<<<<<<<<<<<<<
 *         self.tail=node
 *         self.len+=1
 */
  __pyx_v_current_tail->is_tail = 0;

  /* "world_cy.pyx":760
 *         current_tail.next=node
 *         current_tail.is_tail=False
 *         self.tail=node             # <<<<<<<<<<<<<<
 *         self.len+=1
 *         return node
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_node));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_node));
  __Pyx_GOTREF(__pyx_v_self->tail);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->tail));
  __pyx_v_self->tail = __pyx_v_node;

  /* "world_cy.pyx":761
 *         current_tail.is_tail=False
 *         self.tail=node
 *         self.len+=1             # <<<<<<<<<<<<<<
 *         return node
 *     cdef MinionDLLNode remove_and_get_next(self,MinionDLLNode node):
 */
  __pyx_v_self->len = (__pyx_v_self->len + 1);

  /* "world_cy.pyx":762
 *         self.tail=node
 *         self.len+=1
 *         return node             # <<<<<<<<<<<<<<
 *     cdef MinionDLLNode remove_and_get_next(self,MinionDLLNode node):
 *         cdef MinionDLLNode prev,next
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_node));
  __pyx_r = __pyx_v_node;
  goto __pyx_L0;

  /* "world_cy.pyx":748
 *     cdef MinionDLLNode next(self,MinionDLLNode node):
 *         return node.next
 *     cdef MinionDLLNode push(self,Minion mi):             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode node,current_tail
 *         if self.len==0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("world_cy.MinionDLL.push", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_current_tail);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":763
 *         self.len+=1
 *         return node
 *     cdef MinionDLLNode remove_and_get_next(self,MinionDLLNode node):             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode prev,next
 *         if self.head==node:
 */

static struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_f_8world_cy_9MinionDLL_remove_and_get_next(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node) {
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_prev = 0;
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_next = 0;
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("remove_and_get_next", 0);
  __Pyx_TraceCall("remove_and_get_next", __pyx_f[1], 763, 0, __PYX_ERR(1, 763, __pyx_L1_error));

  /* "world_cy.pyx":765
 *     cdef MinionDLLNode remove_and_get_next(self,MinionDLLNode node):
 *         cdef MinionDLLNode prev,next
 *         if self.head==node:             # <<<<<<<<<<<<<<
 *             if self.len==1:
 *                 self.head=None
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->head), ((PyObject *)__pyx_v_node), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 765, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 765, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "world_cy.pyx":766
 *         cdef MinionDLLNode prev,next
 *         if self.head==node:
 *             if self.len==1:             # <<<<<<<<<<<<<<
 *                 self.head=None
 *                 self.tail=None
 */
    __pyx_t_2 = ((__pyx_v_self->len == 1) != 0);
    if (__pyx_t_2) {

      /* "world_cy.pyx":767
 *         if self.head==node:
 *             if self.len==1:
 *                 self.head=None             # <<<<<<<<<<<<<<
 *                 self.tail=None
 *                 self.len=0
 */
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      __Pyx_GOTREF(__pyx_v_self->head);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->head));
      __pyx_v_self->head = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None);

      /* "world_cy.pyx":768
 *             if self.len==1:
 *                 self.head=None
 *                 self.tail=None             # <<<<<<<<<<<<<<
 *                 self.len=0
 *                 return None
 */
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      __Pyx_GOTREF(__pyx_v_self->tail);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->tail));
      __pyx_v_self->tail = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None);

      /* "world_cy.pyx":769
 *                 self.head=None
 *                 self.tail=None
 *                 self.len=0             # <<<<<<<<<<<<<<
 *                 return None
 *             next=self.next(node)
 */
      __pyx_v_self->len = 0;

      /* "world_cy.pyx":770
 *                 self.tail=None
 *                 self.len=0
 *                 return None             # <<<<<<<<<<<<<<
 *             next=self.next(node)
 *             next.prev=None
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_r = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None); __Pyx_INCREF(Py_None);
      goto __pyx_L0;

      /* "world_cy.pyx":766
 *         cdef MinionDLLNode prev,next
 *         if self.head==node:
 *             if self.len==1:             # <<<<<<<<<<<<<<
 *                 self.head=None
 *                 self.tail=None
 */
    }

    /* "world_cy.pyx":771
 *                 self.len=0
 *                 return None
 *             next=self.next(node)             # <<<<<<<<<<<<<<
 *             next.prev=None
 *             self.head=next
 */
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->__pyx_vtab)->next(__pyx_v_self, __pyx_v_node)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_next = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "world_cy.pyx":772
 *                 return None
 *             next=self.next(node)
 *             next.prev=None             # <<<<<<<<<<<<<<
 *             self.head=next
 *             self.len-=1
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_next->prev);
    __Pyx_DECREF(((PyObject *)__pyx_v_next->prev));
    __pyx_v_next->prev = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None);

    /* "world_cy.pyx":773
 *             next=self.next(node)
 *             next.prev=None
 *             self.head=next             # <<<<<<<<<<<<<<
 *             self.len-=1
 *             return next
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_next));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_next));
    __Pyx_GOTREF(__pyx_v_self->head);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->head));
    __pyx_v_self->head = __pyx_v_next;

    /* "world_cy.pyx":774
 *             next.prev=None
 *             self.head=next
 *             self.len-=1             # <<<<<<<<<<<<<<
 *             return next
 *         if self.tail==node:
 */
    __pyx_v_self->len = (__pyx_v_self->len - 1);

    /* "world_cy.pyx":775
 *             self.head=next
 *             self.len-=1
 *             return next             # <<<<<<<<<<<<<<
 *         if self.tail==node:
 *             prev=self.prev(node)
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(((PyObject *)__pyx_v_next));
    __pyx_r = __pyx_v_next;
    goto __pyx_L0;

    /* "world_cy.pyx":765
 *     cdef MinionDLLNode remove_and_get_next(self,MinionDLLNode node):
 *         cdef MinionDLLNode prev,next
 *         if self.head==node:             # <<<<<<<<<<<<<<
 *             if self.len==1:
 *                 self.head=None
 */
  }

  /* "world_cy.pyx":776
 *             self.len-=1
 *             return next
 *         if self.tail==node:             # <<<<<<<<<<<<<<
 *             prev=self.prev(node)
 *             prev.next=None
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_self->tail), ((PyObject *)__pyx_v_node), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 776, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 776, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "world_cy.pyx":777
 *             return next
 *         if self.tail==node:
 *             prev=self.prev(node)             # <<<<<<<<<<<<<<
 *             prev.next=None
 *             prev.is_tail=True
 */
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->__pyx_vtab)->prev(__pyx_v_self, __pyx_v_node)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_prev = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "world_cy.pyx":778
 *         if self.tail==node:
 *             prev=self.prev(node)
 *             prev.next=None             # <<<<<<<<<<<<<<
 *             prev.is_tail=True
 *             self.tail=prev
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_prev->next);
    __Pyx_DECREF(((PyObject *)__pyx_v_prev->next));
    __pyx_v_prev->next = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None);

    /* "world_cy.pyx":779
 *             prev=self.prev(node)
 *             prev.next=None
 *             prev.is_tail=True             # <<<<<<<<<<<<<<
 *             self.tail=prev
 *             self.len-=1
 */
    __pyx_v_prev->is_tail = 1;

    /* "world_cy.pyx":780
 *             prev.next=None
 *             prev.is_tail=True
 *             self.tail=prev             # <<<<<<<<<<<<<<
 *             self.len-=1
 *             return None
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_prev));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_prev));
    __Pyx_GOTREF(__pyx_v_self->tail);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->tail));
    __pyx_v_self->tail = __pyx_v_prev;

    /* "world_cy.pyx":781
 *             prev.is_tail=True
 *             self.tail=prev
 *             self.len-=1             # <<<<<<<<<<<<<<
 *             return None
 *         prev=self.prev(node)
 */
    __pyx_v_self->len = (__pyx_v_self->len - 1);

    /* "world_cy.pyx":782
 *             self.tail=prev
 *             self.len-=1
 *             return None             # <<<<<<<<<<<<<<
 *         prev=self.prev(node)
 *         next=self.next(node)
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_r = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None); __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "world_cy.pyx":776
 *             self.len-=1
 *             return next
 *         if self.tail==node:             # <<<<<<<<<<<<<<
 *             prev=self.prev(node)
 *             prev.next=None
 */
  }

  /* "world_cy.pyx":783
 *             self.len-=1
 *             return None
 *         prev=self.prev(node)             # <<<<<<<<<<<<<<
 *         next=self.next(node)
 *         prev.next=next
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->__pyx_vtab)->prev(__pyx_v_self, __pyx_v_node)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_prev = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "world_cy.pyx":784
 *             return None
 *         prev=self.prev(node)
 *         next=self.next(node)             # <<<<<<<<<<<<<<
 *         prev.next=next
 *         next.prev=prev
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->__pyx_vtab)->next(__pyx_v_self, __pyx_v_node)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_next = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "world_cy.pyx":785
 *         prev=self.prev(node)
 *         next=self.next(node)
 *         prev.next=next             # <<<<<<<<<<<<<<
 *         next.prev=prev
 *         self.len-=1
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_next));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_next));
  __Pyx_GOTREF(__pyx_v_prev->next);
  __Pyx_DECREF(((PyObject *)__pyx_v_prev->next));
  __pyx_v_prev->next = __pyx_v_next;

  /* "world_cy.pyx":786
 *         next=self.next(node)
 *         prev.next=next
 *         next.prev=prev             # <<<<<<<<<<<<<<
 *         self.len-=1
 *         return next
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_prev));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_prev));
  __Pyx_GOTREF(__pyx_v_next->prev);
  __Pyx_DECREF(((PyObject *)__pyx_v_next->prev));
  __pyx_v_next->prev = __pyx_v_prev;

  /* "world_cy.pyx":787
 *         prev.next=next
 *         next.prev=prev
 *         self.len-=1             # <<<<<<<<<<<<<<
 *         return next
 *     cdef void remove_by_link(self,Minion mi):
 */
  __pyx_v_self->len = (__pyx_v_self->len - 1);

  /* "world_cy.pyx":788
 *         next.prev=prev
 *         self.len-=1
 *         return next             # <<<<<<<<<<<<<<
 *     cdef void remove_by_link(self,Minion mi):
 *         self.remove_and_get_next(mi.node)
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_next));
  __pyx_r = __pyx_v_next;
  goto __pyx_L0;

  /* "world_cy.pyx":763
 *         self.len+=1
 *         return node
 *     cdef MinionDLLNode remove_and_get_next(self,MinionDLLNode node):             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode prev,next
 *         if self.head==node:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.MinionDLL.remove_and_get_next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_prev);
  __Pyx_XDECREF((PyObject *)__pyx_v_next);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":789
 *         self.len-=1
 *         return next
 *     cdef void remove_by_link(self,Minion mi):             # <<<<<<<<<<<<<<
 *         self.remove_and_get_next(mi.node)
 *     cdef void remove_by_search(self,Minion mi):
 */

static void __pyx_f_8world_cy_9MinionDLL_remove_by_link(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("remove_by_link", 0);
  __Pyx_TraceCall("remove_by_link", __pyx_f[1], 789, 0, __PYX_ERR(1, 789, __pyx_L1_error));

  /* "world_cy.pyx":790
 *         return next
 *     cdef void remove_by_link(self,Minion mi):
 *         self.remove_and_get_next(mi.node)             # <<<<<<<<<<<<<<
 *     cdef void remove_by_search(self,Minion mi):
 *         if self.len==0:
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_mi->node);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->__pyx_vtab)->remove_and_get_next(__pyx_v_self, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":789
 *         self.len-=1
 *         return next
 *     cdef void remove_by_link(self,Minion mi):             # <<<<<<<<<<<<<<
 *         self.remove_and_get_next(mi.node)
 *     cdef void remove_by_search(self,Minion mi):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("world_cy.MinionDLL.remove_by_link", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":791
 *     cdef void remove_by_link(self,Minion mi):
 *         self.remove_and_get_next(mi.node)
 *     cdef void remove_by_search(self,Minion mi):             # <<<<<<<<<<<<<<
 *         if self.len==0:
 *             return
 */

static void __pyx_f_8world_cy_9MinionDLL_remove_by_search(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi) {
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("remove_by_search", 0);
  __Pyx_TraceCall("remove_by_search", __pyx_f[1], 791, 0, __PYX_ERR(1, 791, __pyx_L1_error));

  /* "world_cy.pyx":792
 *         self.remove_and_get_next(mi.node)
 *     cdef void remove_by_search(self,Minion mi):
 *         if self.len==0:             # <<<<<<<<<<<<<<
 *             return
 *         cdef MinionDLLNode node
 */
  __pyx_t_1 = ((__pyx_v_self->len == 0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":793
 *     cdef void remove_by_search(self,Minion mi):
 *         if self.len==0:
 *             return             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode node
 *         node=self.head
 */
    goto __pyx_L0;

    /* "world_cy.pyx":792
 *         self.remove_and_get_next(mi.node)
 *     cdef void remove_by_search(self,Minion mi):
 *         if self.len==0:             # <<<<<<<<<<<<<<
 *             return
 *         cdef MinionDLLNode node
 */
  }

  /* "world_cy.pyx":795
 *             return
 *         cdef MinionDLLNode node
 *         node=self.head             # <<<<<<<<<<<<<<
 *         while (node.mi is not mi) and (not node.is_tail):
 *             node=self.next(node)
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->head);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "world_cy.pyx":796
 *         cdef MinionDLLNode node
 *         node=self.head
 *         while (node.mi is not mi) and (not node.is_tail):             # <<<<<<<<<<<<<<
 *             node=self.next(node)
 *         if node.mi is mi:
 */
  while (1) {
    __pyx_t_3 = (__pyx_v_node->mi != __pyx_v_mi);
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_4 = ((!(__pyx_v_node->is_tail != 0)) != 0);
    __pyx_t_1 = __pyx_t_4;
    __pyx_L6_bool_binop_done:;
    if (!__pyx_t_1) break;

    /* "world_cy.pyx":797
 *         node=self.head
 *         while (node.mi is not mi) and (not node.is_tail):
 *             node=self.next(node)             # <<<<<<<<<<<<<<
 *         if node.mi is mi:
 *             self.remove_and_get_next(node)
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->__pyx_vtab)->next(__pyx_v_self, __pyx_v_node)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2));
    __pyx_t_2 = 0;
  }

  /* "world_cy.pyx":798
 *         while (node.mi is not mi) and (not node.is_tail):
 *             node=self.next(node)
 *         if node.mi is mi:             # <<<<<<<<<<<<<<
 *             self.remove_and_get_next(node)
 *     cdef bint contains(self,Minion mi):
 */
  __pyx_t_1 = (__pyx_v_node->mi == __pyx_v_mi);
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (__pyx_t_4) {

    /* "world_cy.pyx":799
 *             node=self.next(node)
 *         if node.mi is mi:
 *             self.remove_and_get_next(node)             # <<<<<<<<<<<<<<
 *     cdef bint contains(self,Minion mi):
 *         if self.len==0:
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->__pyx_vtab)->remove_and_get_next(__pyx_v_self, __pyx_v_node)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "world_cy.pyx":798
 *         while (node.mi is not mi) and (not node.is_tail):
 *             node=self.next(node)
 *         if node.mi is mi:             # <<<<<<<<<<<<<<
 *             self.remove_and_get_next(node)
 *     cdef bint contains(self,Minion mi):
 */
  }

  /* "world_cy.pyx":791
 *     cdef void remove_by_link(self,Minion mi):
 *         self.remove_and_get_next(mi.node)
 *     cdef void remove_by_search(self,Minion mi):             # <<<<<<<<<<<<<<
 *         if self.len==0:
 *             return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("world_cy.MinionDLL.remove_by_search", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":800
 *         if node.mi is mi:
 *             self.remove_and_get_next(node)
 *     cdef bint contains(self,Minion mi):             # <<<<<<<<<<<<<<
 *         if self.len==0:
 *             return False
 */

static int __pyx_f_8world_cy_9MinionDLL_contains(struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi) {
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("contains", 0);
  __Pyx_TraceCall("contains", __pyx_f[1], 800, 0, __PYX_ERR(1, 800, __pyx_L1_error));

  /* "world_cy.pyx":801
 *             self.remove_and_get_next(node)
 *     cdef bint contains(self,Minion mi):
 *         if self.len==0:             # <<<<<<<<<<<<<<
 *             return False
 *         cdef MinionDLLNode node
 */
  __pyx_t_1 = ((__pyx_v_self->len == 0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":802
 *     cdef bint contains(self,Minion mi):
 *         if self.len==0:
 *             return False             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode node
 *         node=self.head
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "world_cy.pyx":801
 *             self.remove_and_get_next(node)
 *     cdef bint contains(self,Minion mi):
 *         if self.len==0:             # <<<<<<<<<<<<<<
 *             return False
 *         cdef MinionDLLNode node
 */
  }

  /* "world_cy.pyx":804
 *             return False
 *         cdef MinionDLLNode node
 *         node=self.head             # <<<<<<<<<<<<<<
 *         while not node.is_tail:
 *             if node.mi==mi:
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->head);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "world_cy.pyx":805
 *         cdef MinionDLLNode node
 *         node=self.head
 *         while not node.is_tail:             # <<<<<<<<<<<<<<
 *             if node.mi==mi:
 *                 return True
 */
  while (1) {
    __pyx_t_1 = ((!(__pyx_v_node->is_tail != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "world_cy.pyx":806
 *         node=self.head
 *         while not node.is_tail:
 *             if node.mi==mi:             # <<<<<<<<<<<<<<
 *                 return True
 *             node=self.next(node)
 */
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_node->mi), ((PyObject *)__pyx_v_mi), Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 806, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 806, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "world_cy.pyx":807
 *         while not node.is_tail:
 *             if node.mi==mi:
 *                 return True             # <<<<<<<<<<<<<<
 *             node=self.next(node)
 *         if node.mi==mi:
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "world_cy.pyx":806
 *         node=self.head
 *         while not node.is_tail:
 *             if node.mi==mi:             # <<<<<<<<<<<<<<
 *                 return True
 *             node=self.next(node)
 */
    }

    /* "world_cy.pyx":808
 *             if node.mi==mi:
 *                 return True
 *             node=self.next(node)             # <<<<<<<<<<<<<<
 *         if node.mi==mi:
 *             return True
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->__pyx_vtab)->next(__pyx_v_self, __pyx_v_node)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 808, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2));
    __pyx_t_2 = 0;
  }

  /* "world_cy.pyx":809
 *                 return True
 *             node=self.next(node)
 *         if node.mi==mi:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_node->mi), ((PyObject *)__pyx_v_mi), Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 809, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 809, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "world_cy.pyx":810
 *             node=self.next(node)
 *         if node.mi==mi:
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "world_cy.pyx":809
 *                 return True
 *             node=self.next(node)
 *         if node.mi==mi:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  }

  /* "world_cy.pyx":811
 *         if node.mi==mi:
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":800
 *         if node.mi is mi:
 *             self.remove_and_get_next(node)
 *     cdef bint contains(self,Minion mi):             # <<<<<<<<<<<<<<
 *         if self.len==0:
 *             return False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("world_cy.MinionDLL.contains", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9MinionDLL_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_9MinionDLL_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9MinionDLL_16__reduce_cython__(((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9MinionDLL_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.MinionDLL.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_9MinionDLL_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8world_cy_9MinionDLL_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_9MinionDLL_18__setstate_cython__(((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_9MinionDLL_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[0], 3, 0, __PYX_ERR(0, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.MinionDLL.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":818
 * 
 * 
 * cdef int dist(int x,int y,int T):             # <<<<<<<<<<<<<<
 *     if x>y:
 *         return min(x-y,T+y-x)
 */

static int __pyx_f_8world_cy_dist(int __pyx_v_x, int __pyx_v_y, int __pyx_v_T) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("dist", 0);
  __Pyx_TraceCall("dist", __pyx_f[1], 818, 0, __PYX_ERR(1, 818, __pyx_L1_error));

  /* "world_cy.pyx":819
 * 
 * cdef int dist(int x,int y,int T):
 *     if x>y:             # <<<<<<<<<<<<<<
 *         return min(x-y,T+y-x)
 *     return min(y-x,T+x-y)
 */
  __pyx_t_1 = ((__pyx_v_x > __pyx_v_y) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":820
 * cdef int dist(int x,int y,int T):
 *     if x>y:
 *         return min(x-y,T+y-x)             # <<<<<<<<<<<<<<
 *     return min(y-x,T+x-y)
 * 
 */
    __pyx_t_2 = ((__pyx_v_T + __pyx_v_y) - __pyx_v_x);
    __pyx_t_3 = (__pyx_v_x - __pyx_v_y);
    if (((__pyx_t_2 < __pyx_t_3) != 0)) {
      __pyx_t_4 = __pyx_t_2;
    } else {
      __pyx_t_4 = __pyx_t_3;
    }
    __pyx_r = __pyx_t_4;
    goto __pyx_L0;

    /* "world_cy.pyx":819
 * 
 * cdef int dist(int x,int y,int T):
 *     if x>y:             # <<<<<<<<<<<<<<
 *         return min(x-y,T+y-x)
 *     return min(y-x,T+x-y)
 */
  }

  /* "world_cy.pyx":821
 *     if x>y:
 *         return min(x-y,T+y-x)
 *     return min(y-x,T+x-y)             # <<<<<<<<<<<<<<
 * 
 * cdef class World():
 */
  __pyx_t_4 = ((__pyx_v_T + __pyx_v_x) - __pyx_v_y);
  __pyx_t_2 = (__pyx_v_y - __pyx_v_x);
  if (((__pyx_t_4 < __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_4;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "world_cy.pyx":818
 * 
 * 
 * cdef int dist(int x,int y,int T):             # <<<<<<<<<<<<<<
 *     if x>y:
 *         return min(x-y,T+y-x)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.dist", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":824
 * 
 * cdef class World():
 *     def __cinit__(self,int xsize,int ysize,double total_mass,MinionDLL mis,\             # <<<<<<<<<<<<<<
 *                   bint no_age=False,bint no_birth=False,bint no_eat=False,\
 *                   bint no_energy=False,bint no_excrete=False,bint no_hunt=False,\
 */

/* Python wrapper */
static int __pyx_pw_8world_cy_5World_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8world_cy_5World_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_xsize;
  int __pyx_v_ysize;
  double __pyx_v_total_mass;
  struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_mis = 0;
  int __pyx_v_no_age;
  int __pyx_v_no_birth;
  int __pyx_v_no_eat;
  int __pyx_v_no_energy;
  int __pyx_v_no_excrete;
  int __pyx_v_no_hunt;
  int __pyx_v_halluc;
  int __pyx_v_record_pedigree;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xsize,&__pyx_n_s_ysize,&__pyx_n_s_total_mass,&__pyx_n_s_mis,&__pyx_n_s_no_age,&__pyx_n_s_no_birth,&__pyx_n_s_no_eat,&__pyx_n_s_no_energy,&__pyx_n_s_no_excrete,&__pyx_n_s_no_hunt,&__pyx_n_s_halluc,&__pyx_n_s_record_pedigree,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xsize)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ysize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 12, 1); __PYX_ERR(1, 824, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_total_mass)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 12, 2); __PYX_ERR(1, 824, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mis)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 12, 3); __PYX_ERR(1, 824, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_no_age);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_no_birth);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_no_eat);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_no_energy);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_no_excrete);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_no_hunt);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_halluc);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_record_pedigree);
          if (value) { values[11] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 824, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_xsize = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_xsize == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 824, __pyx_L3_error)
    __pyx_v_ysize = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_ysize == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 824, __pyx_L3_error)
    __pyx_v_total_mass = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_total_mass == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 824, __pyx_L3_error)
    __pyx_v_mis = ((struct __pyx_obj_8world_cy_MinionDLL *)values[3]);
    if (values[4]) {
      __pyx_v_no_age = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_no_age == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 825, __pyx_L3_error)
    } else {

      /* "world_cy.pyx":825
 * cdef class World():
 *     def __cinit__(self,int xsize,int ysize,double total_mass,MinionDLL mis,\
 *                   bint no_age=False,bint no_birth=False,bint no_eat=False,\             # <<<<<<<<<<<<<<
 *                   bint no_energy=False,bint no_excrete=False,bint no_hunt=False,\
 *                   bint halluc=False,bint record_pedigree=False):
 */
      __pyx_v_no_age = ((int)0);
    }
    if (values[5]) {
      __pyx_v_no_birth = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_no_birth == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 825, __pyx_L3_error)
    } else {
      __pyx_v_no_birth = ((int)0);
    }
    if (values[6]) {
      __pyx_v_no_eat = __Pyx_PyObject_IsTrue(values[6]); if (unlikely((__pyx_v_no_eat == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 825, __pyx_L3_error)
    } else {
      __pyx_v_no_eat = ((int)0);
    }
    if (values[7]) {
      __pyx_v_no_energy = __Pyx_PyObject_IsTrue(values[7]); if (unlikely((__pyx_v_no_energy == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 826, __pyx_L3_error)
    } else {

      /* "world_cy.pyx":826
 *     def __cinit__(self,int xsize,int ysize,double total_mass,MinionDLL mis,\
 *                   bint no_age=False,bint no_birth=False,bint no_eat=False,\
 *                   bint no_energy=False,bint no_excrete=False,bint no_hunt=False,\             # <<<<<<<<<<<<<<
 *                   bint halluc=False,bint record_pedigree=False):
 *         seed()
 */
      __pyx_v_no_energy = ((int)0);
    }
    if (values[8]) {
      __pyx_v_no_excrete = __Pyx_PyObject_IsTrue(values[8]); if (unlikely((__pyx_v_no_excrete == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 826, __pyx_L3_error)
    } else {
      __pyx_v_no_excrete = ((int)0);
    }
    if (values[9]) {
      __pyx_v_no_hunt = __Pyx_PyObject_IsTrue(values[9]); if (unlikely((__pyx_v_no_hunt == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 826, __pyx_L3_error)
    } else {
      __pyx_v_no_hunt = ((int)0);
    }
    if (values[10]) {
      __pyx_v_halluc = __Pyx_PyObject_IsTrue(values[10]); if (unlikely((__pyx_v_halluc == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 827, __pyx_L3_error)
    } else {

      /* "world_cy.pyx":827
 *                   bint no_age=False,bint no_birth=False,bint no_eat=False,\
 *                   bint no_energy=False,bint no_excrete=False,bint no_hunt=False,\
 *                   bint halluc=False,bint record_pedigree=False):             # <<<<<<<<<<<<<<
 *         seed()
 *         self.snapshot=np.array([[-1 for _ in range(ysize)] for _ in range(xsize)],dtype=np.int32,order='C')
 */
      __pyx_v_halluc = ((int)0);
    }
    if (values[11]) {
      __pyx_v_record_pedigree = __Pyx_PyObject_IsTrue(values[11]); if (unlikely((__pyx_v_record_pedigree == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 827, __pyx_L3_error)
    } else {
      __pyx_v_record_pedigree = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 824, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.World.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mis), __pyx_ptype_8world_cy_MinionDLL, 1, "mis", 0))) __PYX_ERR(1, 824, __pyx_L1_error)
  __pyx_r = __pyx_pf_8world_cy_5World___cinit__(((struct __pyx_obj_8world_cy_World *)__pyx_v_self), __pyx_v_xsize, __pyx_v_ysize, __pyx_v_total_mass, __pyx_v_mis, __pyx_v_no_age, __pyx_v_no_birth, __pyx_v_no_eat, __pyx_v_no_energy, __pyx_v_no_excrete, __pyx_v_no_hunt, __pyx_v_halluc, __pyx_v_record_pedigree);

  /* "world_cy.pyx":824
 * 
 * cdef class World():
 *     def __cinit__(self,int xsize,int ysize,double total_mass,MinionDLL mis,\             # <<<<<<<<<<<<<<
 *                   bint no_age=False,bint no_birth=False,bint no_eat=False,\
 *                   bint no_energy=False,bint no_excrete=False,bint no_hunt=False,\
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8world_cy_5World___cinit__(struct __pyx_obj_8world_cy_World *__pyx_v_self, int __pyx_v_xsize, int __pyx_v_ysize, double __pyx_v_total_mass, struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_mis, int __pyx_v_no_age, int __pyx_v_no_birth, int __pyx_v_no_eat, int __pyx_v_no_energy, int __pyx_v_no_excrete, int __pyx_v_no_hunt, int __pyx_v_halluc, int __pyx_v_record_pedigree) {
  double __pyx_v_initial_total_min;
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  PyObject *__pyx_v_mi = NULL;
  CYTHON_UNUSED size_t __pyx_v__;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  size_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  size_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_memviewslice __pyx_t_12 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_13 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  double __pyx_t_16;
  size_t __pyx_t_17;
  size_t __pyx_t_18;
  size_t __pyx_t_19;
  __Pyx_memviewslice __pyx_t_20 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[1], 824, 0, __PYX_ERR(1, 824, __pyx_L1_error));

  /* "world_cy.pyx":828
 *                   bint no_energy=False,bint no_excrete=False,bint no_hunt=False,\
 *                   bint halluc=False,bint record_pedigree=False):
 *         seed()             # <<<<<<<<<<<<<<
 *         self.snapshot=np.array([[-1 for _ in range(ysize)] for _ in range(xsize)],dtype=np.int32,order='C')
 *         self.xsize=xsize
 */
  __pyx_f_11fast_random_seed();

  /* "world_cy.pyx":829
 *                   bint halluc=False,bint record_pedigree=False):
 *         seed()
 *         self.snapshot=np.array([[-1 for _ in range(ysize)] for _ in range(xsize)],dtype=np.int32,order='C')             # <<<<<<<<<<<<<<
 *         self.xsize=xsize
 *         self.ysize=ysize
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_v_xsize;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v__ = __pyx_t_5;
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 829, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __pyx_v_ysize;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v__ = __pyx_t_9;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_int_neg_1))) __PYX_ERR(1, 829, __pyx_L1_error)
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 829, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_int32); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_11) < 0) __PYX_ERR(1, 829, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order, __pyx_n_s_C) < 0) __PYX_ERR(1, 829, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_12 = __Pyx_PyObject_to_MemoryviewSlice_dsds_int(__pyx_t_11, PyBUF_WRITABLE); if (unlikely(!__pyx_t_12.memview)) __PYX_ERR(1, 829, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->snapshot, 0);
  __pyx_v_self->snapshot = __pyx_t_12;
  __pyx_t_12.memview = NULL;
  __pyx_t_12.data = NULL;

  /* "world_cy.pyx":830
 *         seed()
 *         self.snapshot=np.array([[-1 for _ in range(ysize)] for _ in range(xsize)],dtype=np.int32,order='C')
 *         self.xsize=xsize             # <<<<<<<<<<<<<<
 *         self.ysize=ysize
 *         self.moment=0
 */
  __pyx_v_self->xsize = __pyx_v_xsize;

  /* "world_cy.pyx":831
 *         self.snapshot=np.array([[-1 for _ in range(ysize)] for _ in range(xsize)],dtype=np.int32,order='C')
 *         self.xsize=xsize
 *         self.ysize=ysize             # <<<<<<<<<<<<<<
 *         self.moment=0
 *         self.new_id=0
 */
  __pyx_v_self->ysize = __pyx_v_ysize;

  /* "world_cy.pyx":832
 *         self.xsize=xsize
 *         self.ysize=ysize
 *         self.moment=0             # <<<<<<<<<<<<<<
 *         self.new_id=0
 *         self.mins=np.array([[0. for _ in range(ysize)] for _ in range(xsize)],dtype=np.float64,order='C')
 */
  __pyx_v_self->moment = 0;

  /* "world_cy.pyx":833
 *         self.ysize=ysize
 *         self.moment=0
 *         self.new_id=0             # <<<<<<<<<<<<<<
 *         self.mins=np.array([[0. for _ in range(ysize)] for _ in range(xsize)],dtype=np.float64,order='C')
 *         cdef double initial_total_min=total_mass
 */
  __pyx_v_self->new_id = 0;

  /* "world_cy.pyx":834
 *         self.moment=0
 *         self.new_id=0
 *         self.mins=np.array([[0. for _ in range(ysize)] for _ in range(xsize)],dtype=np.float64,order='C')             # <<<<<<<<<<<<<<
 *         cdef double initial_total_min=total_mass
 *         cdef size_t x,y
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_3 = __pyx_v_xsize;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v__ = __pyx_t_5;
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 834, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __pyx_v_ysize;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v__ = __pyx_t_9;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_float_0_))) __PYX_ERR(1, 834, __pyx_L1_error)
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_11, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 834, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_11);
  __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_order, __pyx_n_s_C) < 0) __PYX_ERR(1, 834, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_13 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_10, PyBUF_WRITABLE); if (unlikely(!__pyx_t_13.memview)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->mins, 0);
  __pyx_v_self->mins = __pyx_t_13;
  __pyx_t_13.memview = NULL;
  __pyx_t_13.data = NULL;

  /* "world_cy.pyx":835
 *         self.new_id=0
 *         self.mins=np.array([[0. for _ in range(ysize)] for _ in range(xsize)],dtype=np.float64,order='C')
 *         cdef double initial_total_min=total_mass             # <<<<<<<<<<<<<<
 *         cdef size_t x,y
 *         for mi in mis:
 */
  __pyx_v_initial_total_min = __pyx_v_total_mass;

  /* "world_cy.pyx":837
 *         cdef double initial_total_min=total_mass
 *         cdef size_t x,y
 *         for mi in mis:             # <<<<<<<<<<<<<<
 *             initial_total_min-=mi.get_mass()
 *         for _ in range(<size_t>initial_total_min):
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_mis))) || PyTuple_CheckExact(((PyObject *)__pyx_v_mis))) {
    __pyx_t_10 = ((PyObject *)__pyx_v_mis); __Pyx_INCREF(__pyx_t_10); __pyx_t_14 = 0;
    __pyx_t_15 = NULL;
  } else {
    __pyx_t_14 = -1; __pyx_t_10 = PyObject_GetIter(((PyObject *)__pyx_v_mis)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_15 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 837, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_15)) {
      if (likely(PyList_CheckExact(__pyx_t_10))) {
        if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_11 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_14); __Pyx_INCREF(__pyx_t_11); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(1, 837, __pyx_L1_error)
        #else
        __pyx_t_11 = PySequence_ITEM(__pyx_t_10, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 837, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
      } else {
        if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_14); __Pyx_INCREF(__pyx_t_11); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(1, 837, __pyx_L1_error)
        #else
        __pyx_t_11 = PySequence_ITEM(__pyx_t_10, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 837, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
      }
    } else {
      __pyx_t_11 = __pyx_t_15(__pyx_t_10);
      if (unlikely(!__pyx_t_11)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 837, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_11);
    }
    __Pyx_XDECREF_SET(__pyx_v_mi, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "world_cy.pyx":838
 *         cdef size_t x,y
 *         for mi in mis:
 *             initial_total_min-=mi.get_mass()             # <<<<<<<<<<<<<<
 *         for _ in range(<size_t>initial_total_min):
 *             x=<size_t>randint(0,xsize-1)
 */
    __pyx_t_11 = PyFloat_FromDouble(__pyx_v_initial_total_min); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_mass); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_InPlaceSubtract(__pyx_t_11, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 838, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_initial_total_min = __pyx_t_16;

    /* "world_cy.pyx":837
 *         cdef double initial_total_min=total_mass
 *         cdef size_t x,y
 *         for mi in mis:             # <<<<<<<<<<<<<<
 *             initial_total_min-=mi.get_mass()
 *         for _ in range(<size_t>initial_total_min):
 */
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "world_cy.pyx":839
 *         for mi in mis:
 *             initial_total_min-=mi.get_mass()
 *         for _ in range(<size_t>initial_total_min):             # <<<<<<<<<<<<<<
 *             x=<size_t>randint(0,xsize-1)
 *             y=<size_t>randint(0,ysize-1)
 */
  __pyx_t_5 = ((size_t)__pyx_v_initial_total_min);
  __pyx_t_9 = __pyx_t_5;
  for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_9; __pyx_t_17+=1) {
    __pyx_v__ = __pyx_t_17;

    /* "world_cy.pyx":840
 *             initial_total_min-=mi.get_mass()
 *         for _ in range(<size_t>initial_total_min):
 *             x=<size_t>randint(0,xsize-1)             # <<<<<<<<<<<<<<
 *             y=<size_t>randint(0,ysize-1)
 *             self.mins[x,y]+=1
 */
    __pyx_v_x = ((size_t)__pyx_f_11fast_random_randint(0, (__pyx_v_xsize - 1)));

    /* "world_cy.pyx":841
 *         for _ in range(<size_t>initial_total_min):
 *             x=<size_t>randint(0,xsize-1)
 *             y=<size_t>randint(0,ysize-1)             # <<<<<<<<<<<<<<
 *             self.mins[x,y]+=1
 * 
 */
    __pyx_v_y = ((size_t)__pyx_f_11fast_random_randint(0, (__pyx_v_ysize - 1)));

    /* "world_cy.pyx":842
 *             x=<size_t>randint(0,xsize-1)
 *             y=<size_t>randint(0,ysize-1)
 *             self.mins[x,y]+=1             # <<<<<<<<<<<<<<
 * 
 *         self.mis=MinionDLL()
 */
    if (unlikely(!__pyx_v_self->mins.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 842, __pyx_L1_error)}
    __pyx_t_18 = __pyx_v_x;
    __pyx_t_19 = __pyx_v_y;
    __pyx_t_3 = -1;
    if (unlikely(__pyx_t_18 >= (size_t)__pyx_v_self->mins.shape[0])) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_19 >= (size_t)__pyx_v_self->mins.shape[1])) __pyx_t_3 = 1;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(1, 842, __pyx_L1_error)
    }
    *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->mins.data + __pyx_t_18 * __pyx_v_self->mins.strides[0]) ) + __pyx_t_19 * __pyx_v_self->mins.strides[1]) )) += 1.0;
  }

  /* "world_cy.pyx":844
 *             self.mins[x,y]+=1
 * 
 *         self.mis=MinionDLL()             # <<<<<<<<<<<<<<
 *         #self.pedigree is delcared in the .pxd file
 *         #how two assign an empty vector?
 */
  __pyx_t_10 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8world_cy_MinionDLL)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_GOTREF(__pyx_v_self->mis);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mis));
  __pyx_v_self->mis = ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "world_cy.pyx":847
 *         #self.pedigree is delcared in the .pxd file
 *         #how two assign an empty vector?
 *         self.occupy_map=np.array([[MinionDLL() for _ in range(ysize)] for _ in range(xsize)])             # <<<<<<<<<<<<<<
 *         for mi in mis:
 *             self._register(mi)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_v_xsize;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v__ = __pyx_t_5;
    __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_7 = __pyx_v_ysize;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v__ = __pyx_t_9;
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8world_cy_MinionDLL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_11, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 847, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_11))) __PYX_ERR(1, 847, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_10 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_11, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_20 = __Pyx_PyObject_to_MemoryviewSlice_dsds_object(__pyx_t_10, PyBUF_WRITABLE); if (unlikely(!__pyx_t_20.memview)) __PYX_ERR(1, 847, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->occupy_map, 0);
  __pyx_v_self->occupy_map = __pyx_t_20;
  __pyx_t_20.memview = NULL;
  __pyx_t_20.data = NULL;

  /* "world_cy.pyx":848
 *         #how two assign an empty vector?
 *         self.occupy_map=np.array([[MinionDLL() for _ in range(ysize)] for _ in range(xsize)])
 *         for mi in mis:             # <<<<<<<<<<<<<<
 *             self._register(mi)
 *         self.no_age=no_age
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_mis))) || PyTuple_CheckExact(((PyObject *)__pyx_v_mis))) {
    __pyx_t_10 = ((PyObject *)__pyx_v_mis); __Pyx_INCREF(__pyx_t_10); __pyx_t_14 = 0;
    __pyx_t_15 = NULL;
  } else {
    __pyx_t_14 = -1; __pyx_t_10 = PyObject_GetIter(((PyObject *)__pyx_v_mis)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_15 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 848, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_15)) {
      if (likely(PyList_CheckExact(__pyx_t_10))) {
        if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_14); __Pyx_INCREF(__pyx_t_6); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(1, 848, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_10, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 848, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_14); __Pyx_INCREF(__pyx_t_6); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(1, 848, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_10, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 848, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_15(__pyx_t_10);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 848, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_mi, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "world_cy.pyx":849
 *         self.occupy_map=np.array([[MinionDLL() for _ in range(ysize)] for _ in range(xsize)])
 *         for mi in mis:
 *             self._register(mi)             # <<<<<<<<<<<<<<
 *         self.no_age=no_age
 *         self.no_birth=no_birth
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_register); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_6 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_11, __pyx_v_mi) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_mi);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "world_cy.pyx":848
 *         #how two assign an empty vector?
 *         self.occupy_map=np.array([[MinionDLL() for _ in range(ysize)] for _ in range(xsize)])
 *         for mi in mis:             # <<<<<<<<<<<<<<
 *             self._register(mi)
 *         self.no_age=no_age
 */
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "world_cy.pyx":850
 *         for mi in mis:
 *             self._register(mi)
 *         self.no_age=no_age             # <<<<<<<<<<<<<<
 *         self.no_birth=no_birth
 *         self.no_eat=no_eat
 */
  __pyx_v_self->no_age = __pyx_v_no_age;

  /* "world_cy.pyx":851
 *             self._register(mi)
 *         self.no_age=no_age
 *         self.no_birth=no_birth             # <<<<<<<<<<<<<<
 *         self.no_eat=no_eat
 *         self.no_energy=no_energy
 */
  __pyx_v_self->no_birth = __pyx_v_no_birth;

  /* "world_cy.pyx":852
 *         self.no_age=no_age
 *         self.no_birth=no_birth
 *         self.no_eat=no_eat             # <<<<<<<<<<<<<<
 *         self.no_energy=no_energy
 *         self.no_excrete=no_excrete
 */
  __pyx_v_self->no_eat = __pyx_v_no_eat;

  /* "world_cy.pyx":853
 *         self.no_birth=no_birth
 *         self.no_eat=no_eat
 *         self.no_energy=no_energy             # <<<<<<<<<<<<<<
 *         self.no_excrete=no_excrete
 *         self.no_hunt=no_hunt
 */
  __pyx_v_self->no_energy = __pyx_v_no_energy;

  /* "world_cy.pyx":854
 *         self.no_eat=no_eat
 *         self.no_energy=no_energy
 *         self.no_excrete=no_excrete             # <<<<<<<<<<<<<<
 *         self.no_hunt=no_hunt
 *         self.halluc=halluc
 */
  __pyx_v_self->no_excrete = __pyx_v_no_excrete;

  /* "world_cy.pyx":855
 *         self.no_energy=no_energy
 *         self.no_excrete=no_excrete
 *         self.no_hunt=no_hunt             # <<<<<<<<<<<<<<
 *         self.halluc=halluc
 *         self.messiness=0
 */
  __pyx_v_self->no_hunt = __pyx_v_no_hunt;

  /* "world_cy.pyx":856
 *         self.no_excrete=no_excrete
 *         self.no_hunt=no_hunt
 *         self.halluc=halluc             # <<<<<<<<<<<<<<
 *         self.messiness=0
 *         self.hidden_mass=0.
 */
  __pyx_v_self->halluc = __pyx_v_halluc;

  /* "world_cy.pyx":857
 *         self.no_hunt=no_hunt
 *         self.halluc=halluc
 *         self.messiness=0             # <<<<<<<<<<<<<<
 *         self.hidden_mass=0.
 *         self.record_pedigree=record_pedigree
 */
  __pyx_v_self->messiness = 0;

  /* "world_cy.pyx":858
 *         self.halluc=halluc
 *         self.messiness=0
 *         self.hidden_mass=0.             # <<<<<<<<<<<<<<
 *         self.record_pedigree=record_pedigree
 * 
 */
  __pyx_v_self->hidden_mass = 0.;

  /* "world_cy.pyx":859
 *         self.messiness=0
 *         self.hidden_mass=0.
 *         self.record_pedigree=record_pedigree             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->record_pedigree = __pyx_v_record_pedigree;

  /* "world_cy.pyx":824
 * 
 * cdef class World():
 *     def __cinit__(self,int xsize,int ysize,double total_mass,MinionDLL mis,\             # <<<<<<<<<<<<<<
 *                   bint no_age=False,bint no_birth=False,bint no_eat=False,\
 *                   bint no_energy=False,bint no_excrete=False,bint no_hunt=False,\
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __PYX_XDEC_MEMVIEW(&__pyx_t_12, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_13, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_20, 1);
  __Pyx_AddTraceback("world_cy.World.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_mi);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":862
 * 
 * 
 *     def _register(self,mi):             # <<<<<<<<<<<<<<
 *         self.register(mi)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_3_register(PyObject *__pyx_v_self, PyObject *__pyx_v_mi); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_3_register(PyObject *__pyx_v_self, PyObject *__pyx_v_mi) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_register (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_2_register(((struct __pyx_obj_8world_cy_World *)__pyx_v_self), ((PyObject *)__pyx_v_mi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_2_register(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_mi) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_register", 0);
  __Pyx_TraceCall("_register", __pyx_f[1], 862, 0, __PYX_ERR(1, 862, __pyx_L1_error));

  /* "world_cy.pyx":863
 * 
 *     def _register(self,mi):
 *         self.register(mi)             # <<<<<<<<<<<<<<
 * 
 *     cdef void register(self,Minion mi):
 */
  if (!(likely(((__pyx_v_mi) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_mi, __pyx_ptype_8world_cy_Minion))))) __PYX_ERR(1, 863, __pyx_L1_error)
  ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->__pyx_register(__pyx_v_self, ((struct __pyx_obj_8world_cy_Minion *)__pyx_v_mi));

  /* "world_cy.pyx":862
 * 
 * 
 *     def _register(self,mi):             # <<<<<<<<<<<<<<
 *         self.register(mi)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.World._register", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":865
 *         self.register(mi)
 * 
 *     cdef void register(self,Minion mi):             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode node
 *         node=self.mis.push(mi)
 */

static void __pyx_f_8world_cy_5World_register(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi) {
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  int __pyx_v_xpos;
  int __pyx_v_ypos;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_dll = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  size_t __pyx_t_10;
  __Pyx_RefNannySetupContext("register", 0);
  __Pyx_TraceCall("register", __pyx_f[1], 865, 0, __PYX_ERR(1, 865, __pyx_L1_error));

  /* "world_cy.pyx":867
 *     cdef void register(self,Minion mi):
 *         cdef MinionDLLNode node
 *         node=self.mis.push(mi)             # <<<<<<<<<<<<<<
 *         mi.node=node
 *         mi.id=self.new_id
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->mis->__pyx_vtab)->push(__pyx_v_self->mis, __pyx_v_mi)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "world_cy.pyx":868
 *         cdef MinionDLLNode node
 *         node=self.mis.push(mi)
 *         mi.node=node             # <<<<<<<<<<<<<<
 *         mi.id=self.new_id
 *         self.new_id+=1
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_node));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_node));
  __Pyx_GOTREF(__pyx_v_mi->node);
  __Pyx_DECREF(((PyObject *)__pyx_v_mi->node));
  __pyx_v_mi->node = __pyx_v_node;

  /* "world_cy.pyx":869
 *         node=self.mis.push(mi)
 *         mi.node=node
 *         mi.id=self.new_id             # <<<<<<<<<<<<<<
 *         self.new_id+=1
 *         cdef int xpos,ypos
 */
  __pyx_t_2 = __pyx_v_self->new_id;
  __pyx_v_mi->id = __pyx_t_2;

  /* "world_cy.pyx":870
 *         mi.node=node
 *         mi.id=self.new_id
 *         self.new_id+=1             # <<<<<<<<<<<<<<
 *         cdef int xpos,ypos
 *         cdef size_t i,j,x,y
 */
  __pyx_v_self->new_id = (__pyx_v_self->new_id + 1);

  /* "world_cy.pyx":874
 *         cdef size_t i,j,x,y
 *         cdef MinionDLL dll
 *         xpos=mi.pos[0]             # <<<<<<<<<<<<<<
 *         ypos=mi.pos[1]
 *         for i in range(1+2*<size_t>mi.alen):
 */
  __pyx_v_xpos = __pyx_v_mi->pos.f0;

  /* "world_cy.pyx":875
 *         cdef MinionDLL dll
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]             # <<<<<<<<<<<<<<
 *         for i in range(1+2*<size_t>mi.alen):
 *             for j in range(1+2*<size_t>mi.alen):
 */
  __pyx_v_ypos = __pyx_v_mi->pos.f1;

  /* "world_cy.pyx":876
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 *         for i in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *             for j in range(1+2*<size_t>mi.alen):
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 */
  __pyx_t_3 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "world_cy.pyx":877
 *         ypos=mi.pos[1]
 *         for i in range(1+2*<size_t>mi.alen):
 *             for j in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 */
    __pyx_t_6 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "world_cy.pyx":878
 *         for i in range(1+2*<size_t>mi.alen):
 *             for j in range(1+2*<size_t>mi.alen):
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)             # <<<<<<<<<<<<<<
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 dll=self.occupy_map[x,y]
 */
      __pyx_t_2 = ((__pyx_v_xpos - __pyx_v_mi->alen) + ((int)__pyx_v_i));
      if (unlikely(__pyx_v_self->xsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 878, __pyx_L1_error)
      }
      __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_2, __pyx_v_self->xsize));

      /* "world_cy.pyx":879
 *             for j in range(1+2*<size_t>mi.alen):
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)             # <<<<<<<<<<<<<<
 *                 dll=self.occupy_map[x,y]
 *                 dll.push(mi)
 */
      __pyx_t_2 = ((__pyx_v_ypos - __pyx_v_mi->alen) + ((int)__pyx_v_j));
      if (unlikely(__pyx_v_self->ysize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 879, __pyx_L1_error)
      }
      __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_2, __pyx_v_self->ysize));

      /* "world_cy.pyx":880
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 dll=self.occupy_map[x,y]             # <<<<<<<<<<<<<<
 *                 dll.push(mi)
 *     cdef void unregister_deads(self):
 */
      if (unlikely(!__pyx_v_self->occupy_map.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 880, __pyx_L1_error)}
      __pyx_t_9 = __pyx_v_x;
      __pyx_t_10 = __pyx_v_y;
      __pyx_t_2 = -1;
      if (unlikely(__pyx_t_9 >= (size_t)__pyx_v_self->occupy_map.shape[0])) __pyx_t_2 = 0;
      if (unlikely(__pyx_t_10 >= (size_t)__pyx_v_self->occupy_map.shape[1])) __pyx_t_2 = 1;
      if (unlikely(__pyx_t_2 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_2);
        __PYX_ERR(1, 880, __pyx_L1_error)
      }
      __pyx_t_1 = (PyObject *) *((struct __pyx_obj_8world_cy_MinionDLL * *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->occupy_map.data + __pyx_t_9 * __pyx_v_self->occupy_map.strides[0]) ) + __pyx_t_10 * __pyx_v_self->occupy_map.strides[1]) ));
      __Pyx_INCREF((PyObject*)__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_dll, ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "world_cy.pyx":881
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 dll=self.occupy_map[x,y]
 *                 dll.push(mi)             # <<<<<<<<<<<<<<
 *     cdef void unregister_deads(self):
 *         cdef MinionDLLNode node
 */
      __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_dll->__pyx_vtab)->push(__pyx_v_dll, __pyx_v_mi)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 881, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }

  /* "world_cy.pyx":865
 *         self.register(mi)
 * 
 *     cdef void register(self,Minion mi):             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode node
 *         node=self.mis.push(mi)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("world_cy.World.register", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_dll);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":882
 *                 dll=self.occupy_map[x,y]
 *                 dll.push(mi)
 *     cdef void unregister_deads(self):             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 */

static void __pyx_f_8world_cy_5World_unregister_deads(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("unregister_deads", 0);
  __Pyx_TraceCall("unregister_deads", __pyx_f[1], 882, 0, __PYX_ERR(1, 882, __pyx_L1_error));

  /* "world_cy.pyx":885
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return
 *         node=self.mis.head
 */
  __pyx_t_1 = ((__pyx_v_self->mis->len == 0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":886
 *         cdef Minion mi
 *         if self.mis.len==0:
 *             return             # <<<<<<<<<<<<<<
 *         node=self.mis.head
 *         while not node.is_tail:
 */
    goto __pyx_L0;

    /* "world_cy.pyx":885
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return
 *         node=self.mis.head
 */
  }

  /* "world_cy.pyx":887
 *         if self.mis.len==0:
 *             return
 *         node=self.mis.head             # <<<<<<<<<<<<<<
 *         while not node.is_tail:
 *             if node.mi.dead:
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->mis->head);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "world_cy.pyx":888
 *             return
 *         node=self.mis.head
 *         while not node.is_tail:             # <<<<<<<<<<<<<<
 *             if node.mi.dead:
 *                 node=self.mis.remove_and_get_next(node)
 */
  while (1) {
    __pyx_t_1 = ((!(__pyx_v_node->is_tail != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "world_cy.pyx":889
 *         node=self.mis.head
 *         while not node.is_tail:
 *             if node.mi.dead:             # <<<<<<<<<<<<<<
 *                 node=self.mis.remove_and_get_next(node)
 *             else:
 */
    __pyx_t_1 = (__pyx_v_node->mi->dead != 0);
    if (__pyx_t_1) {

      /* "world_cy.pyx":890
 *         while not node.is_tail:
 *             if node.mi.dead:
 *                 node=self.mis.remove_and_get_next(node)             # <<<<<<<<<<<<<<
 *             else:
 *                 node=self.mis.next(node)
 */
      __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->mis->__pyx_vtab)->remove_and_get_next(__pyx_v_self->mis, __pyx_v_node)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "world_cy.pyx":889
 *         node=self.mis.head
 *         while not node.is_tail:
 *             if node.mi.dead:             # <<<<<<<<<<<<<<
 *                 node=self.mis.remove_and_get_next(node)
 *             else:
 */
      goto __pyx_L6;
    }

    /* "world_cy.pyx":892
 *                 node=self.mis.remove_and_get_next(node)
 *             else:
 *                 node=self.mis.next(node)             # <<<<<<<<<<<<<<
 *         if node.mi.dead:
 *             self.mis.remove_and_get_next(node)
 */
    /*else*/ {
      __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->mis->__pyx_vtab)->next(__pyx_v_self->mis, __pyx_v_node)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 892, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2));
      __pyx_t_2 = 0;
    }
    __pyx_L6:;
  }

  /* "world_cy.pyx":893
 *             else:
 *                 node=self.mis.next(node)
 *         if node.mi.dead:             # <<<<<<<<<<<<<<
 *             self.mis.remove_and_get_next(node)
 * 
 */
  __pyx_t_1 = (__pyx_v_node->mi->dead != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":894
 *                 node=self.mis.next(node)
 *         if node.mi.dead:
 *             self.mis.remove_and_get_next(node)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->mis->__pyx_vtab)->remove_and_get_next(__pyx_v_self->mis, __pyx_v_node)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "world_cy.pyx":893
 *             else:
 *                 node=self.mis.next(node)
 *         if node.mi.dead:             # <<<<<<<<<<<<<<
 *             self.mis.remove_and_get_next(node)
 * 
 */
  }

  /* "world_cy.pyx":882
 *                 dll=self.occupy_map[x,y]
 *                 dll.push(mi)
 *     cdef void unregister_deads(self):             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("world_cy.World.unregister_deads", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":897
 * 
 * 
 *     cdef void take_mass(self,Minion mi,double amount):             # <<<<<<<<<<<<<<
 *         cdef int alen_before,xpos,ypos
 *         cdef size_t i,j,x,y
 */

static void __pyx_f_8world_cy_5World_take_mass(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, double __pyx_v_amount) {
  int __pyx_v_alen_before;
  int __pyx_v_xpos;
  int __pyx_v_ypos;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_dll = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_t_6;
  size_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  size_t __pyx_t_11;
  long __pyx_t_12;
  long __pyx_t_13;
  size_t __pyx_t_14;
  size_t __pyx_t_15;
  size_t __pyx_t_16;
  size_t __pyx_t_17;
  size_t __pyx_t_18;
  size_t __pyx_t_19;
  __Pyx_RefNannySetupContext("take_mass", 0);
  __Pyx_TraceCall("take_mass", __pyx_f[1], 897, 0, __PYX_ERR(1, 897, __pyx_L1_error));

  /* "world_cy.pyx":901
 *         cdef size_t i,j,x,y
 *         cdef MinionDLL dll
 *         alen_before=mi.alen             # <<<<<<<<<<<<<<
 *         mi.take_mass(amount)
 *         xpos=mi.pos[0]
 */
  __pyx_t_1 = __pyx_v_mi->alen;
  __pyx_v_alen_before = __pyx_t_1;

  /* "world_cy.pyx":902
 *         cdef MinionDLL dll
 *         alen_before=mi.alen
 *         mi.take_mass(amount)             # <<<<<<<<<<<<<<
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 */
  ((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_mi->__pyx_vtab)->take_mass(__pyx_v_mi, __pyx_v_amount);

  /* "world_cy.pyx":903
 *         alen_before=mi.alen
 *         mi.take_mass(amount)
 *         xpos=mi.pos[0]             # <<<<<<<<<<<<<<
 *         ypos=mi.pos[1]
 *         if mi.alen>alen_before:
 */
  __pyx_v_xpos = __pyx_v_mi->pos.f0;

  /* "world_cy.pyx":904
 *         mi.take_mass(amount)
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]             # <<<<<<<<<<<<<<
 *         if mi.alen>alen_before:
 *             for i in range(1+2*mi.alen):
 */
  __pyx_v_ypos = __pyx_v_mi->pos.f1;

  /* "world_cy.pyx":905
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 *         if mi.alen>alen_before:             # <<<<<<<<<<<<<<
 *             for i in range(1+2*mi.alen):
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 */
  __pyx_t_2 = ((__pyx_v_mi->alen > __pyx_v_alen_before) != 0);
  if (__pyx_t_2) {

    /* "world_cy.pyx":906
 *         ypos=mi.pos[1]
 *         if mi.alen>alen_before:
 *             for i in range(1+2*mi.alen):             # <<<<<<<<<<<<<<
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                 for j in range(mi.alen-alen_before):
 */
    __pyx_t_3 = (1 + (2 * __pyx_v_mi->alen));
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "world_cy.pyx":907
 *         if mi.alen>alen_before:
 *             for i in range(1+2*mi.alen):
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)             # <<<<<<<<<<<<<<
 *                 for j in range(mi.alen-alen_before):
 *                     y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 */
      __pyx_t_1 = ((__pyx_v_xpos - __pyx_v_mi->alen) + ((int)__pyx_v_i));
      if (unlikely(__pyx_v_self->xsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 907, __pyx_L1_error)
      }
      __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_1, __pyx_v_self->xsize));

      /* "world_cy.pyx":908
 *             for i in range(1+2*mi.alen):
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                 for j in range(mi.alen-alen_before):             # <<<<<<<<<<<<<<
 *                     y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                     dll=self.occupy_map[x,y]
 */
      __pyx_t_1 = (__pyx_v_mi->alen - __pyx_v_alen_before);
      __pyx_t_6 = __pyx_t_1;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_j = __pyx_t_7;

        /* "world_cy.pyx":909
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                 for j in range(mi.alen-alen_before):
 *                     y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)             # <<<<<<<<<<<<<<
 *                     dll=self.occupy_map[x,y]
 *                     dll.push(mi)
 */
        __pyx_t_8 = ((__pyx_v_ypos - __pyx_v_mi->alen) + ((int)__pyx_v_j));
        if (unlikely(__pyx_v_self->ysize == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(1, 909, __pyx_L1_error)
        }
        __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_8, __pyx_v_self->ysize));

        /* "world_cy.pyx":910
 *                 for j in range(mi.alen-alen_before):
 *                     y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                     dll=self.occupy_map[x,y]             # <<<<<<<<<<<<<<
 *                     dll.push(mi)
 *                 for j in range(1+mi.alen+alen_before,1+2*mi.alen):
 */
        if (unlikely(!__pyx_v_self->occupy_map.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 910, __pyx_L1_error)}
        __pyx_t_10 = __pyx_v_x;
        __pyx_t_11 = __pyx_v_y;
        __pyx_t_8 = -1;
        if (unlikely(__pyx_t_10 >= (size_t)__pyx_v_self->occupy_map.shape[0])) __pyx_t_8 = 0;
        if (unlikely(__pyx_t_11 >= (size_t)__pyx_v_self->occupy_map.shape[1])) __pyx_t_8 = 1;
        if (unlikely(__pyx_t_8 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_8);
          __PYX_ERR(1, 910, __pyx_L1_error)
        }
        __pyx_t_9 = (PyObject *) *((struct __pyx_obj_8world_cy_MinionDLL * *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->occupy_map.data + __pyx_t_10 * __pyx_v_self->occupy_map.strides[0]) ) + __pyx_t_11 * __pyx_v_self->occupy_map.strides[1]) ));
        __Pyx_INCREF((PyObject*)__pyx_t_9);
        __Pyx_XDECREF_SET(__pyx_v_dll, ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_9));
        __pyx_t_9 = 0;

        /* "world_cy.pyx":911
 *                     y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                     dll=self.occupy_map[x,y]
 *                     dll.push(mi)             # <<<<<<<<<<<<<<
 *                 for j in range(1+mi.alen+alen_before,1+2*mi.alen):
 *                     y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 */
        __pyx_t_9 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_dll->__pyx_vtab)->push(__pyx_v_dll, __pyx_v_mi)); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 911, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }

      /* "world_cy.pyx":912
 *                     dll=self.occupy_map[x,y]
 *                     dll.push(mi)
 *                 for j in range(1+mi.alen+alen_before,1+2*mi.alen):             # <<<<<<<<<<<<<<
 *                     y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                     dll=self.occupy_map[x,y]
 */
      __pyx_t_12 = (1 + (2 * __pyx_v_mi->alen));
      __pyx_t_13 = __pyx_t_12;
      for (__pyx_t_7 = ((1 + __pyx_v_mi->alen) + __pyx_v_alen_before); __pyx_t_7 < __pyx_t_13; __pyx_t_7+=1) {
        __pyx_v_j = __pyx_t_7;

        /* "world_cy.pyx":913
 *                     dll.push(mi)
 *                 for j in range(1+mi.alen+alen_before,1+2*mi.alen):
 *                     y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)             # <<<<<<<<<<<<<<
 *                     dll=self.occupy_map[x,y]
 *                     dll.push(mi)
 */
        __pyx_t_1 = ((__pyx_v_ypos - __pyx_v_mi->alen) + ((int)__pyx_v_j));
        if (unlikely(__pyx_v_self->ysize == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(1, 913, __pyx_L1_error)
        }
        __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_1, __pyx_v_self->ysize));

        /* "world_cy.pyx":914
 *                 for j in range(1+mi.alen+alen_before,1+2*mi.alen):
 *                     y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                     dll=self.occupy_map[x,y]             # <<<<<<<<<<<<<<
 *                     dll.push(mi)
 *             for j in range(mi.alen-alen_before,1+mi.alen+alen_before):
 */
        if (unlikely(!__pyx_v_self->occupy_map.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 914, __pyx_L1_error)}
        __pyx_t_14 = __pyx_v_x;
        __pyx_t_15 = __pyx_v_y;
        __pyx_t_1 = -1;
        if (unlikely(__pyx_t_14 >= (size_t)__pyx_v_self->occupy_map.shape[0])) __pyx_t_1 = 0;
        if (unlikely(__pyx_t_15 >= (size_t)__pyx_v_self->occupy_map.shape[1])) __pyx_t_1 = 1;
        if (unlikely(__pyx_t_1 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_1);
          __PYX_ERR(1, 914, __pyx_L1_error)
        }
        __pyx_t_9 = (PyObject *) *((struct __pyx_obj_8world_cy_MinionDLL * *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->occupy_map.data + __pyx_t_14 * __pyx_v_self->occupy_map.strides[0]) ) + __pyx_t_15 * __pyx_v_self->occupy_map.strides[1]) ));
        __Pyx_INCREF((PyObject*)__pyx_t_9);
        __Pyx_XDECREF_SET(__pyx_v_dll, ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_9));
        __pyx_t_9 = 0;

        /* "world_cy.pyx":915
 *                     y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                     dll=self.occupy_map[x,y]
 *                     dll.push(mi)             # <<<<<<<<<<<<<<
 *             for j in range(mi.alen-alen_before,1+mi.alen+alen_before):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 */
        __pyx_t_9 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_dll->__pyx_vtab)->push(__pyx_v_dll, __pyx_v_mi)); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 915, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }

    /* "world_cy.pyx":916
 *                     dll=self.occupy_map[x,y]
 *                     dll.push(mi)
 *             for j in range(mi.alen-alen_before,1+mi.alen+alen_before):             # <<<<<<<<<<<<<<
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 for i in range(mi.alen-alen_before):
 */
    __pyx_t_3 = ((1 + __pyx_v_mi->alen) + __pyx_v_alen_before);
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = (__pyx_v_mi->alen - __pyx_v_alen_before); __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_j = __pyx_t_5;

      /* "world_cy.pyx":917
 *                     dll.push(mi)
 *             for j in range(mi.alen-alen_before,1+mi.alen+alen_before):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)             # <<<<<<<<<<<<<<
 *                 for i in range(mi.alen-alen_before):
 *                     x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 */
      __pyx_t_1 = ((__pyx_v_ypos - __pyx_v_mi->alen) + ((int)__pyx_v_j));
      if (unlikely(__pyx_v_self->ysize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 917, __pyx_L1_error)
      }
      __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_1, __pyx_v_self->ysize));

      /* "world_cy.pyx":918
 *             for j in range(mi.alen-alen_before,1+mi.alen+alen_before):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 for i in range(mi.alen-alen_before):             # <<<<<<<<<<<<<<
 *                     x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                     dll=self.occupy_map[x,y]
 */
      __pyx_t_1 = (__pyx_v_mi->alen - __pyx_v_alen_before);
      __pyx_t_6 = __pyx_t_1;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "world_cy.pyx":919
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 for i in range(mi.alen-alen_before):
 *                     x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)             # <<<<<<<<<<<<<<
 *                     dll=self.occupy_map[x,y]
 *                     dll.push(mi)
 */
        __pyx_t_8 = ((__pyx_v_xpos - __pyx_v_mi->alen) + ((int)__pyx_v_i));
        if (unlikely(__pyx_v_self->xsize == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(1, 919, __pyx_L1_error)
        }
        __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_8, __pyx_v_self->xsize));

        /* "world_cy.pyx":920
 *                 for i in range(mi.alen-alen_before):
 *                     x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                     dll=self.occupy_map[x,y]             # <<<<<<<<<<<<<<
 *                     dll.push(mi)
 *                 for i in range(1+mi.alen+alen_before,1+2*mi.alen):
 */
        if (unlikely(!__pyx_v_self->occupy_map.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 920, __pyx_L1_error)}
        __pyx_t_16 = __pyx_v_x;
        __pyx_t_17 = __pyx_v_y;
        __pyx_t_8 = -1;
        if (unlikely(__pyx_t_16 >= (size_t)__pyx_v_self->occupy_map.shape[0])) __pyx_t_8 = 0;
        if (unlikely(__pyx_t_17 >= (size_t)__pyx_v_self->occupy_map.shape[1])) __pyx_t_8 = 1;
        if (unlikely(__pyx_t_8 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_8);
          __PYX_ERR(1, 920, __pyx_L1_error)
        }
        __pyx_t_9 = (PyObject *) *((struct __pyx_obj_8world_cy_MinionDLL * *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->occupy_map.data + __pyx_t_16 * __pyx_v_self->occupy_map.strides[0]) ) + __pyx_t_17 * __pyx_v_self->occupy_map.strides[1]) ));
        __Pyx_INCREF((PyObject*)__pyx_t_9);
        __Pyx_XDECREF_SET(__pyx_v_dll, ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_9));
        __pyx_t_9 = 0;

        /* "world_cy.pyx":921
 *                     x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                     dll=self.occupy_map[x,y]
 *                     dll.push(mi)             # <<<<<<<<<<<<<<
 *                 for i in range(1+mi.alen+alen_before,1+2*mi.alen):
 *                     x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 */
        __pyx_t_9 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_dll->__pyx_vtab)->push(__pyx_v_dll, __pyx_v_mi)); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 921, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }

      /* "world_cy.pyx":922
 *                     dll=self.occupy_map[x,y]
 *                     dll.push(mi)
 *                 for i in range(1+mi.alen+alen_before,1+2*mi.alen):             # <<<<<<<<<<<<<<
 *                     x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                     dll=self.occupy_map[x,y]
 */
      __pyx_t_12 = (1 + (2 * __pyx_v_mi->alen));
      __pyx_t_13 = __pyx_t_12;
      for (__pyx_t_7 = ((1 + __pyx_v_mi->alen) + __pyx_v_alen_before); __pyx_t_7 < __pyx_t_13; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "world_cy.pyx":923
 *                     dll.push(mi)
 *                 for i in range(1+mi.alen+alen_before,1+2*mi.alen):
 *                     x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)             # <<<<<<<<<<<<<<
 *                     dll=self.occupy_map[x,y]
 *                     dll.push(mi)
 */
        __pyx_t_1 = ((__pyx_v_xpos - __pyx_v_mi->alen) + ((int)__pyx_v_i));
        if (unlikely(__pyx_v_self->xsize == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(1, 923, __pyx_L1_error)
        }
        __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_1, __pyx_v_self->xsize));

        /* "world_cy.pyx":924
 *                 for i in range(1+mi.alen+alen_before,1+2*mi.alen):
 *                     x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                     dll=self.occupy_map[x,y]             # <<<<<<<<<<<<<<
 *                     dll.push(mi)
 *     cdef void loss_mass(self,Minion mi,double amount):
 */
        if (unlikely(!__pyx_v_self->occupy_map.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 924, __pyx_L1_error)}
        __pyx_t_18 = __pyx_v_x;
        __pyx_t_19 = __pyx_v_y;
        __pyx_t_1 = -1;
        if (unlikely(__pyx_t_18 >= (size_t)__pyx_v_self->occupy_map.shape[0])) __pyx_t_1 = 0;
        if (unlikely(__pyx_t_19 >= (size_t)__pyx_v_self->occupy_map.shape[1])) __pyx_t_1 = 1;
        if (unlikely(__pyx_t_1 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_1);
          __PYX_ERR(1, 924, __pyx_L1_error)
        }
        __pyx_t_9 = (PyObject *) *((struct __pyx_obj_8world_cy_MinionDLL * *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->occupy_map.data + __pyx_t_18 * __pyx_v_self->occupy_map.strides[0]) ) + __pyx_t_19 * __pyx_v_self->occupy_map.strides[1]) ));
        __Pyx_INCREF((PyObject*)__pyx_t_9);
        __Pyx_XDECREF_SET(__pyx_v_dll, ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_9));
        __pyx_t_9 = 0;

        /* "world_cy.pyx":925
 *                     x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                     dll=self.occupy_map[x,y]
 *                     dll.push(mi)             # <<<<<<<<<<<<<<
 *     cdef void loss_mass(self,Minion mi,double amount):
 *         cdef int alen_before,xpos,ypos
 */
        __pyx_t_9 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_dll->__pyx_vtab)->push(__pyx_v_dll, __pyx_v_mi)); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 925, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }

    /* "world_cy.pyx":905
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 *         if mi.alen>alen_before:             # <<<<<<<<<<<<<<
 *             for i in range(1+2*mi.alen):
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 */
  }

  /* "world_cy.pyx":897
 * 
 * 
 *     cdef void take_mass(self,Minion mi,double amount):             # <<<<<<<<<<<<<<
 *         cdef int alen_before,xpos,ypos
 *         cdef size_t i,j,x,y
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("world_cy.World.take_mass", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dll);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":926
 *                     dll=self.occupy_map[x,y]
 *                     dll.push(mi)
 *     cdef void loss_mass(self,Minion mi,double amount):             # <<<<<<<<<<<<<<
 *         cdef int alen_before,xpos,ypos
 *         cdef size_t i,j,x,y
 */

static void __pyx_f_8world_cy_5World_loss_mass(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, double __pyx_v_amount) {
  int __pyx_v_alen_before;
  int __pyx_v_xpos;
  int __pyx_v_ypos;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_dll = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_t_6;
  size_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  size_t __pyx_t_11;
  long __pyx_t_12;
  long __pyx_t_13;
  size_t __pyx_t_14;
  size_t __pyx_t_15;
  size_t __pyx_t_16;
  size_t __pyx_t_17;
  size_t __pyx_t_18;
  size_t __pyx_t_19;
  __Pyx_RefNannySetupContext("loss_mass", 0);
  __Pyx_TraceCall("loss_mass", __pyx_f[1], 926, 0, __PYX_ERR(1, 926, __pyx_L1_error));

  /* "world_cy.pyx":930
 *         cdef size_t i,j,x,y
 *         cdef MinionDLL dll
 *         alen_before=mi.alen             # <<<<<<<<<<<<<<
 *         mi.loss_mass(amount)
 *         xpos=mi.pos[0]
 */
  __pyx_t_1 = __pyx_v_mi->alen;
  __pyx_v_alen_before = __pyx_t_1;

  /* "world_cy.pyx":931
 *         cdef MinionDLL dll
 *         alen_before=mi.alen
 *         mi.loss_mass(amount)             # <<<<<<<<<<<<<<
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 */
  ((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_mi->__pyx_vtab)->loss_mass(__pyx_v_mi, __pyx_v_amount);

  /* "world_cy.pyx":932
 *         alen_before=mi.alen
 *         mi.loss_mass(amount)
 *         xpos=mi.pos[0]             # <<<<<<<<<<<<<<
 *         ypos=mi.pos[1]
 *         if alen_before>mi.alen:
 */
  __pyx_v_xpos = __pyx_v_mi->pos.f0;

  /* "world_cy.pyx":933
 *         mi.loss_mass(amount)
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]             # <<<<<<<<<<<<<<
 *         if alen_before>mi.alen:
 *             for i in range(1+2*alen_before):
 */
  __pyx_v_ypos = __pyx_v_mi->pos.f1;

  /* "world_cy.pyx":934
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 *         if alen_before>mi.alen:             # <<<<<<<<<<<<<<
 *             for i in range(1+2*alen_before):
 *                 x=<size_t>((xpos-alen_before+<int>i)%self.xsize)
 */
  __pyx_t_2 = ((__pyx_v_alen_before > __pyx_v_mi->alen) != 0);
  if (__pyx_t_2) {

    /* "world_cy.pyx":935
 *         ypos=mi.pos[1]
 *         if alen_before>mi.alen:
 *             for i in range(1+2*alen_before):             # <<<<<<<<<<<<<<
 *                 x=<size_t>((xpos-alen_before+<int>i)%self.xsize)
 *                 for j in range(alen_before-mi.alen):
 */
    __pyx_t_3 = (1 + (2 * __pyx_v_alen_before));
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "world_cy.pyx":936
 *         if alen_before>mi.alen:
 *             for i in range(1+2*alen_before):
 *                 x=<size_t>((xpos-alen_before+<int>i)%self.xsize)             # <<<<<<<<<<<<<<
 *                 for j in range(alen_before-mi.alen):
 *                     y=<size_t>((ypos-alen_before+<int>j)%self.ysize)
 */
      __pyx_t_1 = ((__pyx_v_xpos - __pyx_v_alen_before) + ((int)__pyx_v_i));
      if (unlikely(__pyx_v_self->xsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 936, __pyx_L1_error)
      }
      __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_1, __pyx_v_self->xsize));

      /* "world_cy.pyx":937
 *             for i in range(1+2*alen_before):
 *                 x=<size_t>((xpos-alen_before+<int>i)%self.xsize)
 *                 for j in range(alen_before-mi.alen):             # <<<<<<<<<<<<<<
 *                     y=<size_t>((ypos-alen_before+<int>j)%self.ysize)
 *                     dll=self.occupy_map[x,y]
 */
      __pyx_t_1 = (__pyx_v_alen_before - __pyx_v_mi->alen);
      __pyx_t_6 = __pyx_t_1;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_j = __pyx_t_7;

        /* "world_cy.pyx":938
 *                 x=<size_t>((xpos-alen_before+<int>i)%self.xsize)
 *                 for j in range(alen_before-mi.alen):
 *                     y=<size_t>((ypos-alen_before+<int>j)%self.ysize)             # <<<<<<<<<<<<<<
 *                     dll=self.occupy_map[x,y]
 *                     dll.remove_by_search(mi)
 */
        __pyx_t_8 = ((__pyx_v_ypos - __pyx_v_alen_before) + ((int)__pyx_v_j));
        if (unlikely(__pyx_v_self->ysize == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(1, 938, __pyx_L1_error)
        }
        __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_8, __pyx_v_self->ysize));

        /* "world_cy.pyx":939
 *                 for j in range(alen_before-mi.alen):
 *                     y=<size_t>((ypos-alen_before+<int>j)%self.ysize)
 *                     dll=self.occupy_map[x,y]             # <<<<<<<<<<<<<<
 *                     dll.remove_by_search(mi)
 *                 for j in range(1+alen_before+mi.alen,1+2*alen_before):
 */
        if (unlikely(!__pyx_v_self->occupy_map.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 939, __pyx_L1_error)}
        __pyx_t_10 = __pyx_v_x;
        __pyx_t_11 = __pyx_v_y;
        __pyx_t_8 = -1;
        if (unlikely(__pyx_t_10 >= (size_t)__pyx_v_self->occupy_map.shape[0])) __pyx_t_8 = 0;
        if (unlikely(__pyx_t_11 >= (size_t)__pyx_v_self->occupy_map.shape[1])) __pyx_t_8 = 1;
        if (unlikely(__pyx_t_8 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_8);
          __PYX_ERR(1, 939, __pyx_L1_error)
        }
        __pyx_t_9 = (PyObject *) *((struct __pyx_obj_8world_cy_MinionDLL * *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->occupy_map.data + __pyx_t_10 * __pyx_v_self->occupy_map.strides[0]) ) + __pyx_t_11 * __pyx_v_self->occupy_map.strides[1]) ));
        __Pyx_INCREF((PyObject*)__pyx_t_9);
        __Pyx_XDECREF_SET(__pyx_v_dll, ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_9));
        __pyx_t_9 = 0;

        /* "world_cy.pyx":940
 *                     y=<size_t>((ypos-alen_before+<int>j)%self.ysize)
 *                     dll=self.occupy_map[x,y]
 *                     dll.remove_by_search(mi)             # <<<<<<<<<<<<<<
 *                 for j in range(1+alen_before+mi.alen,1+2*alen_before):
 *                     y=<size_t>((ypos-alen_before+<int>j)%self.ysize)
 */
        ((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_dll->__pyx_vtab)->remove_by_search(__pyx_v_dll, __pyx_v_mi);
      }

      /* "world_cy.pyx":941
 *                     dll=self.occupy_map[x,y]
 *                     dll.remove_by_search(mi)
 *                 for j in range(1+alen_before+mi.alen,1+2*alen_before):             # <<<<<<<<<<<<<<
 *                     y=<size_t>((ypos-alen_before+<int>j)%self.ysize)
 *                     dll=self.occupy_map[x,y]
 */
      __pyx_t_12 = (1 + (2 * __pyx_v_alen_before));
      __pyx_t_13 = __pyx_t_12;
      for (__pyx_t_7 = ((1 + __pyx_v_alen_before) + __pyx_v_mi->alen); __pyx_t_7 < __pyx_t_13; __pyx_t_7+=1) {
        __pyx_v_j = __pyx_t_7;

        /* "world_cy.pyx":942
 *                     dll.remove_by_search(mi)
 *                 for j in range(1+alen_before+mi.alen,1+2*alen_before):
 *                     y=<size_t>((ypos-alen_before+<int>j)%self.ysize)             # <<<<<<<<<<<<<<
 *                     dll=self.occupy_map[x,y]
 *                     dll.remove_by_search(mi)
 */
        __pyx_t_1 = ((__pyx_v_ypos - __pyx_v_alen_before) + ((int)__pyx_v_j));
        if (unlikely(__pyx_v_self->ysize == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(1, 942, __pyx_L1_error)
        }
        __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_1, __pyx_v_self->ysize));

        /* "world_cy.pyx":943
 *                 for j in range(1+alen_before+mi.alen,1+2*alen_before):
 *                     y=<size_t>((ypos-alen_before+<int>j)%self.ysize)
 *                     dll=self.occupy_map[x,y]             # <<<<<<<<<<<<<<
 *                     dll.remove_by_search(mi)
 *             for j in range(alen_before-mi.alen,1+alen_before+mi.alen):
 */
        if (unlikely(!__pyx_v_self->occupy_map.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 943, __pyx_L1_error)}
        __pyx_t_14 = __pyx_v_x;
        __pyx_t_15 = __pyx_v_y;
        __pyx_t_1 = -1;
        if (unlikely(__pyx_t_14 >= (size_t)__pyx_v_self->occupy_map.shape[0])) __pyx_t_1 = 0;
        if (unlikely(__pyx_t_15 >= (size_t)__pyx_v_self->occupy_map.shape[1])) __pyx_t_1 = 1;
        if (unlikely(__pyx_t_1 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_1);
          __PYX_ERR(1, 943, __pyx_L1_error)
        }
        __pyx_t_9 = (PyObject *) *((struct __pyx_obj_8world_cy_MinionDLL * *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->occupy_map.data + __pyx_t_14 * __pyx_v_self->occupy_map.strides[0]) ) + __pyx_t_15 * __pyx_v_self->occupy_map.strides[1]) ));
        __Pyx_INCREF((PyObject*)__pyx_t_9);
        __Pyx_XDECREF_SET(__pyx_v_dll, ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_9));
        __pyx_t_9 = 0;

        /* "world_cy.pyx":944
 *                     y=<size_t>((ypos-alen_before+<int>j)%self.ysize)
 *                     dll=self.occupy_map[x,y]
 *                     dll.remove_by_search(mi)             # <<<<<<<<<<<<<<
 *             for j in range(alen_before-mi.alen,1+alen_before+mi.alen):
 *                 y=<size_t>((ypos-alen_before+<int>j)%self.ysize)
 */
        ((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_dll->__pyx_vtab)->remove_by_search(__pyx_v_dll, __pyx_v_mi);
      }
    }

    /* "world_cy.pyx":945
 *                     dll=self.occupy_map[x,y]
 *                     dll.remove_by_search(mi)
 *             for j in range(alen_before-mi.alen,1+alen_before+mi.alen):             # <<<<<<<<<<<<<<
 *                 y=<size_t>((ypos-alen_before+<int>j)%self.ysize)
 *                 for i in range(alen_before-mi.alen):
 */
    __pyx_t_3 = ((1 + __pyx_v_alen_before) + __pyx_v_mi->alen);
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = (__pyx_v_alen_before - __pyx_v_mi->alen); __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_j = __pyx_t_5;

      /* "world_cy.pyx":946
 *                     dll.remove_by_search(mi)
 *             for j in range(alen_before-mi.alen,1+alen_before+mi.alen):
 *                 y=<size_t>((ypos-alen_before+<int>j)%self.ysize)             # <<<<<<<<<<<<<<
 *                 for i in range(alen_before-mi.alen):
 *                     x=<size_t>((xpos-alen_before+<int>i)%self.xsize)
 */
      __pyx_t_1 = ((__pyx_v_ypos - __pyx_v_alen_before) + ((int)__pyx_v_j));
      if (unlikely(__pyx_v_self->ysize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 946, __pyx_L1_error)
      }
      __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_1, __pyx_v_self->ysize));

      /* "world_cy.pyx":947
 *             for j in range(alen_before-mi.alen,1+alen_before+mi.alen):
 *                 y=<size_t>((ypos-alen_before+<int>j)%self.ysize)
 *                 for i in range(alen_before-mi.alen):             # <<<<<<<<<<<<<<
 *                     x=<size_t>((xpos-alen_before+<int>i)%self.xsize)
 *                     dll=self.occupy_map[x,y]
 */
      __pyx_t_1 = (__pyx_v_alen_before - __pyx_v_mi->alen);
      __pyx_t_6 = __pyx_t_1;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "world_cy.pyx":948
 *                 y=<size_t>((ypos-alen_before+<int>j)%self.ysize)
 *                 for i in range(alen_before-mi.alen):
 *                     x=<size_t>((xpos-alen_before+<int>i)%self.xsize)             # <<<<<<<<<<<<<<
 *                     dll=self.occupy_map[x,y]
 *                     dll.remove_by_search(mi)
 */
        __pyx_t_8 = ((__pyx_v_xpos - __pyx_v_alen_before) + ((int)__pyx_v_i));
        if (unlikely(__pyx_v_self->xsize == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(1, 948, __pyx_L1_error)
        }
        __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_8, __pyx_v_self->xsize));

        /* "world_cy.pyx":949
 *                 for i in range(alen_before-mi.alen):
 *                     x=<size_t>((xpos-alen_before+<int>i)%self.xsize)
 *                     dll=self.occupy_map[x,y]             # <<<<<<<<<<<<<<
 *                     dll.remove_by_search(mi)
 *                 for i in range(1+alen_before+mi.alen,1+2*alen_before):
 */
        if (unlikely(!__pyx_v_self->occupy_map.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 949, __pyx_L1_error)}
        __pyx_t_16 = __pyx_v_x;
        __pyx_t_17 = __pyx_v_y;
        __pyx_t_8 = -1;
        if (unlikely(__pyx_t_16 >= (size_t)__pyx_v_self->occupy_map.shape[0])) __pyx_t_8 = 0;
        if (unlikely(__pyx_t_17 >= (size_t)__pyx_v_self->occupy_map.shape[1])) __pyx_t_8 = 1;
        if (unlikely(__pyx_t_8 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_8);
          __PYX_ERR(1, 949, __pyx_L1_error)
        }
        __pyx_t_9 = (PyObject *) *((struct __pyx_obj_8world_cy_MinionDLL * *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->occupy_map.data + __pyx_t_16 * __pyx_v_self->occupy_map.strides[0]) ) + __pyx_t_17 * __pyx_v_self->occupy_map.strides[1]) ));
        __Pyx_INCREF((PyObject*)__pyx_t_9);
        __Pyx_XDECREF_SET(__pyx_v_dll, ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_9));
        __pyx_t_9 = 0;

        /* "world_cy.pyx":950
 *                     x=<size_t>((xpos-alen_before+<int>i)%self.xsize)
 *                     dll=self.occupy_map[x,y]
 *                     dll.remove_by_search(mi)             # <<<<<<<<<<<<<<
 *                 for i in range(1+alen_before+mi.alen,1+2*alen_before):
 *                     x=<size_t>((xpos-alen_before+<int>i)%self.xsize)
 */
        ((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_dll->__pyx_vtab)->remove_by_search(__pyx_v_dll, __pyx_v_mi);
      }

      /* "world_cy.pyx":951
 *                     dll=self.occupy_map[x,y]
 *                     dll.remove_by_search(mi)
 *                 for i in range(1+alen_before+mi.alen,1+2*alen_before):             # <<<<<<<<<<<<<<
 *                     x=<size_t>((xpos-alen_before+<int>i)%self.xsize)
 *                     dll=self.occupy_map[x,y]
 */
      __pyx_t_12 = (1 + (2 * __pyx_v_alen_before));
      __pyx_t_13 = __pyx_t_12;
      for (__pyx_t_7 = ((1 + __pyx_v_alen_before) + __pyx_v_mi->alen); __pyx_t_7 < __pyx_t_13; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "world_cy.pyx":952
 *                     dll.remove_by_search(mi)
 *                 for i in range(1+alen_before+mi.alen,1+2*alen_before):
 *                     x=<size_t>((xpos-alen_before+<int>i)%self.xsize)             # <<<<<<<<<<<<<<
 *                     dll=self.occupy_map[x,y]
 *                     dll.remove_by_search(mi)
 */
        __pyx_t_1 = ((__pyx_v_xpos - __pyx_v_alen_before) + ((int)__pyx_v_i));
        if (unlikely(__pyx_v_self->xsize == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(1, 952, __pyx_L1_error)
        }
        __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_1, __pyx_v_self->xsize));

        /* "world_cy.pyx":953
 *                 for i in range(1+alen_before+mi.alen,1+2*alen_before):
 *                     x=<size_t>((xpos-alen_before+<int>i)%self.xsize)
 *                     dll=self.occupy_map[x,y]             # <<<<<<<<<<<<<<
 *                     dll.remove_by_search(mi)
 *     cdef void take_energy(self,Minion mi,double amount):
 */
        if (unlikely(!__pyx_v_self->occupy_map.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 953, __pyx_L1_error)}
        __pyx_t_18 = __pyx_v_x;
        __pyx_t_19 = __pyx_v_y;
        __pyx_t_1 = -1;
        if (unlikely(__pyx_t_18 >= (size_t)__pyx_v_self->occupy_map.shape[0])) __pyx_t_1 = 0;
        if (unlikely(__pyx_t_19 >= (size_t)__pyx_v_self->occupy_map.shape[1])) __pyx_t_1 = 1;
        if (unlikely(__pyx_t_1 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_1);
          __PYX_ERR(1, 953, __pyx_L1_error)
        }
        __pyx_t_9 = (PyObject *) *((struct __pyx_obj_8world_cy_MinionDLL * *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->occupy_map.data + __pyx_t_18 * __pyx_v_self->occupy_map.strides[0]) ) + __pyx_t_19 * __pyx_v_self->occupy_map.strides[1]) ));
        __Pyx_INCREF((PyObject*)__pyx_t_9);
        __Pyx_XDECREF_SET(__pyx_v_dll, ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_9));
        __pyx_t_9 = 0;

        /* "world_cy.pyx":954
 *                     x=<size_t>((xpos-alen_before+<int>i)%self.xsize)
 *                     dll=self.occupy_map[x,y]
 *                     dll.remove_by_search(mi)             # <<<<<<<<<<<<<<
 *     cdef void take_energy(self,Minion mi,double amount):
 *         if self.no_energy:
 */
        ((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_dll->__pyx_vtab)->remove_by_search(__pyx_v_dll, __pyx_v_mi);
      }
    }

    /* "world_cy.pyx":934
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 *         if alen_before>mi.alen:             # <<<<<<<<<<<<<<
 *             for i in range(1+2*alen_before):
 *                 x=<size_t>((xpos-alen_before+<int>i)%self.xsize)
 */
  }

  /* "world_cy.pyx":926
 *                     dll=self.occupy_map[x,y]
 *                     dll.push(mi)
 *     cdef void loss_mass(self,Minion mi,double amount):             # <<<<<<<<<<<<<<
 *         cdef int alen_before,xpos,ypos
 *         cdef size_t i,j,x,y
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("world_cy.World.loss_mass", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dll);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":955
 *                     dll=self.occupy_map[x,y]
 *                     dll.remove_by_search(mi)
 *     cdef void take_energy(self,Minion mi,double amount):             # <<<<<<<<<<<<<<
 *         if self.no_energy:
 *             return
 */

static void __pyx_f_8world_cy_5World_take_energy(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, double __pyx_v_amount) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("take_energy", 0);
  __Pyx_TraceCall("take_energy", __pyx_f[1], 955, 0, __PYX_ERR(1, 955, __pyx_L1_error));

  /* "world_cy.pyx":956
 *                     dll.remove_by_search(mi)
 *     cdef void take_energy(self,Minion mi,double amount):
 *         if self.no_energy:             # <<<<<<<<<<<<<<
 *             return
 *         mi.take_energy(amount)
 */
  __pyx_t_1 = (__pyx_v_self->no_energy != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":957
 *     cdef void take_energy(self,Minion mi,double amount):
 *         if self.no_energy:
 *             return             # <<<<<<<<<<<<<<
 *         mi.take_energy(amount)
 *     cdef bint loss_energy(self,Minion mi,double amount):
 */
    goto __pyx_L0;

    /* "world_cy.pyx":956
 *                     dll.remove_by_search(mi)
 *     cdef void take_energy(self,Minion mi,double amount):
 *         if self.no_energy:             # <<<<<<<<<<<<<<
 *             return
 *         mi.take_energy(amount)
 */
  }

  /* "world_cy.pyx":958
 *         if self.no_energy:
 *             return
 *         mi.take_energy(amount)             # <<<<<<<<<<<<<<
 *     cdef bint loss_energy(self,Minion mi,double amount):
 *         if self.no_energy:
 */
  ((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_mi->__pyx_vtab)->take_energy(__pyx_v_mi, __pyx_v_amount);

  /* "world_cy.pyx":955
 *                     dll=self.occupy_map[x,y]
 *                     dll.remove_by_search(mi)
 *     cdef void take_energy(self,Minion mi,double amount):             # <<<<<<<<<<<<<<
 *         if self.no_energy:
 *             return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.World.take_energy", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":959
 *             return
 *         mi.take_energy(amount)
 *     cdef bint loss_energy(self,Minion mi,double amount):             # <<<<<<<<<<<<<<
 *         if self.no_energy:
 *             return True
 */

static int __pyx_f_8world_cy_5World_loss_energy(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, double __pyx_v_amount) {
  int __pyx_v_alive;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("loss_energy", 0);
  __Pyx_TraceCall("loss_energy", __pyx_f[1], 959, 0, __PYX_ERR(1, 959, __pyx_L1_error));

  /* "world_cy.pyx":960
 *         mi.take_energy(amount)
 *     cdef bint loss_energy(self,Minion mi,double amount):
 *         if self.no_energy:             # <<<<<<<<<<<<<<
 *             return True
 *         cdef bint alive
 */
  __pyx_t_1 = (__pyx_v_self->no_energy != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":961
 *     cdef bint loss_energy(self,Minion mi,double amount):
 *         if self.no_energy:
 *             return True             # <<<<<<<<<<<<<<
 *         cdef bint alive
 *         alive=mi.loss_energy(amount)
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "world_cy.pyx":960
 *         mi.take_energy(amount)
 *     cdef bint loss_energy(self,Minion mi,double amount):
 *         if self.no_energy:             # <<<<<<<<<<<<<<
 *             return True
 *         cdef bint alive
 */
  }

  /* "world_cy.pyx":963
 *             return True
 *         cdef bint alive
 *         alive=mi.loss_energy(amount)             # <<<<<<<<<<<<<<
 *         if not alive:
 *             #self.death_by("lack of energy")
 */
  __pyx_v_alive = ((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_mi->__pyx_vtab)->loss_energy(__pyx_v_mi, __pyx_v_amount);

  /* "world_cy.pyx":964
 *         cdef bint alive
 *         alive=mi.loss_energy(amount)
 *         if not alive:             # <<<<<<<<<<<<<<
 *             #self.death_by("lack of energy")
 *             self.kill(mi,corpse=True)
 */
  __pyx_t_1 = ((!(__pyx_v_alive != 0)) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":966
 *         if not alive:
 *             #self.death_by("lack of energy")
 *             self.kill(mi,corpse=True)             # <<<<<<<<<<<<<<
 *         return alive
 * 
 */
    ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->kill(__pyx_v_self, __pyx_v_mi, 1);

    /* "world_cy.pyx":964
 *         cdef bint alive
 *         alive=mi.loss_energy(amount)
 *         if not alive:             # <<<<<<<<<<<<<<
 *             #self.death_by("lack of energy")
 *             self.kill(mi,corpse=True)
 */
  }

  /* "world_cy.pyx":967
 *             #self.death_by("lack of energy")
 *             self.kill(mi,corpse=True)
 *         return alive             # <<<<<<<<<<<<<<
 * 
 *     cdef void childbirth(self,Minion girl,Minion boy):
 */
  __pyx_r = __pyx_v_alive;
  goto __pyx_L0;

  /* "world_cy.pyx":959
 *             return
 *         mi.take_energy(amount)
 *     cdef bint loss_energy(self,Minion mi,double amount):             # <<<<<<<<<<<<<<
 *         if self.no_energy:
 *             return True
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.World.loss_energy", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":969
 *         return alive
 * 
 *     cdef void childbirth(self,Minion girl,Minion boy):             # <<<<<<<<<<<<<<
 *         if self.no_birth:
 *             return
 */

static void __pyx_f_8world_cy_5World_childbirth(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_girl, struct __pyx_obj_8world_cy_Minion *__pyx_v_boy) {
  struct __pyx_obj_8world_cy_Minion *__pyx_v_child = 0;
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  int __pyx_v_xpos;
  int __pyx_v_ypos;
  int __pyx_v_alive;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  __pyx_ctuple_int__and_int __pyx_t_4;
  int __pyx_t_5;
  __pyx_ctuple_int__and_int__and_int __pyx_t_6;
  __Pyx_RefNannySetupContext("childbirth", 0);
  __Pyx_TraceCall("childbirth", __pyx_f[1], 969, 0, __PYX_ERR(1, 969, __pyx_L1_error));

  /* "world_cy.pyx":970
 * 
 *     cdef void childbirth(self,Minion girl,Minion boy):
 *         if self.no_birth:             # <<<<<<<<<<<<<<
 *             return
 *         cdef Minion child
 */
  __pyx_t_1 = (__pyx_v_self->no_birth != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":971
 *     cdef void childbirth(self,Minion girl,Minion boy):
 *         if self.no_birth:
 *             return             # <<<<<<<<<<<<<<
 *         cdef Minion child
 *         cdef size_t x,y
 */
    goto __pyx_L0;

    /* "world_cy.pyx":970
 * 
 *     cdef void childbirth(self,Minion girl,Minion boy):
 *         if self.no_birth:             # <<<<<<<<<<<<<<
 *             return
 *         cdef Minion child
 */
  }

  /* "world_cy.pyx":976
 *         cdef int xpos,ypos
 *         cdef bint alive
 *         xpos=<int>girl.pos[0]             # <<<<<<<<<<<<<<
 *         ypos=<int>girl.pos[1]
 *         if girl.mergeable(boy):
 */
  __pyx_v_xpos = ((int)__pyx_v_girl->pos.f0);

  /* "world_cy.pyx":977
 *         cdef bint alive
 *         xpos=<int>girl.pos[0]
 *         ypos=<int>girl.pos[1]             # <<<<<<<<<<<<<<
 *         if girl.mergeable(boy):
 *             child=girl.get_child(boy)
 */
  __pyx_v_ypos = ((int)__pyx_v_girl->pos.f1);

  /* "world_cy.pyx":978
 *         xpos=<int>girl.pos[0]
 *         ypos=<int>girl.pos[1]
 *         if girl.mergeable(boy):             # <<<<<<<<<<<<<<
 *             child=girl.get_child(boy)
 *             if girl.move_direc==0:
 */
  __pyx_t_1 = (((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_girl->__pyx_vtab)->mergeable(__pyx_v_girl, __pyx_v_boy) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":979
 *         ypos=<int>girl.pos[1]
 *         if girl.mergeable(boy):
 *             child=girl.get_child(boy)             # <<<<<<<<<<<<<<
 *             if girl.move_direc==0:
 *                 x=<size_t>((xpos-girl.alen-3)%self.xsize)
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_girl->__pyx_vtab)->get_child(__pyx_v_girl, __pyx_v_boy)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 979, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_child = ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "world_cy.pyx":980
 *         if girl.mergeable(boy):
 *             child=girl.get_child(boy)
 *             if girl.move_direc==0:             # <<<<<<<<<<<<<<
 *                 x=<size_t>((xpos-girl.alen-3)%self.xsize)
 *                 y=<size_t>ypos
 */
    switch (__pyx_v_girl->move_direc) {
      case 0:

      /* "world_cy.pyx":981
 *             child=girl.get_child(boy)
 *             if girl.move_direc==0:
 *                 x=<size_t>((xpos-girl.alen-3)%self.xsize)             # <<<<<<<<<<<<<<
 *                 y=<size_t>ypos
 *             elif girl.move_direc==1:
 */
      __pyx_t_3 = ((__pyx_v_xpos - __pyx_v_girl->alen) - 3);
      if (unlikely(__pyx_v_self->xsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 981, __pyx_L1_error)
      }
      __pyx_v_x = ((size_t)__Pyx_mod_long(__pyx_t_3, __pyx_v_self->xsize));

      /* "world_cy.pyx":982
 *             if girl.move_direc==0:
 *                 x=<size_t>((xpos-girl.alen-3)%self.xsize)
 *                 y=<size_t>ypos             # <<<<<<<<<<<<<<
 *             elif girl.move_direc==1:
 *                 x=<size_t>xpos
 */
      __pyx_v_y = ((size_t)__pyx_v_ypos);

      /* "world_cy.pyx":980
 *         if girl.mergeable(boy):
 *             child=girl.get_child(boy)
 *             if girl.move_direc==0:             # <<<<<<<<<<<<<<
 *                 x=<size_t>((xpos-girl.alen-3)%self.xsize)
 *                 y=<size_t>ypos
 */
      break;
      case 1:

      /* "world_cy.pyx":984
 *                 y=<size_t>ypos
 *             elif girl.move_direc==1:
 *                 x=<size_t>xpos             # <<<<<<<<<<<<<<
 *                 y=<size_t>((ypos-girl.alen-3)%self.ysize)
 *             elif girl.move_direc==2:
 */
      __pyx_v_x = ((size_t)__pyx_v_xpos);

      /* "world_cy.pyx":985
 *             elif girl.move_direc==1:
 *                 x=<size_t>xpos
 *                 y=<size_t>((ypos-girl.alen-3)%self.ysize)             # <<<<<<<<<<<<<<
 *             elif girl.move_direc==2:
 *                 x=<size_t>((xpos+girl.alen+3)%self.xsize)
 */
      __pyx_t_3 = ((__pyx_v_ypos - __pyx_v_girl->alen) - 3);
      if (unlikely(__pyx_v_self->ysize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 985, __pyx_L1_error)
      }
      __pyx_v_y = ((size_t)__Pyx_mod_long(__pyx_t_3, __pyx_v_self->ysize));

      /* "world_cy.pyx":983
 *                 x=<size_t>((xpos-girl.alen-3)%self.xsize)
 *                 y=<size_t>ypos
 *             elif girl.move_direc==1:             # <<<<<<<<<<<<<<
 *                 x=<size_t>xpos
 *                 y=<size_t>((ypos-girl.alen-3)%self.ysize)
 */
      break;
      case 2:

      /* "world_cy.pyx":987
 *                 y=<size_t>((ypos-girl.alen-3)%self.ysize)
 *             elif girl.move_direc==2:
 *                 x=<size_t>((xpos+girl.alen+3)%self.xsize)             # <<<<<<<<<<<<<<
 *                 y=<size_t>ypos
 *             elif girl.move_direc==3:
 */
      __pyx_t_3 = ((__pyx_v_xpos + __pyx_v_girl->alen) + 3);
      if (unlikely(__pyx_v_self->xsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 987, __pyx_L1_error)
      }
      __pyx_v_x = ((size_t)__Pyx_mod_long(__pyx_t_3, __pyx_v_self->xsize));

      /* "world_cy.pyx":988
 *             elif girl.move_direc==2:
 *                 x=<size_t>((xpos+girl.alen+3)%self.xsize)
 *                 y=<size_t>ypos             # <<<<<<<<<<<<<<
 *             elif girl.move_direc==3:
 *                 x=<size_t>xpos
 */
      __pyx_v_y = ((size_t)__pyx_v_ypos);

      /* "world_cy.pyx":986
 *                 x=<size_t>xpos
 *                 y=<size_t>((ypos-girl.alen-3)%self.ysize)
 *             elif girl.move_direc==2:             # <<<<<<<<<<<<<<
 *                 x=<size_t>((xpos+girl.alen+3)%self.xsize)
 *                 y=<size_t>ypos
 */
      break;
      case 3:

      /* "world_cy.pyx":990
 *                 y=<size_t>ypos
 *             elif girl.move_direc==3:
 *                 x=<size_t>xpos             # <<<<<<<<<<<<<<
 *                 y=<size_t>((ypos+girl.alen+3)%self.ysize)
 *             child.pos=(x,y)
 */
      __pyx_v_x = ((size_t)__pyx_v_xpos);

      /* "world_cy.pyx":991
 *             elif girl.move_direc==3:
 *                 x=<size_t>xpos
 *                 y=<size_t>((ypos+girl.alen+3)%self.ysize)             # <<<<<<<<<<<<<<
 *             child.pos=(x,y)
 *             self.loss_mass(girl,child.mass)
 */
      __pyx_t_3 = ((__pyx_v_ypos + __pyx_v_girl->alen) + 3);
      if (unlikely(__pyx_v_self->ysize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 991, __pyx_L1_error)
      }
      __pyx_v_y = ((size_t)__Pyx_mod_long(__pyx_t_3, __pyx_v_self->ysize));

      /* "world_cy.pyx":989
 *                 x=<size_t>((xpos+girl.alen+3)%self.xsize)
 *                 y=<size_t>ypos
 *             elif girl.move_direc==3:             # <<<<<<<<<<<<<<
 *                 x=<size_t>xpos
 *                 y=<size_t>((ypos+girl.alen+3)%self.ysize)
 */
      break;
      default: break;
    }

    /* "world_cy.pyx":992
 *                 x=<size_t>xpos
 *                 y=<size_t>((ypos+girl.alen+3)%self.ysize)
 *             child.pos=(x,y)             # <<<<<<<<<<<<<<
 *             self.loss_mass(girl,child.mass)
 *             alive=self.loss_energy(girl,girl.energy_with_constant(girl.birth_consum_rate))
 */
    __pyx_t_4.f0 = __pyx_v_x;
    __pyx_t_4.f1 = __pyx_v_y;
    __pyx_v_child->pos = __pyx_t_4;

    /* "world_cy.pyx":993
 *                 y=<size_t>((ypos+girl.alen+3)%self.ysize)
 *             child.pos=(x,y)
 *             self.loss_mass(girl,child.mass)             # <<<<<<<<<<<<<<
 *             alive=self.loss_energy(girl,girl.energy_with_constant(girl.birth_consum_rate))
 *             if alive and girl.alen<1:
 */
    ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->loss_mass(__pyx_v_self, __pyx_v_girl, __pyx_v_child->mass);

    /* "world_cy.pyx":994
 *             child.pos=(x,y)
 *             self.loss_mass(girl,child.mass)
 *             alive=self.loss_energy(girl,girl.energy_with_constant(girl.birth_consum_rate))             # <<<<<<<<<<<<<<
 *             if alive and girl.alen<1:
 *                 self.kill(girl,corpse=True)
 */
    __pyx_v_alive = ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->loss_energy(__pyx_v_self, __pyx_v_girl, ((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_girl->__pyx_vtab)->energy_with_constant(__pyx_v_girl, __pyx_v_girl->birth_consum_rate));

    /* "world_cy.pyx":995
 *             self.loss_mass(girl,child.mass)
 *             alive=self.loss_energy(girl,girl.energy_with_constant(girl.birth_consum_rate))
 *             if alive and girl.alen<1:             # <<<<<<<<<<<<<<
 *                 self.kill(girl,corpse=True)
 *             self.register(child)
 */
    __pyx_t_5 = (__pyx_v_alive != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_1 = __pyx_t_5;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_5 = ((__pyx_v_girl->alen < 1) != 0);
    __pyx_t_1 = __pyx_t_5;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_1) {

      /* "world_cy.pyx":996
 *             alive=self.loss_energy(girl,girl.energy_with_constant(girl.birth_consum_rate))
 *             if alive and girl.alen<1:
 *                 self.kill(girl,corpse=True)             # <<<<<<<<<<<<<<
 *             self.register(child)
 *             if self.record_pedigree:
 */
      ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->kill(__pyx_v_self, __pyx_v_girl, 1);

      /* "world_cy.pyx":995
 *             self.loss_mass(girl,child.mass)
 *             alive=self.loss_energy(girl,girl.energy_with_constant(girl.birth_consum_rate))
 *             if alive and girl.alen<1:             # <<<<<<<<<<<<<<
 *                 self.kill(girl,corpse=True)
 *             self.register(child)
 */
    }

    /* "world_cy.pyx":997
 *             if alive and girl.alen<1:
 *                 self.kill(girl,corpse=True)
 *             self.register(child)             # <<<<<<<<<<<<<<
 *             if self.record_pedigree:
 *                 self.pedigree.push_back((girl.id,boy.id,child.id))
 */
    ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->__pyx_register(__pyx_v_self, __pyx_v_child);

    /* "world_cy.pyx":998
 *                 self.kill(girl,corpse=True)
 *             self.register(child)
 *             if self.record_pedigree:             # <<<<<<<<<<<<<<
 *                 self.pedigree.push_back((girl.id,boy.id,child.id))
 *     cdef bint huntable(self,Minion pred,Minion pray):
 */
    __pyx_t_1 = (__pyx_v_self->record_pedigree != 0);
    if (__pyx_t_1) {

      /* "world_cy.pyx":999
 *             self.register(child)
 *             if self.record_pedigree:
 *                 self.pedigree.push_back((girl.id,boy.id,child.id))             # <<<<<<<<<<<<<<
 *     cdef bint huntable(self,Minion pred,Minion pray):
 *         return (not self.no_hunt) and max(dist(pred.pos[0],pray.pos[0],self.xsize),dist(pred.pos[1],pray.pos[1],self.ysize))<=pred.alen-pray.alen and pred!=pray
 */
      __pyx_t_6.f0 = __pyx_v_girl->id;
      __pyx_t_6.f1 = __pyx_v_boy->id;
      __pyx_t_6.f2 = __pyx_v_child->id;
      try {
        __pyx_v_self->pedigree.push_back(__pyx_t_6);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 999, __pyx_L1_error)
      }

      /* "world_cy.pyx":998
 *                 self.kill(girl,corpse=True)
 *             self.register(child)
 *             if self.record_pedigree:             # <<<<<<<<<<<<<<
 *                 self.pedigree.push_back((girl.id,boy.id,child.id))
 *     cdef bint huntable(self,Minion pred,Minion pray):
 */
    }

    /* "world_cy.pyx":978
 *         xpos=<int>girl.pos[0]
 *         ypos=<int>girl.pos[1]
 *         if girl.mergeable(boy):             # <<<<<<<<<<<<<<
 *             child=girl.get_child(boy)
 *             if girl.move_direc==0:
 */
  }

  /* "world_cy.pyx":969
 *         return alive
 * 
 *     cdef void childbirth(self,Minion girl,Minion boy):             # <<<<<<<<<<<<<<
 *         if self.no_birth:
 *             return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("world_cy.World.childbirth", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1000
 *             if self.record_pedigree:
 *                 self.pedigree.push_back((girl.id,boy.id,child.id))
 *     cdef bint huntable(self,Minion pred,Minion pray):             # <<<<<<<<<<<<<<
 *         return (not self.no_hunt) and max(dist(pred.pos[0],pray.pos[0],self.xsize),dist(pred.pos[1],pray.pos[1],self.ysize))<=pred.alen-pray.alen and pred!=pray
 * 
 */

static int __pyx_f_8world_cy_5World_huntable(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_pred, struct __pyx_obj_8world_cy_Minion *__pyx_v_pray) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("huntable", 0);
  __Pyx_TraceCall("huntable", __pyx_f[1], 1000, 0, __PYX_ERR(1, 1000, __pyx_L1_error));

  /* "world_cy.pyx":1001
 *                 self.pedigree.push_back((girl.id,boy.id,child.id))
 *     cdef bint huntable(self,Minion pred,Minion pray):
 *         return (not self.no_hunt) and max(dist(pred.pos[0],pray.pos[0],self.xsize),dist(pred.pos[1],pray.pos[1],self.ysize))<=pred.alen-pray.alen and pred!=pray             # <<<<<<<<<<<<<<
 * 
 *     cdef void mk_corpse(self,Minion mi):
 */
  __pyx_t_2 = ((!(__pyx_v_self->no_hunt != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_3 = __pyx_f_8world_cy_dist(__pyx_v_pred->pos.f1, __pyx_v_pray->pos.f1, __pyx_v_self->ysize);
  __pyx_t_4 = __pyx_f_8world_cy_dist(__pyx_v_pred->pos.f0, __pyx_v_pray->pos.f0, __pyx_v_self->xsize);
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_t_2 = ((__pyx_t_5 <= (__pyx_v_pred->alen - __pyx_v_pray->alen)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_6 = PyObject_RichCompare(((PyObject *)__pyx_v_pred), ((PyObject *)__pyx_v_pray), Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1001, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 1001, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "world_cy.pyx":1000
 *             if self.record_pedigree:
 *                 self.pedigree.push_back((girl.id,boy.id,child.id))
 *     cdef bint huntable(self,Minion pred,Minion pray):             # <<<<<<<<<<<<<<
 *         return (not self.no_hunt) and max(dist(pred.pos[0],pray.pos[0],self.xsize),dist(pred.pos[1],pray.pos[1],self.ysize))<=pred.alen-pray.alen and pred!=pray
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("world_cy.World.huntable", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1003
 *         return (not self.no_hunt) and max(dist(pred.pos[0],pray.pos[0],self.xsize),dist(pred.pos[1],pray.pos[1],self.ysize))<=pred.alen-pray.alen and pred!=pray
 * 
 *     cdef void mk_corpse(self,Minion mi):             # <<<<<<<<<<<<<<
 *         cdef int area,xpos,ypos,k
 *         cdef double q,r
 */

static void __pyx_f_8world_cy_5World_mk_corpse(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi) {
  int __pyx_v_area;
  int __pyx_v_xpos;
  int __pyx_v_ypos;
  int __pyx_v_k;
  double __pyx_v_q;
  double __pyx_v_r;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  int __pyx_t_8;
  size_t __pyx_t_9;
  size_t __pyx_t_10;
  int __pyx_t_11;
  size_t __pyx_t_12;
  size_t __pyx_t_13;
  size_t __pyx_t_14;
  size_t __pyx_t_15;
  __Pyx_RefNannySetupContext("mk_corpse", 0);
  __Pyx_TraceCall("mk_corpse", __pyx_f[1], 1003, 0, __PYX_ERR(1, 1003, __pyx_L1_error));

  /* "world_cy.pyx":1007
 *         cdef double q,r
 *         cdef size_t i,j,x,y
 *         area=(1+2*mi.alen)**2             # <<<<<<<<<<<<<<
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 */
  __pyx_v_area = __Pyx_pow_long((1 + (2 * __pyx_v_mi->alen)), 2);

  /* "world_cy.pyx":1008
 *         cdef size_t i,j,x,y
 *         area=(1+2*mi.alen)**2
 *         xpos=mi.pos[0]             # <<<<<<<<<<<<<<
 *         ypos=mi.pos[1]
 *         q=<double>((<int>mi.mass)/(<int>area))
 */
  __pyx_v_xpos = __pyx_v_mi->pos.f0;

  /* "world_cy.pyx":1009
 *         area=(1+2*mi.alen)**2
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]             # <<<<<<<<<<<<<<
 *         q=<double>((<int>mi.mass)/(<int>area))
 *         r=mi.mass%area
 */
  __pyx_v_ypos = __pyx_v_mi->pos.f1;

  /* "world_cy.pyx":1010
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 *         q=<double>((<int>mi.mass)/(<int>area))             # <<<<<<<<<<<<<<
 *         r=mi.mass%area
 *         for i in range(1+2*<size_t>mi.alen):
 */
  if (unlikely(((int)__pyx_v_area) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(1, 1010, __pyx_L1_error)
  }
  else if (sizeof(int) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(((int)__pyx_v_area) == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(((int)__pyx_v_mi->mass)))) {
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    __PYX_ERR(1, 1010, __pyx_L1_error)
  }
  __pyx_v_q = ((double)__Pyx_div_int(((int)__pyx_v_mi->mass), ((int)__pyx_v_area)));

  /* "world_cy.pyx":1011
 *         ypos=mi.pos[1]
 *         q=<double>((<int>mi.mass)/(<int>area))
 *         r=mi.mass%area             # <<<<<<<<<<<<<<
 *         for i in range(1+2*<size_t>mi.alen):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 */
  if (unlikely(__pyx_v_area == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
    __PYX_ERR(1, 1011, __pyx_L1_error)
  }
  __pyx_v_r = __Pyx_mod_double(__pyx_v_mi->mass, __pyx_v_area);

  /* "world_cy.pyx":1012
 *         q=<double>((<int>mi.mass)/(<int>area))
 *         r=mi.mass%area
 *         for i in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(1+2*<size_t>mi.alen):
 */
  __pyx_t_1 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "world_cy.pyx":1013
 *         r=mi.mass%area
 *         for i in range(1+2*<size_t>mi.alen):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)             # <<<<<<<<<<<<<<
 *             for j in range(1+2*<size_t>mi.alen):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 */
    __pyx_t_4 = ((__pyx_v_xpos - __pyx_v_mi->alen) + ((int)__pyx_v_i));
    if (unlikely(__pyx_v_self->xsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 1013, __pyx_L1_error)
    }
    __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_4, __pyx_v_self->xsize));

    /* "world_cy.pyx":1014
 *         for i in range(1+2*<size_t>mi.alen):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 k=(<int>i)*(1+2*mi.alen)+<int>j
 */
    __pyx_t_5 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "world_cy.pyx":1015
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(1+2*<size_t>mi.alen):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)             # <<<<<<<<<<<<<<
 *                 k=(<int>i)*(1+2*mi.alen)+<int>j
 *                 if (<double>k)<=r-1:
 */
      __pyx_t_4 = ((__pyx_v_ypos - __pyx_v_mi->alen) + ((int)__pyx_v_j));
      if (unlikely(__pyx_v_self->ysize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 1015, __pyx_L1_error)
      }
      __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_4, __pyx_v_self->ysize));

      /* "world_cy.pyx":1016
 *             for j in range(1+2*<size_t>mi.alen):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 k=(<int>i)*(1+2*mi.alen)+<int>j             # <<<<<<<<<<<<<<
 *                 if (<double>k)<=r-1:
 *                     self.mins[x,y]+=q+1
 */
      __pyx_v_k = ((((int)__pyx_v_i) * (1 + (2 * __pyx_v_mi->alen))) + ((int)__pyx_v_j));

      /* "world_cy.pyx":1017
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 k=(<int>i)*(1+2*mi.alen)+<int>j
 *                 if (<double>k)<=r-1:             # <<<<<<<<<<<<<<
 *                     self.mins[x,y]+=q+1
 *                 elif r-1<(<double>k)<r:
 */
      __pyx_t_8 = ((((double)__pyx_v_k) <= (__pyx_v_r - 1.0)) != 0);
      if (__pyx_t_8) {

        /* "world_cy.pyx":1018
 *                 k=(<int>i)*(1+2*mi.alen)+<int>j
 *                 if (<double>k)<=r-1:
 *                     self.mins[x,y]+=q+1             # <<<<<<<<<<<<<<
 *                 elif r-1<(<double>k)<r:
 *                     self.mins[x,y]+=q+r-<double><int>r
 */
        if (unlikely(!__pyx_v_self->mins.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1018, __pyx_L1_error)}
        __pyx_t_9 = __pyx_v_x;
        __pyx_t_10 = __pyx_v_y;
        __pyx_t_4 = -1;
        if (unlikely(__pyx_t_9 >= (size_t)__pyx_v_self->mins.shape[0])) __pyx_t_4 = 0;
        if (unlikely(__pyx_t_10 >= (size_t)__pyx_v_self->mins.shape[1])) __pyx_t_4 = 1;
        if (unlikely(__pyx_t_4 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_4);
          __PYX_ERR(1, 1018, __pyx_L1_error)
        }
        *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->mins.data + __pyx_t_9 * __pyx_v_self->mins.strides[0]) ) + __pyx_t_10 * __pyx_v_self->mins.strides[1]) )) += (__pyx_v_q + 1.0);

        /* "world_cy.pyx":1017
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 k=(<int>i)*(1+2*mi.alen)+<int>j
 *                 if (<double>k)<=r-1:             # <<<<<<<<<<<<<<
 *                     self.mins[x,y]+=q+1
 *                 elif r-1<(<double>k)<r:
 */
        goto __pyx_L7;
      }

      /* "world_cy.pyx":1019
 *                 if (<double>k)<=r-1:
 *                     self.mins[x,y]+=q+1
 *                 elif r-1<(<double>k)<r:             # <<<<<<<<<<<<<<
 *                     self.mins[x,y]+=q+r-<double><int>r
 *                 else:
 */
      __pyx_t_8 = ((__pyx_v_r - 1.0) < ((double)__pyx_v_k));
      if (__pyx_t_8) {
        __pyx_t_8 = (((double)__pyx_v_k) < __pyx_v_r);
      }
      __pyx_t_11 = (__pyx_t_8 != 0);
      if (__pyx_t_11) {

        /* "world_cy.pyx":1020
 *                     self.mins[x,y]+=q+1
 *                 elif r-1<(<double>k)<r:
 *                     self.mins[x,y]+=q+r-<double><int>r             # <<<<<<<<<<<<<<
 *                 else:
 *                     self.mins[x,y]+=q
 */
        if (unlikely(!__pyx_v_self->mins.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1020, __pyx_L1_error)}
        __pyx_t_12 = __pyx_v_x;
        __pyx_t_13 = __pyx_v_y;
        __pyx_t_4 = -1;
        if (unlikely(__pyx_t_12 >= (size_t)__pyx_v_self->mins.shape[0])) __pyx_t_4 = 0;
        if (unlikely(__pyx_t_13 >= (size_t)__pyx_v_self->mins.shape[1])) __pyx_t_4 = 1;
        if (unlikely(__pyx_t_4 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_4);
          __PYX_ERR(1, 1020, __pyx_L1_error)
        }
        *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->mins.data + __pyx_t_12 * __pyx_v_self->mins.strides[0]) ) + __pyx_t_13 * __pyx_v_self->mins.strides[1]) )) += ((__pyx_v_q + __pyx_v_r) - ((double)((int)__pyx_v_r)));

        /* "world_cy.pyx":1019
 *                 if (<double>k)<=r-1:
 *                     self.mins[x,y]+=q+1
 *                 elif r-1<(<double>k)<r:             # <<<<<<<<<<<<<<
 *                     self.mins[x,y]+=q+r-<double><int>r
 *                 else:
 */
        goto __pyx_L7;
      }

      /* "world_cy.pyx":1022
 *                     self.mins[x,y]+=q+r-<double><int>r
 *                 else:
 *                     self.mins[x,y]+=q             # <<<<<<<<<<<<<<
 * 
 *     cdef void kill(self,Minion mi,bint corpse):
 */
      /*else*/ {
        if (unlikely(!__pyx_v_self->mins.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1022, __pyx_L1_error)}
        __pyx_t_14 = __pyx_v_x;
        __pyx_t_15 = __pyx_v_y;
        __pyx_t_4 = -1;
        if (unlikely(__pyx_t_14 >= (size_t)__pyx_v_self->mins.shape[0])) __pyx_t_4 = 0;
        if (unlikely(__pyx_t_15 >= (size_t)__pyx_v_self->mins.shape[1])) __pyx_t_4 = 1;
        if (unlikely(__pyx_t_4 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_4);
          __PYX_ERR(1, 1022, __pyx_L1_error)
        }
        *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->mins.data + __pyx_t_14 * __pyx_v_self->mins.strides[0]) ) + __pyx_t_15 * __pyx_v_self->mins.strides[1]) )) += __pyx_v_q;
      }
      __pyx_L7:;
    }
  }

  /* "world_cy.pyx":1003
 *         return (not self.no_hunt) and max(dist(pred.pos[0],pray.pos[0],self.xsize),dist(pred.pos[1],pray.pos[1],self.ysize))<=pred.alen-pray.alen and pred!=pray
 * 
 *     cdef void mk_corpse(self,Minion mi):             # <<<<<<<<<<<<<<
 *         cdef int area,xpos,ypos,k
 *         cdef double q,r
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.World.mk_corpse", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1024
 *                     self.mins[x,y]+=q
 * 
 *     cdef void kill(self,Minion mi,bint corpse):             # <<<<<<<<<<<<<<
 *         if mi.dead:
 *             return
 */

static void __pyx_f_8world_cy_5World_kill(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, int __pyx_v_corpse) {
  int __pyx_v_xpos;
  int __pyx_v_ypos;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_dll = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  size_t __pyx_t_11;
  __Pyx_RefNannySetupContext("kill", 0);
  __Pyx_TraceCall("kill", __pyx_f[1], 1024, 0, __PYX_ERR(1, 1024, __pyx_L1_error));

  /* "world_cy.pyx":1025
 * 
 *     cdef void kill(self,Minion mi,bint corpse):
 *         if mi.dead:             # <<<<<<<<<<<<<<
 *             return
 *         if corpse:
 */
  __pyx_t_1 = (__pyx_v_mi->dead != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1026
 *     cdef void kill(self,Minion mi,bint corpse):
 *         if mi.dead:
 *             return             # <<<<<<<<<<<<<<
 *         if corpse:
 *             self.mk_corpse(mi)
 */
    goto __pyx_L0;

    /* "world_cy.pyx":1025
 * 
 *     cdef void kill(self,Minion mi,bint corpse):
 *         if mi.dead:             # <<<<<<<<<<<<<<
 *             return
 *         if corpse:
 */
  }

  /* "world_cy.pyx":1027
 *         if mi.dead:
 *             return
 *         if corpse:             # <<<<<<<<<<<<<<
 *             self.mk_corpse(mi)
 *         cdef int xpos,ypos
 */
  __pyx_t_1 = (__pyx_v_corpse != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1028
 *             return
 *         if corpse:
 *             self.mk_corpse(mi)             # <<<<<<<<<<<<<<
 *         cdef int xpos,ypos
 *         cdef size_t i,j,x,y
 */
    ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->mk_corpse(__pyx_v_self, __pyx_v_mi);

    /* "world_cy.pyx":1027
 *         if mi.dead:
 *             return
 *         if corpse:             # <<<<<<<<<<<<<<
 *             self.mk_corpse(mi)
 *         cdef int xpos,ypos
 */
  }

  /* "world_cy.pyx":1032
 *         cdef size_t i,j,x,y
 *         cdef MinionDLL dll
 *         xpos=mi.pos[0]             # <<<<<<<<<<<<<<
 *         ypos=mi.pos[1]
 *         for i in range(1+2*<size_t>mi.alen):
 */
  __pyx_v_xpos = __pyx_v_mi->pos.f0;

  /* "world_cy.pyx":1033
 *         cdef MinionDLL dll
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]             # <<<<<<<<<<<<<<
 *         for i in range(1+2*<size_t>mi.alen):
 *             for j in range(1+2*<size_t>mi.alen):
 */
  __pyx_v_ypos = __pyx_v_mi->pos.f1;

  /* "world_cy.pyx":1034
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 *         for i in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *             for j in range(1+2*<size_t>mi.alen):
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 */
  __pyx_t_2 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "world_cy.pyx":1035
 *         ypos=mi.pos[1]
 *         for i in range(1+2*<size_t>mi.alen):
 *             for j in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 */
    __pyx_t_5 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "world_cy.pyx":1036
 *         for i in range(1+2*<size_t>mi.alen):
 *             for j in range(1+2*<size_t>mi.alen):
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)             # <<<<<<<<<<<<<<
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 dll=self.occupy_map[x,y]
 */
      __pyx_t_8 = ((__pyx_v_xpos - __pyx_v_mi->alen) + ((int)__pyx_v_i));
      if (unlikely(__pyx_v_self->xsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 1036, __pyx_L1_error)
      }
      __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_8, __pyx_v_self->xsize));

      /* "world_cy.pyx":1037
 *             for j in range(1+2*<size_t>mi.alen):
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)             # <<<<<<<<<<<<<<
 *                 dll=self.occupy_map[x,y]
 *                 dll.remove_by_search(mi)
 */
      __pyx_t_8 = ((__pyx_v_ypos - __pyx_v_mi->alen) + ((int)__pyx_v_j));
      if (unlikely(__pyx_v_self->ysize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 1037, __pyx_L1_error)
      }
      __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_8, __pyx_v_self->ysize));

      /* "world_cy.pyx":1038
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 dll=self.occupy_map[x,y]             # <<<<<<<<<<<<<<
 *                 dll.remove_by_search(mi)
 *         mi.dead=True
 */
      if (unlikely(!__pyx_v_self->occupy_map.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1038, __pyx_L1_error)}
      __pyx_t_10 = __pyx_v_x;
      __pyx_t_11 = __pyx_v_y;
      __pyx_t_8 = -1;
      if (unlikely(__pyx_t_10 >= (size_t)__pyx_v_self->occupy_map.shape[0])) __pyx_t_8 = 0;
      if (unlikely(__pyx_t_11 >= (size_t)__pyx_v_self->occupy_map.shape[1])) __pyx_t_8 = 1;
      if (unlikely(__pyx_t_8 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_8);
        __PYX_ERR(1, 1038, __pyx_L1_error)
      }
      __pyx_t_9 = (PyObject *) *((struct __pyx_obj_8world_cy_MinionDLL * *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->occupy_map.data + __pyx_t_10 * __pyx_v_self->occupy_map.strides[0]) ) + __pyx_t_11 * __pyx_v_self->occupy_map.strides[1]) ));
      __Pyx_INCREF((PyObject*)__pyx_t_9);
      __Pyx_XDECREF_SET(__pyx_v_dll, ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_9));
      __pyx_t_9 = 0;

      /* "world_cy.pyx":1039
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 dll=self.occupy_map[x,y]
 *                 dll.remove_by_search(mi)             # <<<<<<<<<<<<<<
 *         mi.dead=True
 * 
 */
      ((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_dll->__pyx_vtab)->remove_by_search(__pyx_v_dll, __pyx_v_mi);
    }
  }

  /* "world_cy.pyx":1040
 *                 dll=self.occupy_map[x,y]
 *                 dll.remove_by_search(mi)
 *         mi.dead=True             # <<<<<<<<<<<<<<
 * 
 *     cdef void kill_elderly(self):
 */
  __pyx_v_mi->dead = 1;

  /* "world_cy.pyx":1024
 *                     self.mins[x,y]+=q
 * 
 *     cdef void kill(self,Minion mi,bint corpse):             # <<<<<<<<<<<<<<
 *         if mi.dead:
 *             return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("world_cy.World.kill", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dll);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1042
 *         mi.dead=True
 * 
 *     cdef void kill_elderly(self):             # <<<<<<<<<<<<<<
 *         if self.no_age or self.mis.len==0:
 *             return
 */

static void __pyx_f_8world_cy_5World_kill_elderly(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_next_node = 0;
  struct __pyx_obj_8world_cy_Minion *__pyx_v_mi = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("kill_elderly", 0);
  __Pyx_TraceCall("kill_elderly", __pyx_f[1], 1042, 0, __PYX_ERR(1, 1042, __pyx_L1_error));

  /* "world_cy.pyx":1043
 * 
 *     cdef void kill_elderly(self):
 *         if self.no_age or self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return
 *         cdef MinionDLLNode node,next_node
 */
  __pyx_t_2 = (__pyx_v_self->no_age != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->mis->len == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "world_cy.pyx":1044
 *     cdef void kill_elderly(self):
 *         if self.no_age or self.mis.len==0:
 *             return             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode node,next_node
 *         cdef Minion mi
 */
    goto __pyx_L0;

    /* "world_cy.pyx":1043
 * 
 *     cdef void kill_elderly(self):
 *         if self.no_age or self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return
 *         cdef MinionDLLNode node,next_node
 */
  }

  /* "world_cy.pyx":1047
 *         cdef MinionDLLNode node,next_node
 *         cdef Minion mi
 *         node=self.mis.head             # <<<<<<<<<<<<<<
 *         while not node.is_tail:
 *             next_node=self.mis.next(node)
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->mis->head);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "world_cy.pyx":1048
 *         cdef Minion mi
 *         node=self.mis.head
 *         while not node.is_tail:             # <<<<<<<<<<<<<<
 *             next_node=self.mis.next(node)
 *             mi=node.mi
 */
  while (1) {
    __pyx_t_1 = ((!(__pyx_v_node->is_tail != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "world_cy.pyx":1049
 *         node=self.mis.head
 *         while not node.is_tail:
 *             next_node=self.mis.next(node)             # <<<<<<<<<<<<<<
 *             mi=node.mi
 *             if not mi.increase_age():
 */
    __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->mis->__pyx_vtab)->next(__pyx_v_self->mis, __pyx_v_node)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_next_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "world_cy.pyx":1050
 *         while not node.is_tail:
 *             next_node=self.mis.next(node)
 *             mi=node.mi             # <<<<<<<<<<<<<<
 *             if not mi.increase_age():
 *                 #self.death_by("age")
 */
    __pyx_t_3 = ((PyObject *)__pyx_v_node->mi);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "world_cy.pyx":1051
 *             next_node=self.mis.next(node)
 *             mi=node.mi
 *             if not mi.increase_age():             # <<<<<<<<<<<<<<
 *                 #self.death_by("age")
 *                 self.kill(mi,corpse=True)
 */
    __pyx_t_1 = ((!(((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_mi->__pyx_vtab)->increase_age(__pyx_v_mi) != 0)) != 0);
    if (__pyx_t_1) {

      /* "world_cy.pyx":1053
 *             if not mi.increase_age():
 *                 #self.death_by("age")
 *                 self.kill(mi,corpse=True)             # <<<<<<<<<<<<<<
 *             node=next_node
 *         mi=node.mi
 */
      ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->kill(__pyx_v_self, __pyx_v_mi, 1);

      /* "world_cy.pyx":1051
 *             next_node=self.mis.next(node)
 *             mi=node.mi
 *             if not mi.increase_age():             # <<<<<<<<<<<<<<
 *                 #self.death_by("age")
 *                 self.kill(mi,corpse=True)
 */
    }

    /* "world_cy.pyx":1054
 *                 #self.death_by("age")
 *                 self.kill(mi,corpse=True)
 *             node=next_node             # <<<<<<<<<<<<<<
 *         mi=node.mi
 *         if not mi.increase_age():
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_next_node));
    __Pyx_DECREF_SET(__pyx_v_node, __pyx_v_next_node);
  }

  /* "world_cy.pyx":1055
 *                 self.kill(mi,corpse=True)
 *             node=next_node
 *         mi=node.mi             # <<<<<<<<<<<<<<
 *         if not mi.increase_age():
 *             #self.death_by("age")
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_node->mi);
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_3));
  __pyx_t_3 = 0;

  /* "world_cy.pyx":1056
 *             node=next_node
 *         mi=node.mi
 *         if not mi.increase_age():             # <<<<<<<<<<<<<<
 *             #self.death_by("age")
 *             self.kill(mi,corpse=True)
 */
  __pyx_t_1 = ((!(((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_mi->__pyx_vtab)->increase_age(__pyx_v_mi) != 0)) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1058
 *         if not mi.increase_age():
 *             #self.death_by("age")
 *             self.kill(mi,corpse=True)             # <<<<<<<<<<<<<<
 * 
 *     cdef void hunt(self,Minion pred,Minion pray):
 */
    ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->kill(__pyx_v_self, __pyx_v_mi, 1);

    /* "world_cy.pyx":1056
 *             node=next_node
 *         mi=node.mi
 *         if not mi.increase_age():             # <<<<<<<<<<<<<<
 *             #self.death_by("age")
 *             self.kill(mi,corpse=True)
 */
  }

  /* "world_cy.pyx":1042
 *         mi.dead=True
 * 
 *     cdef void kill_elderly(self):             # <<<<<<<<<<<<<<
 *         if self.no_age or self.mis.len==0:
 *             return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("world_cy.World.kill_elderly", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_next_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_mi);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1060
 *             self.kill(mi,corpse=True)
 * 
 *     cdef void hunt(self,Minion pred,Minion pray):             # <<<<<<<<<<<<<<
 *         self.digest(pred,pray.mass)
 *         #self.death_by("hunt")
 */

static void __pyx_f_8world_cy_5World_hunt(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_pred, struct __pyx_obj_8world_cy_Minion *__pyx_v_pray) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hunt", 0);
  __Pyx_TraceCall("hunt", __pyx_f[1], 1060, 0, __PYX_ERR(1, 1060, __pyx_L1_error));

  /* "world_cy.pyx":1061
 * 
 *     cdef void hunt(self,Minion pred,Minion pray):
 *         self.digest(pred,pray.mass)             # <<<<<<<<<<<<<<
 *         #self.death_by("hunt")
 *         self.kill(pray,corpse=False)
 */
  ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->digest(__pyx_v_self, __pyx_v_pred, __pyx_v_pray->mass);

  /* "world_cy.pyx":1063
 *         self.digest(pred,pray.mass)
 *         #self.death_by("hunt")
 *         self.kill(pray,corpse=False)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->kill(__pyx_v_self, __pyx_v_pray, 0);

  /* "world_cy.pyx":1060
 *             self.kill(mi,corpse=True)
 * 
 *     cdef void hunt(self,Minion pred,Minion pray):             # <<<<<<<<<<<<<<
 *         self.digest(pred,pray.mass)
 *         #self.death_by("hunt")
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.World.hunt", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1066
 * 
 * 
 *     cdef void move(self,Minion mi):             # <<<<<<<<<<<<<<
 *         cdef int move_direc,move_dist,a,b,xpos,ypos
 *         cdef size_t x,y,i,j
 */

static void __pyx_f_8world_cy_5World_move(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi) {
  int __pyx_v_move_direc;
  int __pyx_v_move_dist;
  int __pyx_v_a;
  int __pyx_v_b;
  int __pyx_v_xpos;
  int __pyx_v_ypos;
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_dll = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  size_t __pyx_t_11;
  size_t __pyx_t_12;
  size_t __pyx_t_13;
  __Pyx_RefNannySetupContext("move", 0);
  __Pyx_TraceCall("move", __pyx_f[1], 1066, 0, __PYX_ERR(1, 1066, __pyx_L1_error));

  /* "world_cy.pyx":1070
 *         cdef size_t x,y,i,j
 *         cdef MinionDLL dll
 *         if mi.move_dist==0.0:             # <<<<<<<<<<<<<<
 *             return
 *         move_direc=mi.move_direc
 */
  __pyx_t_1 = ((__pyx_v_mi->move_dist == 0.0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1071
 *         cdef MinionDLL dll
 *         if mi.move_dist==0.0:
 *             return             # <<<<<<<<<<<<<<
 *         move_direc=mi.move_direc
 *         move_dist=<int>(2*mi.move_dist*mi.mass**0.5)
 */
    goto __pyx_L0;

    /* "world_cy.pyx":1070
 *         cdef size_t x,y,i,j
 *         cdef MinionDLL dll
 *         if mi.move_dist==0.0:             # <<<<<<<<<<<<<<
 *             return
 *         move_direc=mi.move_direc
 */
  }

  /* "world_cy.pyx":1072
 *         if mi.move_dist==0.0:
 *             return
 *         move_direc=mi.move_direc             # <<<<<<<<<<<<<<
 *         move_dist=<int>(2*mi.move_dist*mi.mass**0.5)
 *         xpos=mi.pos[0]
 */
  __pyx_t_2 = __pyx_v_mi->move_direc;
  __pyx_v_move_direc = __pyx_t_2;

  /* "world_cy.pyx":1073
 *             return
 *         move_direc=mi.move_direc
 *         move_dist=<int>(2*mi.move_dist*mi.mass**0.5)             # <<<<<<<<<<<<<<
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 */
  __pyx_v_move_dist = ((int)((2.0 * __pyx_v_mi->move_dist) * pow(__pyx_v_mi->mass, 0.5)));

  /* "world_cy.pyx":1074
 *         move_direc=mi.move_direc
 *         move_dist=<int>(2*mi.move_dist*mi.mass**0.5)
 *         xpos=mi.pos[0]             # <<<<<<<<<<<<<<
 *         ypos=mi.pos[1]
 *         a=0
 */
  __pyx_v_xpos = __pyx_v_mi->pos.f0;

  /* "world_cy.pyx":1075
 *         move_dist=<int>(2*mi.move_dist*mi.mass**0.5)
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]             # <<<<<<<<<<<<<<
 *         a=0
 *         b=0
 */
  __pyx_v_ypos = __pyx_v_mi->pos.f1;

  /* "world_cy.pyx":1076
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 *         a=0             # <<<<<<<<<<<<<<
 *         b=0
 *         if move_direc==0:
 */
  __pyx_v_a = 0;

  /* "world_cy.pyx":1077
 *         ypos=mi.pos[1]
 *         a=0
 *         b=0             # <<<<<<<<<<<<<<
 *         if move_direc==0:
 *             a+=move_dist
 */
  __pyx_v_b = 0;

  /* "world_cy.pyx":1078
 *         a=0
 *         b=0
 *         if move_direc==0:             # <<<<<<<<<<<<<<
 *             a+=move_dist
 *         elif move_direc==1:
 */
  switch (__pyx_v_move_direc) {
    case 0:

    /* "world_cy.pyx":1079
 *         b=0
 *         if move_direc==0:
 *             a+=move_dist             # <<<<<<<<<<<<<<
 *         elif move_direc==1:
 *             b+=move_dist
 */
    __pyx_v_a = (__pyx_v_a + __pyx_v_move_dist);

    /* "world_cy.pyx":1078
 *         a=0
 *         b=0
 *         if move_direc==0:             # <<<<<<<<<<<<<<
 *             a+=move_dist
 *         elif move_direc==1:
 */
    break;
    case 1:

    /* "world_cy.pyx":1081
 *             a+=move_dist
 *         elif move_direc==1:
 *             b+=move_dist             # <<<<<<<<<<<<<<
 *         elif move_direc==2:
 *             a-=move_dist
 */
    __pyx_v_b = (__pyx_v_b + __pyx_v_move_dist);

    /* "world_cy.pyx":1080
 *         if move_direc==0:
 *             a+=move_dist
 *         elif move_direc==1:             # <<<<<<<<<<<<<<
 *             b+=move_dist
 *         elif move_direc==2:
 */
    break;
    case 2:

    /* "world_cy.pyx":1083
 *             b+=move_dist
 *         elif move_direc==2:
 *             a-=move_dist             # <<<<<<<<<<<<<<
 *         elif move_direc==3:
 *             b-=move_dist
 */
    __pyx_v_a = (__pyx_v_a - __pyx_v_move_dist);

    /* "world_cy.pyx":1082
 *         elif move_direc==1:
 *             b+=move_dist
 *         elif move_direc==2:             # <<<<<<<<<<<<<<
 *             a-=move_dist
 *         elif move_direc==3:
 */
    break;
    case 3:

    /* "world_cy.pyx":1085
 *             a-=move_dist
 *         elif move_direc==3:
 *             b-=move_dist             # <<<<<<<<<<<<<<
 *         for i in range(1+2*<size_t>mi.alen):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 */
    __pyx_v_b = (__pyx_v_b - __pyx_v_move_dist);

    /* "world_cy.pyx":1084
 *         elif move_direc==2:
 *             a-=move_dist
 *         elif move_direc==3:             # <<<<<<<<<<<<<<
 *             b-=move_dist
 *         for i in range(1+2*<size_t>mi.alen):
 */
    break;
    default: break;
  }

  /* "world_cy.pyx":1086
 *         elif move_direc==3:
 *             b-=move_dist
 *         for i in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(1+2*<size_t>mi.alen):
 */
  __pyx_t_3 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "world_cy.pyx":1087
 *             b-=move_dist
 *         for i in range(1+2*<size_t>mi.alen):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)             # <<<<<<<<<<<<<<
 *             for j in range(1+2*<size_t>mi.alen):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 */
    __pyx_t_2 = ((__pyx_v_xpos - __pyx_v_mi->alen) + ((int)__pyx_v_i));
    if (unlikely(__pyx_v_self->xsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 1087, __pyx_L1_error)
    }
    __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_2, __pyx_v_self->xsize));

    /* "world_cy.pyx":1088
 *         for i in range(1+2*<size_t>mi.alen):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 dll=self.occupy_map[x,y]
 */
    __pyx_t_6 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "world_cy.pyx":1089
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(1+2*<size_t>mi.alen):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)             # <<<<<<<<<<<<<<
 *                 dll=self.occupy_map[x,y]
 *                 dll.remove_by_search(mi)
 */
      __pyx_t_2 = ((__pyx_v_ypos - __pyx_v_mi->alen) + ((int)__pyx_v_j));
      if (unlikely(__pyx_v_self->ysize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 1089, __pyx_L1_error)
      }
      __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_2, __pyx_v_self->ysize));

      /* "world_cy.pyx":1090
 *             for j in range(1+2*<size_t>mi.alen):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 dll=self.occupy_map[x,y]             # <<<<<<<<<<<<<<
 *                 dll.remove_by_search(mi)
 *         mi.pos[0]=((xpos+a)%self.xsize)
 */
      if (unlikely(!__pyx_v_self->occupy_map.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1090, __pyx_L1_error)}
      __pyx_t_10 = __pyx_v_x;
      __pyx_t_11 = __pyx_v_y;
      __pyx_t_2 = -1;
      if (unlikely(__pyx_t_10 >= (size_t)__pyx_v_self->occupy_map.shape[0])) __pyx_t_2 = 0;
      if (unlikely(__pyx_t_11 >= (size_t)__pyx_v_self->occupy_map.shape[1])) __pyx_t_2 = 1;
      if (unlikely(__pyx_t_2 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_2);
        __PYX_ERR(1, 1090, __pyx_L1_error)
      }
      __pyx_t_9 = (PyObject *) *((struct __pyx_obj_8world_cy_MinionDLL * *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->occupy_map.data + __pyx_t_10 * __pyx_v_self->occupy_map.strides[0]) ) + __pyx_t_11 * __pyx_v_self->occupy_map.strides[1]) ));
      __Pyx_INCREF((PyObject*)__pyx_t_9);
      __Pyx_XDECREF_SET(__pyx_v_dll, ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_9));
      __pyx_t_9 = 0;

      /* "world_cy.pyx":1091
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 dll=self.occupy_map[x,y]
 *                 dll.remove_by_search(mi)             # <<<<<<<<<<<<<<
 *         mi.pos[0]=((xpos+a)%self.xsize)
 *         mi.pos[1]=((ypos+b)%self.ysize)
 */
      ((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_dll->__pyx_vtab)->remove_by_search(__pyx_v_dll, __pyx_v_mi);
    }
  }

  /* "world_cy.pyx":1092
 *                 dll=self.occupy_map[x,y]
 *                 dll.remove_by_search(mi)
 *         mi.pos[0]=((xpos+a)%self.xsize)             # <<<<<<<<<<<<<<
 *         mi.pos[1]=((ypos+b)%self.ysize)
 *         xpos=mi.pos[0]
 */
  __pyx_t_2 = (__pyx_v_xpos + __pyx_v_a);
  if (unlikely(__pyx_v_self->xsize == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(1, 1092, __pyx_L1_error)
  }
  __pyx_v_mi->pos.f0 = __Pyx_mod_int(__pyx_t_2, __pyx_v_self->xsize);

  /* "world_cy.pyx":1093
 *                 dll.remove_by_search(mi)
 *         mi.pos[0]=((xpos+a)%self.xsize)
 *         mi.pos[1]=((ypos+b)%self.ysize)             # <<<<<<<<<<<<<<
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 */
  __pyx_t_2 = (__pyx_v_ypos + __pyx_v_b);
  if (unlikely(__pyx_v_self->ysize == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(1, 1093, __pyx_L1_error)
  }
  __pyx_v_mi->pos.f1 = __Pyx_mod_int(__pyx_t_2, __pyx_v_self->ysize);

  /* "world_cy.pyx":1094
 *         mi.pos[0]=((xpos+a)%self.xsize)
 *         mi.pos[1]=((ypos+b)%self.ysize)
 *         xpos=mi.pos[0]             # <<<<<<<<<<<<<<
 *         ypos=mi.pos[1]
 *         for i in range(1+2*<size_t>mi.alen):
 */
  __pyx_v_xpos = __pyx_v_mi->pos.f0;

  /* "world_cy.pyx":1095
 *         mi.pos[1]=((ypos+b)%self.ysize)
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]             # <<<<<<<<<<<<<<
 *         for i in range(1+2*<size_t>mi.alen):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 */
  __pyx_v_ypos = __pyx_v_mi->pos.f1;

  /* "world_cy.pyx":1096
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 *         for i in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(1+2*<size_t>mi.alen):
 */
  __pyx_t_3 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "world_cy.pyx":1097
 *         ypos=mi.pos[1]
 *         for i in range(1+2*<size_t>mi.alen):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)             # <<<<<<<<<<<<<<
 *             for j in range(1+2*<size_t>mi.alen):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 */
    __pyx_t_2 = ((__pyx_v_xpos - __pyx_v_mi->alen) + ((int)__pyx_v_i));
    if (unlikely(__pyx_v_self->xsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 1097, __pyx_L1_error)
    }
    __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_2, __pyx_v_self->xsize));

    /* "world_cy.pyx":1098
 *         for i in range(1+2*<size_t>mi.alen):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 dll=self.occupy_map[x,y]
 */
    __pyx_t_6 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "world_cy.pyx":1099
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(1+2*<size_t>mi.alen):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)             # <<<<<<<<<<<<<<
 *                 dll=self.occupy_map[x,y]
 *                 dll.push(mi)
 */
      __pyx_t_2 = ((__pyx_v_ypos - __pyx_v_mi->alen) + ((int)__pyx_v_j));
      if (unlikely(__pyx_v_self->ysize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 1099, __pyx_L1_error)
      }
      __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_2, __pyx_v_self->ysize));

      /* "world_cy.pyx":1100
 *             for j in range(1+2*<size_t>mi.alen):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 dll=self.occupy_map[x,y]             # <<<<<<<<<<<<<<
 *                 dll.push(mi)
 *         self.loss_energy(mi,<double>move_dist*mi.energy_with_constant(mi.move_consum_rate))
 */
      if (unlikely(!__pyx_v_self->occupy_map.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1100, __pyx_L1_error)}
      __pyx_t_12 = __pyx_v_x;
      __pyx_t_13 = __pyx_v_y;
      __pyx_t_2 = -1;
      if (unlikely(__pyx_t_12 >= (size_t)__pyx_v_self->occupy_map.shape[0])) __pyx_t_2 = 0;
      if (unlikely(__pyx_t_13 >= (size_t)__pyx_v_self->occupy_map.shape[1])) __pyx_t_2 = 1;
      if (unlikely(__pyx_t_2 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_2);
        __PYX_ERR(1, 1100, __pyx_L1_error)
      }
      __pyx_t_9 = (PyObject *) *((struct __pyx_obj_8world_cy_MinionDLL * *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->occupy_map.data + __pyx_t_12 * __pyx_v_self->occupy_map.strides[0]) ) + __pyx_t_13 * __pyx_v_self->occupy_map.strides[1]) ));
      __Pyx_INCREF((PyObject*)__pyx_t_9);
      __Pyx_XDECREF_SET(__pyx_v_dll, ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_9));
      __pyx_t_9 = 0;

      /* "world_cy.pyx":1101
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 dll=self.occupy_map[x,y]
 *                 dll.push(mi)             # <<<<<<<<<<<<<<
 *         self.loss_energy(mi,<double>move_dist*mi.energy_with_constant(mi.move_consum_rate))
 *         mi.cum_dist+=move_dist
 */
      __pyx_t_9 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_dll->__pyx_vtab)->push(__pyx_v_dll, __pyx_v_mi)); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
  }

  /* "world_cy.pyx":1102
 *                 dll=self.occupy_map[x,y]
 *                 dll.push(mi)
 *         self.loss_energy(mi,<double>move_dist*mi.energy_with_constant(mi.move_consum_rate))             # <<<<<<<<<<<<<<
 *         mi.cum_dist+=move_dist
 *     cdef void stretch(self,Minion mi):
 */
  (void)(((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->loss_energy(__pyx_v_self, __pyx_v_mi, (((double)__pyx_v_move_dist) * ((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_mi->__pyx_vtab)->energy_with_constant(__pyx_v_mi, __pyx_v_mi->move_consum_rate))));

  /* "world_cy.pyx":1103
 *                 dll.push(mi)
 *         self.loss_energy(mi,<double>move_dist*mi.energy_with_constant(mi.move_consum_rate))
 *         mi.cum_dist+=move_dist             # <<<<<<<<<<<<<<
 *     cdef void stretch(self,Minion mi):
 *         cdef int xpos,ypos
 */
  __pyx_v_mi->cum_dist = (__pyx_v_mi->cum_dist + __pyx_v_move_dist);

  /* "world_cy.pyx":1066
 * 
 * 
 *     cdef void move(self,Minion mi):             # <<<<<<<<<<<<<<
 *         cdef int move_direc,move_dist,a,b,xpos,ypos
 *         cdef size_t x,y,i,j
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("world_cy.World.move", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dll);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1104
 *         self.loss_energy(mi,<double>move_dist*mi.energy_with_constant(mi.move_consum_rate))
 *         mi.cum_dist+=move_dist
 *     cdef void stretch(self,Minion mi):             # <<<<<<<<<<<<<<
 *         cdef int xpos,ypos
 *         cdef size_t x,y
 */

static void __pyx_f_8world_cy_5World_stretch(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi) {
  int __pyx_v_xpos;
  int __pyx_v_ypos;
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  int __pyx_v_alive;
  struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_dll = 0;
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_next_node = 0;
  struct __pyx_obj_8world_cy_Minion *__pyx_v_other = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  long __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("stretch", 0);
  __Pyx_TraceCall("stretch", __pyx_f[1], 1104, 0, __PYX_ERR(1, 1104, __pyx_L1_error));

  /* "world_cy.pyx":1110
 *         cdef MinionDLL dll
 * 
 *         alive=self.loss_energy(mi,mi.energy_with_constant(mi.stretch_consum_rate))             # <<<<<<<<<<<<<<
 *         if not alive:
 *             return
 */
  __pyx_v_alive = ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->loss_energy(__pyx_v_self, __pyx_v_mi, ((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_mi->__pyx_vtab)->energy_with_constant(__pyx_v_mi, __pyx_v_mi->stretch_consum_rate));

  /* "world_cy.pyx":1111
 * 
 *         alive=self.loss_energy(mi,mi.energy_with_constant(mi.stretch_consum_rate))
 *         if not alive:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_alive != 0)) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1112
 *         alive=self.loss_energy(mi,mi.energy_with_constant(mi.stretch_consum_rate))
 *         if not alive:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         xpos=mi.pos[0]
 */
    goto __pyx_L0;

    /* "world_cy.pyx":1111
 * 
 *         alive=self.loss_energy(mi,mi.energy_with_constant(mi.stretch_consum_rate))
 *         if not alive:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "world_cy.pyx":1114
 *             return
 * 
 *         xpos=mi.pos[0]             # <<<<<<<<<<<<<<
 *         ypos=mi.pos[1]
 *         if mi.move_direc==0:
 */
  __pyx_v_xpos = __pyx_v_mi->pos.f0;

  /* "world_cy.pyx":1115
 * 
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]             # <<<<<<<<<<<<<<
 *         if mi.move_direc==0:
 *             x=<size_t>((xpos+2*mi.alen)%self.xsize)
 */
  __pyx_v_ypos = __pyx_v_mi->pos.f1;

  /* "world_cy.pyx":1116
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 *         if mi.move_direc==0:             # <<<<<<<<<<<<<<
 *             x=<size_t>((xpos+2*mi.alen)%self.xsize)
 *             y=<size_t>ypos
 */
  switch (__pyx_v_mi->move_direc) {
    case 0:

    /* "world_cy.pyx":1117
 *         ypos=mi.pos[1]
 *         if mi.move_direc==0:
 *             x=<size_t>((xpos+2*mi.alen)%self.xsize)             # <<<<<<<<<<<<<<
 *             y=<size_t>ypos
 *         elif mi.move_direc==1:
 */
    __pyx_t_2 = (__pyx_v_xpos + (2 * __pyx_v_mi->alen));
    if (unlikely(__pyx_v_self->xsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 1117, __pyx_L1_error)
    }
    __pyx_v_x = ((size_t)__Pyx_mod_long(__pyx_t_2, __pyx_v_self->xsize));

    /* "world_cy.pyx":1118
 *         if mi.move_direc==0:
 *             x=<size_t>((xpos+2*mi.alen)%self.xsize)
 *             y=<size_t>ypos             # <<<<<<<<<<<<<<
 *         elif mi.move_direc==1:
 *             x=<size_t>xpos
 */
    __pyx_v_y = ((size_t)__pyx_v_ypos);

    /* "world_cy.pyx":1116
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 *         if mi.move_direc==0:             # <<<<<<<<<<<<<<
 *             x=<size_t>((xpos+2*mi.alen)%self.xsize)
 *             y=<size_t>ypos
 */
    break;
    case 1:

    /* "world_cy.pyx":1120
 *             y=<size_t>ypos
 *         elif mi.move_direc==1:
 *             x=<size_t>xpos             # <<<<<<<<<<<<<<
 *             y=<size_t>((ypos+2*mi.alen)%self.ysize)
 *         elif mi.move_direc==2:
 */
    __pyx_v_x = ((size_t)__pyx_v_xpos);

    /* "world_cy.pyx":1121
 *         elif mi.move_direc==1:
 *             x=<size_t>xpos
 *             y=<size_t>((ypos+2*mi.alen)%self.ysize)             # <<<<<<<<<<<<<<
 *         elif mi.move_direc==2:
 *             x=<size_t>((xpos-2*mi.alen)%self.xsize)
 */
    __pyx_t_2 = (__pyx_v_ypos + (2 * __pyx_v_mi->alen));
    if (unlikely(__pyx_v_self->ysize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 1121, __pyx_L1_error)
    }
    __pyx_v_y = ((size_t)__Pyx_mod_long(__pyx_t_2, __pyx_v_self->ysize));

    /* "world_cy.pyx":1119
 *             x=<size_t>((xpos+2*mi.alen)%self.xsize)
 *             y=<size_t>ypos
 *         elif mi.move_direc==1:             # <<<<<<<<<<<<<<
 *             x=<size_t>xpos
 *             y=<size_t>((ypos+2*mi.alen)%self.ysize)
 */
    break;
    case 2:

    /* "world_cy.pyx":1123
 *             y=<size_t>((ypos+2*mi.alen)%self.ysize)
 *         elif mi.move_direc==2:
 *             x=<size_t>((xpos-2*mi.alen)%self.xsize)             # <<<<<<<<<<<<<<
 *             y=<size_t>ypos
 *         elif mi.move_direc==3:
 */
    __pyx_t_2 = (__pyx_v_xpos - (2 * __pyx_v_mi->alen));
    if (unlikely(__pyx_v_self->xsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 1123, __pyx_L1_error)
    }
    __pyx_v_x = ((size_t)__Pyx_mod_long(__pyx_t_2, __pyx_v_self->xsize));

    /* "world_cy.pyx":1124
 *         elif mi.move_direc==2:
 *             x=<size_t>((xpos-2*mi.alen)%self.xsize)
 *             y=<size_t>ypos             # <<<<<<<<<<<<<<
 *         elif mi.move_direc==3:
 *             x=<size_t>xpos
 */
    __pyx_v_y = ((size_t)__pyx_v_ypos);

    /* "world_cy.pyx":1122
 *             x=<size_t>xpos
 *             y=<size_t>((ypos+2*mi.alen)%self.ysize)
 *         elif mi.move_direc==2:             # <<<<<<<<<<<<<<
 *             x=<size_t>((xpos-2*mi.alen)%self.xsize)
 *             y=<size_t>ypos
 */
    break;
    case 3:

    /* "world_cy.pyx":1126
 *             y=<size_t>ypos
 *         elif mi.move_direc==3:
 *             x=<size_t>xpos             # <<<<<<<<<<<<<<
 *             y=<size_t>((ypos-2*mi.alen)%self.ysize)
 * 
 */
    __pyx_v_x = ((size_t)__pyx_v_xpos);

    /* "world_cy.pyx":1127
 *         elif mi.move_direc==3:
 *             x=<size_t>xpos
 *             y=<size_t>((ypos-2*mi.alen)%self.ysize)             # <<<<<<<<<<<<<<
 * 
 *         #be careful for newly born child being reached!
 */
    __pyx_t_2 = (__pyx_v_ypos - (2 * __pyx_v_mi->alen));
    if (unlikely(__pyx_v_self->ysize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 1127, __pyx_L1_error)
    }
    __pyx_v_y = ((size_t)__Pyx_mod_long(__pyx_t_2, __pyx_v_self->ysize));

    /* "world_cy.pyx":1125
 *             x=<size_t>((xpos-2*mi.alen)%self.xsize)
 *             y=<size_t>ypos
 *         elif mi.move_direc==3:             # <<<<<<<<<<<<<<
 *             x=<size_t>xpos
 *             y=<size_t>((ypos-2*mi.alen)%self.ysize)
 */
    break;
    default: break;
  }

  /* "world_cy.pyx":1132
 *         #(that doesn't happen as long as child's occupying area and
 *         #mother's occupying area are guaranteed to be disjoint
 *         dll=self.occupy_map[x,y]             # <<<<<<<<<<<<<<
 *         if dll.len==0:
 *             return
 */
  if (unlikely(!__pyx_v_self->occupy_map.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1132, __pyx_L1_error)}
  __pyx_t_4 = __pyx_v_x;
  __pyx_t_5 = __pyx_v_y;
  __pyx_t_6 = -1;
  if (unlikely(__pyx_t_4 >= (size_t)__pyx_v_self->occupy_map.shape[0])) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_5 >= (size_t)__pyx_v_self->occupy_map.shape[1])) __pyx_t_6 = 1;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(1, 1132, __pyx_L1_error)
  }
  __pyx_t_3 = (PyObject *) *((struct __pyx_obj_8world_cy_MinionDLL * *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->occupy_map.data + __pyx_t_4 * __pyx_v_self->occupy_map.strides[0]) ) + __pyx_t_5 * __pyx_v_self->occupy_map.strides[1]) ));
  __Pyx_INCREF((PyObject*)__pyx_t_3);
  __pyx_v_dll = ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "world_cy.pyx":1133
 *         #mother's occupying area are guaranteed to be disjoint
 *         dll=self.occupy_map[x,y]
 *         if dll.len==0:             # <<<<<<<<<<<<<<
 *             return
 *         cdef MinionDLLNode node,next_node
 */
  __pyx_t_1 = ((__pyx_v_dll->len == 0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1134
 *         dll=self.occupy_map[x,y]
 *         if dll.len==0:
 *             return             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode node,next_node
 *         cdef Minion other
 */
    goto __pyx_L0;

    /* "world_cy.pyx":1133
 *         #mother's occupying area are guaranteed to be disjoint
 *         dll=self.occupy_map[x,y]
 *         if dll.len==0:             # <<<<<<<<<<<<<<
 *             return
 *         cdef MinionDLLNode node,next_node
 */
  }

  /* "world_cy.pyx":1137
 *         cdef MinionDLLNode node,next_node
 *         cdef Minion other
 *         node=dll.head             # <<<<<<<<<<<<<<
 *         while not node.is_tail:
 *             next_node=dll.next(node)
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_dll->head);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "world_cy.pyx":1138
 *         cdef Minion other
 *         node=dll.head
 *         while not node.is_tail:             # <<<<<<<<<<<<<<
 *             next_node=dll.next(node)
 *             other=node.mi
 */
  while (1) {
    __pyx_t_1 = ((!(__pyx_v_node->is_tail != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "world_cy.pyx":1139
 *         node=dll.head
 *         while not node.is_tail:
 *             next_node=dll.next(node)             # <<<<<<<<<<<<<<
 *             other=node.mi
 *             self.childbirth(other,mi)
 */
    __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_dll->__pyx_vtab)->next(__pyx_v_dll, __pyx_v_node)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_next_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "world_cy.pyx":1140
 *         while not node.is_tail:
 *             next_node=dll.next(node)
 *             other=node.mi             # <<<<<<<<<<<<<<
 *             self.childbirth(other,mi)
 *             self.messiness+=1
 */
    __pyx_t_3 = ((PyObject *)__pyx_v_node->mi);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_other, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "world_cy.pyx":1141
 *             next_node=dll.next(node)
 *             other=node.mi
 *             self.childbirth(other,mi)             # <<<<<<<<<<<<<<
 *             self.messiness+=1
 *             alive=self.loss_energy(mi,mi.energy_with_constant(mi.sex_consum_rate))
 */
    ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->childbirth(__pyx_v_self, __pyx_v_other, __pyx_v_mi);

    /* "world_cy.pyx":1142
 *             other=node.mi
 *             self.childbirth(other,mi)
 *             self.messiness+=1             # <<<<<<<<<<<<<<
 *             alive=self.loss_energy(mi,mi.energy_with_constant(mi.sex_consum_rate))
 *             if not alive:
 */
    __pyx_v_self->messiness = (__pyx_v_self->messiness + 1);

    /* "world_cy.pyx":1143
 *             self.childbirth(other,mi)
 *             self.messiness+=1
 *             alive=self.loss_energy(mi,mi.energy_with_constant(mi.sex_consum_rate))             # <<<<<<<<<<<<<<
 *             if not alive:
 *                 return
 */
    __pyx_v_alive = ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->loss_energy(__pyx_v_self, __pyx_v_mi, ((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_mi->__pyx_vtab)->energy_with_constant(__pyx_v_mi, __pyx_v_mi->sex_consum_rate));

    /* "world_cy.pyx":1144
 *             self.messiness+=1
 *             alive=self.loss_energy(mi,mi.energy_with_constant(mi.sex_consum_rate))
 *             if not alive:             # <<<<<<<<<<<<<<
 *                 return
 *             node=next_node
 */
    __pyx_t_1 = ((!(__pyx_v_alive != 0)) != 0);
    if (__pyx_t_1) {

      /* "world_cy.pyx":1145
 *             alive=self.loss_energy(mi,mi.energy_with_constant(mi.sex_consum_rate))
 *             if not alive:
 *                 return             # <<<<<<<<<<<<<<
 *             node=next_node
 *         other=node.mi
 */
      goto __pyx_L0;

      /* "world_cy.pyx":1144
 *             self.messiness+=1
 *             alive=self.loss_energy(mi,mi.energy_with_constant(mi.sex_consum_rate))
 *             if not alive:             # <<<<<<<<<<<<<<
 *                 return
 *             node=next_node
 */
    }

    /* "world_cy.pyx":1146
 *             if not alive:
 *                 return
 *             node=next_node             # <<<<<<<<<<<<<<
 *         other=node.mi
 *         self.childbirth(other,mi)
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_next_node));
    __Pyx_DECREF_SET(__pyx_v_node, __pyx_v_next_node);
  }

  /* "world_cy.pyx":1147
 *                 return
 *             node=next_node
 *         other=node.mi             # <<<<<<<<<<<<<<
 *         self.childbirth(other,mi)
 *         self.messiness+=1
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_node->mi);
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_XDECREF_SET(__pyx_v_other, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_3));
  __pyx_t_3 = 0;

  /* "world_cy.pyx":1148
 *             node=next_node
 *         other=node.mi
 *         self.childbirth(other,mi)             # <<<<<<<<<<<<<<
 *         self.messiness+=1
 * 
 */
  ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->childbirth(__pyx_v_self, __pyx_v_other, __pyx_v_mi);

  /* "world_cy.pyx":1149
 *         other=node.mi
 *         self.childbirth(other,mi)
 *         self.messiness+=1             # <<<<<<<<<<<<<<
 * 
 *     cdef void excrete(self,Minion mi,double amount):
 */
  __pyx_v_self->messiness = (__pyx_v_self->messiness + 1);

  /* "world_cy.pyx":1104
 *         self.loss_energy(mi,<double>move_dist*mi.energy_with_constant(mi.move_consum_rate))
 *         mi.cum_dist+=move_dist
 *     cdef void stretch(self,Minion mi):             # <<<<<<<<<<<<<<
 *         cdef int xpos,ypos
 *         cdef size_t x,y
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("world_cy.World.stretch", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dll);
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_next_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_other);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1151
 *         self.messiness+=1
 * 
 *     cdef void excrete(self,Minion mi,double amount):             # <<<<<<<<<<<<<<
 *         if self.no_excrete:
 *             self.hidden_mass+=amount
 */

static void __pyx_f_8world_cy_5World_excrete(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, double __pyx_v_amount) {
  int __pyx_v_dist;
  int __pyx_v_xpos;
  int __pyx_v_ypos;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  double __pyx_v_area;
  double __pyx_v_q;
  double __pyx_v_r;
  int __pyx_v_k;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  size_t __pyx_t_10;
  int __pyx_t_11;
  size_t __pyx_t_12;
  size_t __pyx_t_13;
  size_t __pyx_t_14;
  size_t __pyx_t_15;
  __Pyx_RefNannySetupContext("excrete", 0);
  __Pyx_TraceCall("excrete", __pyx_f[1], 1151, 0, __PYX_ERR(1, 1151, __pyx_L1_error));

  /* "world_cy.pyx":1152
 * 
 *     cdef void excrete(self,Minion mi,double amount):
 *         if self.no_excrete:             # <<<<<<<<<<<<<<
 *             self.hidden_mass+=amount
 *             return
 */
  __pyx_t_1 = (__pyx_v_self->no_excrete != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1153
 *     cdef void excrete(self,Minion mi,double amount):
 *         if self.no_excrete:
 *             self.hidden_mass+=amount             # <<<<<<<<<<<<<<
 *             return
 *         cdef int dist,xpos,ypos
 */
    __pyx_v_self->hidden_mass = (__pyx_v_self->hidden_mass + __pyx_v_amount);

    /* "world_cy.pyx":1154
 *         if self.no_excrete:
 *             self.hidden_mass+=amount
 *             return             # <<<<<<<<<<<<<<
 *         cdef int dist,xpos,ypos
 *         cdef size_t i,j,x,y
 */
    goto __pyx_L0;

    /* "world_cy.pyx":1152
 * 
 *     cdef void excrete(self,Minion mi,double amount):
 *         if self.no_excrete:             # <<<<<<<<<<<<<<
 *             self.hidden_mass+=amount
 *             return
 */
  }

  /* "world_cy.pyx":1159
 *         cdef double area,q,r
 *         cdef int k
 *         dist=4*mi.alen             # <<<<<<<<<<<<<<
 *         if mi.move_direc==0:
 *             xpos=mi.pos[0]-dist
 */
  __pyx_v_dist = (4 * __pyx_v_mi->alen);

  /* "world_cy.pyx":1160
 *         cdef int k
 *         dist=4*mi.alen
 *         if mi.move_direc==0:             # <<<<<<<<<<<<<<
 *             xpos=mi.pos[0]-dist
 *             ypos=mi.pos[1]
 */
  switch (__pyx_v_mi->move_direc) {
    case 0:

    /* "world_cy.pyx":1161
 *         dist=4*mi.alen
 *         if mi.move_direc==0:
 *             xpos=mi.pos[0]-dist             # <<<<<<<<<<<<<<
 *             ypos=mi.pos[1]
 *         elif mi.move_direc==1:
 */
    __pyx_v_xpos = (__pyx_v_mi->pos.f0 - __pyx_v_dist);

    /* "world_cy.pyx":1162
 *         if mi.move_direc==0:
 *             xpos=mi.pos[0]-dist
 *             ypos=mi.pos[1]             # <<<<<<<<<<<<<<
 *         elif mi.move_direc==1:
 *             xpos=mi.pos[0]
 */
    __pyx_v_ypos = __pyx_v_mi->pos.f1;

    /* "world_cy.pyx":1160
 *         cdef int k
 *         dist=4*mi.alen
 *         if mi.move_direc==0:             # <<<<<<<<<<<<<<
 *             xpos=mi.pos[0]-dist
 *             ypos=mi.pos[1]
 */
    break;
    case 1:

    /* "world_cy.pyx":1164
 *             ypos=mi.pos[1]
 *         elif mi.move_direc==1:
 *             xpos=mi.pos[0]             # <<<<<<<<<<<<<<
 *             ypos=mi.pos[1]-dist
 *         elif mi.move_direc==2:
 */
    __pyx_v_xpos = __pyx_v_mi->pos.f0;

    /* "world_cy.pyx":1165
 *         elif mi.move_direc==1:
 *             xpos=mi.pos[0]
 *             ypos=mi.pos[1]-dist             # <<<<<<<<<<<<<<
 *         elif mi.move_direc==2:
 *             xpos=mi.pos[0]+dist
 */
    __pyx_v_ypos = (__pyx_v_mi->pos.f1 - __pyx_v_dist);

    /* "world_cy.pyx":1163
 *             xpos=mi.pos[0]-dist
 *             ypos=mi.pos[1]
 *         elif mi.move_direc==1:             # <<<<<<<<<<<<<<
 *             xpos=mi.pos[0]
 *             ypos=mi.pos[1]-dist
 */
    break;
    case 2:

    /* "world_cy.pyx":1167
 *             ypos=mi.pos[1]-dist
 *         elif mi.move_direc==2:
 *             xpos=mi.pos[0]+dist             # <<<<<<<<<<<<<<
 *             ypos=mi.pos[1]
 *         elif mi.move_direc==3:
 */
    __pyx_v_xpos = (__pyx_v_mi->pos.f0 + __pyx_v_dist);

    /* "world_cy.pyx":1168
 *         elif mi.move_direc==2:
 *             xpos=mi.pos[0]+dist
 *             ypos=mi.pos[1]             # <<<<<<<<<<<<<<
 *         elif mi.move_direc==3:
 *             xpos=mi.pos[0]
 */
    __pyx_v_ypos = __pyx_v_mi->pos.f1;

    /* "world_cy.pyx":1166
 *             xpos=mi.pos[0]
 *             ypos=mi.pos[1]-dist
 *         elif mi.move_direc==2:             # <<<<<<<<<<<<<<
 *             xpos=mi.pos[0]+dist
 *             ypos=mi.pos[1]
 */
    break;
    case 3:

    /* "world_cy.pyx":1170
 *             ypos=mi.pos[1]
 *         elif mi.move_direc==3:
 *             xpos=mi.pos[0]             # <<<<<<<<<<<<<<
 *             ypos=mi.pos[1]+dist
 *         area=<double>(1+2*mi.alen)**2
 */
    __pyx_v_xpos = __pyx_v_mi->pos.f0;

    /* "world_cy.pyx":1171
 *         elif mi.move_direc==3:
 *             xpos=mi.pos[0]
 *             ypos=mi.pos[1]+dist             # <<<<<<<<<<<<<<
 *         area=<double>(1+2*mi.alen)**2
 *         q=<double>((<int>amount)/(<int>area))
 */
    __pyx_v_ypos = (__pyx_v_mi->pos.f1 + __pyx_v_dist);

    /* "world_cy.pyx":1169
 *             xpos=mi.pos[0]+dist
 *             ypos=mi.pos[1]
 *         elif mi.move_direc==3:             # <<<<<<<<<<<<<<
 *             xpos=mi.pos[0]
 *             ypos=mi.pos[1]+dist
 */
    break;
    default: break;
  }

  /* "world_cy.pyx":1172
 *             xpos=mi.pos[0]
 *             ypos=mi.pos[1]+dist
 *         area=<double>(1+2*mi.alen)**2             # <<<<<<<<<<<<<<
 *         q=<double>((<int>amount)/(<int>area))
 *         r=amount%area
 */
  __pyx_v_area = ((double)__Pyx_pow_long((1 + (2 * __pyx_v_mi->alen)), 2));

  /* "world_cy.pyx":1173
 *             ypos=mi.pos[1]+dist
 *         area=<double>(1+2*mi.alen)**2
 *         q=<double>((<int>amount)/(<int>area))             # <<<<<<<<<<<<<<
 *         r=amount%area
 *         for i in range(1+2*<size_t>mi.alen):
 */
  if (unlikely(((int)__pyx_v_area) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(1, 1173, __pyx_L1_error)
  }
  else if (sizeof(int) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(((int)__pyx_v_area) == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(((int)__pyx_v_amount)))) {
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    __PYX_ERR(1, 1173, __pyx_L1_error)
  }
  __pyx_v_q = ((double)__Pyx_div_int(((int)__pyx_v_amount), ((int)__pyx_v_area)));

  /* "world_cy.pyx":1174
 *         area=<double>(1+2*mi.alen)**2
 *         q=<double>((<int>amount)/(<int>area))
 *         r=amount%area             # <<<<<<<<<<<<<<
 *         for i in range(1+2*<size_t>mi.alen):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 */
  if (unlikely(__pyx_v_area == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float divmod()");
    __PYX_ERR(1, 1174, __pyx_L1_error)
  }
  __pyx_v_r = __Pyx_mod_double(__pyx_v_amount, __pyx_v_area);

  /* "world_cy.pyx":1175
 *         q=<double>((<int>amount)/(<int>area))
 *         r=amount%area
 *         for i in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(1+2*<size_t>mi.alen):
 */
  __pyx_t_2 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "world_cy.pyx":1176
 *         r=amount%area
 *         for i in range(1+2*<size_t>mi.alen):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)             # <<<<<<<<<<<<<<
 *             for j in range(1+2*<size_t>mi.alen):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 */
    __pyx_t_5 = ((__pyx_v_xpos - __pyx_v_mi->alen) + ((int)__pyx_v_i));
    if (unlikely(__pyx_v_self->xsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 1176, __pyx_L1_error)
    }
    __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_5, __pyx_v_self->xsize));

    /* "world_cy.pyx":1177
 *         for i in range(1+2*<size_t>mi.alen):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 k=(<int>i)*(1+2*mi.alen)+<int>j
 */
    __pyx_t_6 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "world_cy.pyx":1178
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(1+2*<size_t>mi.alen):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)             # <<<<<<<<<<<<<<
 *                 k=(<int>i)*(1+2*mi.alen)+<int>j
 *                 if (<double>k)<=r-1:
 */
      __pyx_t_5 = ((__pyx_v_ypos - __pyx_v_mi->alen) + ((int)__pyx_v_j));
      if (unlikely(__pyx_v_self->ysize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 1178, __pyx_L1_error)
      }
      __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_5, __pyx_v_self->ysize));

      /* "world_cy.pyx":1179
 *             for j in range(1+2*<size_t>mi.alen):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 k=(<int>i)*(1+2*mi.alen)+<int>j             # <<<<<<<<<<<<<<
 *                 if (<double>k)<=r-1:
 *                     self.mins[x,y]+=q+1
 */
      __pyx_v_k = ((((int)__pyx_v_i) * (1 + (2 * __pyx_v_mi->alen))) + ((int)__pyx_v_j));

      /* "world_cy.pyx":1180
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 k=(<int>i)*(1+2*mi.alen)+<int>j
 *                 if (<double>k)<=r-1:             # <<<<<<<<<<<<<<
 *                     self.mins[x,y]+=q+1
 *                 elif r-1<(<double>k)<r:
 */
      __pyx_t_1 = ((((double)__pyx_v_k) <= (__pyx_v_r - 1.0)) != 0);
      if (__pyx_t_1) {

        /* "world_cy.pyx":1181
 *                 k=(<int>i)*(1+2*mi.alen)+<int>j
 *                 if (<double>k)<=r-1:
 *                     self.mins[x,y]+=q+1             # <<<<<<<<<<<<<<
 *                 elif r-1<(<double>k)<r:
 *                     self.mins[x,y]+=q+r-<double><int>r
 */
        if (unlikely(!__pyx_v_self->mins.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1181, __pyx_L1_error)}
        __pyx_t_9 = __pyx_v_x;
        __pyx_t_10 = __pyx_v_y;
        __pyx_t_5 = -1;
        if (unlikely(__pyx_t_9 >= (size_t)__pyx_v_self->mins.shape[0])) __pyx_t_5 = 0;
        if (unlikely(__pyx_t_10 >= (size_t)__pyx_v_self->mins.shape[1])) __pyx_t_5 = 1;
        if (unlikely(__pyx_t_5 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_5);
          __PYX_ERR(1, 1181, __pyx_L1_error)
        }
        *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->mins.data + __pyx_t_9 * __pyx_v_self->mins.strides[0]) ) + __pyx_t_10 * __pyx_v_self->mins.strides[1]) )) += (__pyx_v_q + 1.0);

        /* "world_cy.pyx":1180
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 k=(<int>i)*(1+2*mi.alen)+<int>j
 *                 if (<double>k)<=r-1:             # <<<<<<<<<<<<<<
 *                     self.mins[x,y]+=q+1
 *                 elif r-1<(<double>k)<r:
 */
        goto __pyx_L8;
      }

      /* "world_cy.pyx":1182
 *                 if (<double>k)<=r-1:
 *                     self.mins[x,y]+=q+1
 *                 elif r-1<(<double>k)<r:             # <<<<<<<<<<<<<<
 *                     self.mins[x,y]+=q+r-<double><int>r
 *                 else:
 */
      __pyx_t_1 = ((__pyx_v_r - 1.0) < ((double)__pyx_v_k));
      if (__pyx_t_1) {
        __pyx_t_1 = (((double)__pyx_v_k) < __pyx_v_r);
      }
      __pyx_t_11 = (__pyx_t_1 != 0);
      if (__pyx_t_11) {

        /* "world_cy.pyx":1183
 *                     self.mins[x,y]+=q+1
 *                 elif r-1<(<double>k)<r:
 *                     self.mins[x,y]+=q+r-<double><int>r             # <<<<<<<<<<<<<<
 *                 else:
 *                     self.mins[x,y]+=q
 */
        if (unlikely(!__pyx_v_self->mins.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1183, __pyx_L1_error)}
        __pyx_t_12 = __pyx_v_x;
        __pyx_t_13 = __pyx_v_y;
        __pyx_t_5 = -1;
        if (unlikely(__pyx_t_12 >= (size_t)__pyx_v_self->mins.shape[0])) __pyx_t_5 = 0;
        if (unlikely(__pyx_t_13 >= (size_t)__pyx_v_self->mins.shape[1])) __pyx_t_5 = 1;
        if (unlikely(__pyx_t_5 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_5);
          __PYX_ERR(1, 1183, __pyx_L1_error)
        }
        *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->mins.data + __pyx_t_12 * __pyx_v_self->mins.strides[0]) ) + __pyx_t_13 * __pyx_v_self->mins.strides[1]) )) += ((__pyx_v_q + __pyx_v_r) - ((double)((int)__pyx_v_r)));

        /* "world_cy.pyx":1182
 *                 if (<double>k)<=r-1:
 *                     self.mins[x,y]+=q+1
 *                 elif r-1<(<double>k)<r:             # <<<<<<<<<<<<<<
 *                     self.mins[x,y]+=q+r-<double><int>r
 *                 else:
 */
        goto __pyx_L8;
      }

      /* "world_cy.pyx":1185
 *                     self.mins[x,y]+=q+r-<double><int>r
 *                 else:
 *                     self.mins[x,y]+=q             # <<<<<<<<<<<<<<
 *     cdef void digest(self,Minion mi,double amount):
 *         cdef double take,out
 */
      /*else*/ {
        if (unlikely(!__pyx_v_self->mins.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1185, __pyx_L1_error)}
        __pyx_t_14 = __pyx_v_x;
        __pyx_t_15 = __pyx_v_y;
        __pyx_t_5 = -1;
        if (unlikely(__pyx_t_14 >= (size_t)__pyx_v_self->mins.shape[0])) __pyx_t_5 = 0;
        if (unlikely(__pyx_t_15 >= (size_t)__pyx_v_self->mins.shape[1])) __pyx_t_5 = 1;
        if (unlikely(__pyx_t_5 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_5);
          __PYX_ERR(1, 1185, __pyx_L1_error)
        }
        *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->mins.data + __pyx_t_14 * __pyx_v_self->mins.strides[0]) ) + __pyx_t_15 * __pyx_v_self->mins.strides[1]) )) += __pyx_v_q;
      }
      __pyx_L8:;
    }
  }

  /* "world_cy.pyx":1151
 *         self.messiness+=1
 * 
 *     cdef void excrete(self,Minion mi,double amount):             # <<<<<<<<<<<<<<
 *         if self.no_excrete:
 *             self.hidden_mass+=amount
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.World.excrete", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1186
 *                 else:
 *                     self.mins[x,y]+=q
 *     cdef void digest(self,Minion mi,double amount):             # <<<<<<<<<<<<<<
 *         cdef double take,out
 *         take=min(mi.uptake*amount,(1+2*mi.maxsize)**2-mi.mass)
 */

static void __pyx_f_8world_cy_5World_digest(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi, double __pyx_v_amount) {
  double __pyx_v_take;
  double __pyx_v_out;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  __Pyx_RefNannySetupContext("digest", 0);
  __Pyx_TraceCall("digest", __pyx_f[1], 1186, 0, __PYX_ERR(1, 1186, __pyx_L1_error));

  /* "world_cy.pyx":1188
 *     cdef void digest(self,Minion mi,double amount):
 *         cdef double take,out
 *         take=min(mi.uptake*amount,(1+2*mi.maxsize)**2-mi.mass)             # <<<<<<<<<<<<<<
 *         out=amount-take
 *         self.take_mass(mi,take)
 */
  __pyx_t_1 = (pow((1.0 + (2.0 * __pyx_v_mi->maxsize)), 2.0) - __pyx_v_mi->mass);
  __pyx_t_2 = (__pyx_v_mi->uptake * __pyx_v_amount);
  if (((__pyx_t_1 < __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_1;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_v_take = __pyx_t_3;

  /* "world_cy.pyx":1189
 *         cdef double take,out
 *         take=min(mi.uptake*amount,(1+2*mi.maxsize)**2-mi.mass)
 *         out=amount-take             # <<<<<<<<<<<<<<
 *         self.take_mass(mi,take)
 *         self.excrete(mi,out)
 */
  __pyx_v_out = (__pyx_v_amount - __pyx_v_take);

  /* "world_cy.pyx":1190
 *         take=min(mi.uptake*amount,(1+2*mi.maxsize)**2-mi.mass)
 *         out=amount-take
 *         self.take_mass(mi,take)             # <<<<<<<<<<<<<<
 *         self.excrete(mi,out)
 *         self.take_energy(mi,out)
 */
  ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->take_mass(__pyx_v_self, __pyx_v_mi, __pyx_v_take);

  /* "world_cy.pyx":1191
 *         out=amount-take
 *         self.take_mass(mi,take)
 *         self.excrete(mi,out)             # <<<<<<<<<<<<<<
 *         self.take_energy(mi,out)
 *     cdef void try_hunt(self,Minion mi):
 */
  ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->excrete(__pyx_v_self, __pyx_v_mi, __pyx_v_out);

  /* "world_cy.pyx":1192
 *         self.take_mass(mi,take)
 *         self.excrete(mi,out)
 *         self.take_energy(mi,out)             # <<<<<<<<<<<<<<
 *     cdef void try_hunt(self,Minion mi):
 *         cdef int xpos,ypos
 */
  ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->take_energy(__pyx_v_self, __pyx_v_mi, __pyx_v_out);

  /* "world_cy.pyx":1186
 *                 else:
 *                     self.mins[x,y]+=q
 *     cdef void digest(self,Minion mi,double amount):             # <<<<<<<<<<<<<<
 *         cdef double take,out
 *         take=min(mi.uptake*amount,(1+2*mi.maxsize)**2-mi.mass)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.World.digest", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1193
 *         self.excrete(mi,out)
 *         self.take_energy(mi,out)
 *     cdef void try_hunt(self,Minion mi):             # <<<<<<<<<<<<<<
 *         cdef int xpos,ypos
 *         cdef size_t i,j,x,y
 */

static void __pyx_f_8world_cy_5World_try_hunt(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi) {
  int __pyx_v_xpos;
  int __pyx_v_ypos;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  struct __pyx_obj_8world_cy_Minion *__pyx_v_other = 0;
  struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_occupying = 0;
  struct __pyx_obj_8world_cy_MinionDLL *__pyx_v_to_try = 0;
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("try_hunt", 0);
  __Pyx_TraceCall("try_hunt", __pyx_f[1], 1193, 0, __PYX_ERR(1, 1193, __pyx_L1_error));

  /* "world_cy.pyx":1199
 *         cdef MinionDLL occupying,to_try
 *         cdef MinionDLLNode node
 *         xpos=mi.pos[0]             # <<<<<<<<<<<<<<
 *         ypos=mi.pos[1]
 *         to_try=MinionDLL()
 */
  __pyx_v_xpos = __pyx_v_mi->pos.f0;

  /* "world_cy.pyx":1200
 *         cdef MinionDLLNode node
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]             # <<<<<<<<<<<<<<
 *         to_try=MinionDLL()
 *         for i in range(0,1+2*<size_t>mi.alen,3):
 */
  __pyx_v_ypos = __pyx_v_mi->pos.f1;

  /* "world_cy.pyx":1201
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 *         to_try=MinionDLL()             # <<<<<<<<<<<<<<
 *         for i in range(0,1+2*<size_t>mi.alen,3):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8world_cy_MinionDLL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_to_try = ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "world_cy.pyx":1202
 *         ypos=mi.pos[1]
 *         to_try=MinionDLL()
 *         for i in range(0,1+2*<size_t>mi.alen,3):             # <<<<<<<<<<<<<<
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(0,1+2*<size_t>mi.alen,3):
 */
  __pyx_t_2 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=3) {
    __pyx_v_i = __pyx_t_4;

    /* "world_cy.pyx":1203
 *         to_try=MinionDLL()
 *         for i in range(0,1+2*<size_t>mi.alen,3):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)             # <<<<<<<<<<<<<<
 *             for j in range(0,1+2*<size_t>mi.alen,3):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 */
    __pyx_t_5 = ((__pyx_v_xpos - __pyx_v_mi->alen) + ((int)__pyx_v_i));
    if (unlikely(__pyx_v_self->xsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 1203, __pyx_L1_error)
    }
    __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_5, __pyx_v_self->xsize));

    /* "world_cy.pyx":1204
 *         for i in range(0,1+2*<size_t>mi.alen,3):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(0,1+2*<size_t>mi.alen,3):             # <<<<<<<<<<<<<<
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 occupying=self.occupy_map[x,y]
 */
    __pyx_t_6 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=3) {
      __pyx_v_j = __pyx_t_8;

      /* "world_cy.pyx":1205
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(0,1+2*<size_t>mi.alen,3):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)             # <<<<<<<<<<<<<<
 *                 occupying=self.occupy_map[x,y]
 *                 if occupying.len==0:
 */
      __pyx_t_5 = ((__pyx_v_ypos - __pyx_v_mi->alen) + ((int)__pyx_v_j));
      if (unlikely(__pyx_v_self->ysize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 1205, __pyx_L1_error)
      }
      __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_5, __pyx_v_self->ysize));

      /* "world_cy.pyx":1206
 *             for j in range(0,1+2*<size_t>mi.alen,3):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 occupying=self.occupy_map[x,y]             # <<<<<<<<<<<<<<
 *                 if occupying.len==0:
 *                     continue
 */
      if (unlikely(!__pyx_v_self->occupy_map.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1206, __pyx_L1_error)}
      __pyx_t_9 = __pyx_v_x;
      __pyx_t_10 = __pyx_v_y;
      __pyx_t_5 = -1;
      if (unlikely(__pyx_t_9 >= (size_t)__pyx_v_self->occupy_map.shape[0])) __pyx_t_5 = 0;
      if (unlikely(__pyx_t_10 >= (size_t)__pyx_v_self->occupy_map.shape[1])) __pyx_t_5 = 1;
      if (unlikely(__pyx_t_5 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_5);
        __PYX_ERR(1, 1206, __pyx_L1_error)
      }
      __pyx_t_1 = (PyObject *) *((struct __pyx_obj_8world_cy_MinionDLL * *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->occupy_map.data + __pyx_t_9 * __pyx_v_self->occupy_map.strides[0]) ) + __pyx_t_10 * __pyx_v_self->occupy_map.strides[1]) ));
      __Pyx_INCREF((PyObject*)__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_occupying, ((struct __pyx_obj_8world_cy_MinionDLL *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "world_cy.pyx":1207
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 occupying=self.occupy_map[x,y]
 *                 if occupying.len==0:             # <<<<<<<<<<<<<<
 *                     continue
 *                 node=occupying.head
 */
      __pyx_t_11 = ((__pyx_v_occupying->len == 0) != 0);
      if (__pyx_t_11) {

        /* "world_cy.pyx":1208
 *                 occupying=self.occupy_map[x,y]
 *                 if occupying.len==0:
 *                     continue             # <<<<<<<<<<<<<<
 *                 node=occupying.head
 *                 while not node.is_tail:
 */
        goto __pyx_L5_continue;

        /* "world_cy.pyx":1207
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 occupying=self.occupy_map[x,y]
 *                 if occupying.len==0:             # <<<<<<<<<<<<<<
 *                     continue
 *                 node=occupying.head
 */
      }

      /* "world_cy.pyx":1209
 *                 if occupying.len==0:
 *                     continue
 *                 node=occupying.head             # <<<<<<<<<<<<<<
 *                 while not node.is_tail:
 *                     other=node.mi
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_occupying->head);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "world_cy.pyx":1210
 *                     continue
 *                 node=occupying.head
 *                 while not node.is_tail:             # <<<<<<<<<<<<<<
 *                     other=node.mi
 *                     if self.huntable(mi,other) and (not to_try.contains(other)):
 */
      while (1) {
        __pyx_t_11 = ((!(__pyx_v_node->is_tail != 0)) != 0);
        if (!__pyx_t_11) break;

        /* "world_cy.pyx":1211
 *                 node=occupying.head
 *                 while not node.is_tail:
 *                     other=node.mi             # <<<<<<<<<<<<<<
 *                     if self.huntable(mi,other) and (not to_try.contains(other)):
 *                         to_try.push(other)
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_node->mi);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_other, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_1));
        __pyx_t_1 = 0;

        /* "world_cy.pyx":1212
 *                 while not node.is_tail:
 *                     other=node.mi
 *                     if self.huntable(mi,other) and (not to_try.contains(other)):             # <<<<<<<<<<<<<<
 *                         to_try.push(other)
 *                     node=occupying.next(node)
 */
        __pyx_t_12 = (((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->huntable(__pyx_v_self, __pyx_v_mi, __pyx_v_other) != 0);
        if (__pyx_t_12) {
        } else {
          __pyx_t_11 = __pyx_t_12;
          goto __pyx_L11_bool_binop_done;
        }
        __pyx_t_12 = ((!(((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_to_try->__pyx_vtab)->contains(__pyx_v_to_try, __pyx_v_other) != 0)) != 0);
        __pyx_t_11 = __pyx_t_12;
        __pyx_L11_bool_binop_done:;
        if (__pyx_t_11) {

          /* "world_cy.pyx":1213
 *                     other=node.mi
 *                     if self.huntable(mi,other) and (not to_try.contains(other)):
 *                         to_try.push(other)             # <<<<<<<<<<<<<<
 *                     node=occupying.next(node)
 *                 other=node.mi
 */
          __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_to_try->__pyx_vtab)->push(__pyx_v_to_try, __pyx_v_other)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1213, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "world_cy.pyx":1212
 *                 while not node.is_tail:
 *                     other=node.mi
 *                     if self.huntable(mi,other) and (not to_try.contains(other)):             # <<<<<<<<<<<<<<
 *                         to_try.push(other)
 *                     node=occupying.next(node)
 */
        }

        /* "world_cy.pyx":1214
 *                     if self.huntable(mi,other) and (not to_try.contains(other)):
 *                         to_try.push(other)
 *                     node=occupying.next(node)             # <<<<<<<<<<<<<<
 *                 other=node.mi
 *                 if self.huntable(mi,other) and (not to_try.contains(other)):
 */
        __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_occupying->__pyx_vtab)->next(__pyx_v_occupying, __pyx_v_node)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1214, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_1));
        __pyx_t_1 = 0;
      }

      /* "world_cy.pyx":1215
 *                         to_try.push(other)
 *                     node=occupying.next(node)
 *                 other=node.mi             # <<<<<<<<<<<<<<
 *                 if self.huntable(mi,other) and (not to_try.contains(other)):
 *                     to_try.push(other)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_node->mi);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_other, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "world_cy.pyx":1216
 *                     node=occupying.next(node)
 *                 other=node.mi
 *                 if self.huntable(mi,other) and (not to_try.contains(other)):             # <<<<<<<<<<<<<<
 *                     to_try.push(other)
 *         if to_try.len==0:
 */
      __pyx_t_12 = (((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->huntable(__pyx_v_self, __pyx_v_mi, __pyx_v_other) != 0);
      if (__pyx_t_12) {
      } else {
        __pyx_t_11 = __pyx_t_12;
        goto __pyx_L14_bool_binop_done;
      }
      __pyx_t_12 = ((!(((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_to_try->__pyx_vtab)->contains(__pyx_v_to_try, __pyx_v_other) != 0)) != 0);
      __pyx_t_11 = __pyx_t_12;
      __pyx_L14_bool_binop_done:;
      if (__pyx_t_11) {

        /* "world_cy.pyx":1217
 *                 other=node.mi
 *                 if self.huntable(mi,other) and (not to_try.contains(other)):
 *                     to_try.push(other)             # <<<<<<<<<<<<<<
 *         if to_try.len==0:
 *             return
 */
        __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_to_try->__pyx_vtab)->push(__pyx_v_to_try, __pyx_v_other)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1217, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "world_cy.pyx":1216
 *                     node=occupying.next(node)
 *                 other=node.mi
 *                 if self.huntable(mi,other) and (not to_try.contains(other)):             # <<<<<<<<<<<<<<
 *                     to_try.push(other)
 *         if to_try.len==0:
 */
      }
      __pyx_L5_continue:;
    }
  }

  /* "world_cy.pyx":1218
 *                 if self.huntable(mi,other) and (not to_try.contains(other)):
 *                     to_try.push(other)
 *         if to_try.len==0:             # <<<<<<<<<<<<<<
 *             return
 *         node=to_try.head
 */
  __pyx_t_11 = ((__pyx_v_to_try->len == 0) != 0);
  if (__pyx_t_11) {

    /* "world_cy.pyx":1219
 *                     to_try.push(other)
 *         if to_try.len==0:
 *             return             # <<<<<<<<<<<<<<
 *         node=to_try.head
 *         while not node.is_tail:
 */
    goto __pyx_L0;

    /* "world_cy.pyx":1218
 *                 if self.huntable(mi,other) and (not to_try.contains(other)):
 *                     to_try.push(other)
 *         if to_try.len==0:             # <<<<<<<<<<<<<<
 *             return
 *         node=to_try.head
 */
  }

  /* "world_cy.pyx":1220
 *         if to_try.len==0:
 *             return
 *         node=to_try.head             # <<<<<<<<<<<<<<
 *         while not node.is_tail:
 *             other=node.mi
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_to_try->head);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_XDECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "world_cy.pyx":1221
 *             return
 *         node=to_try.head
 *         while not node.is_tail:             # <<<<<<<<<<<<<<
 *             other=node.mi
 *             self.hunt(mi,other)
 */
  while (1) {
    __pyx_t_11 = ((!(__pyx_v_node->is_tail != 0)) != 0);
    if (!__pyx_t_11) break;

    /* "world_cy.pyx":1222
 *         node=to_try.head
 *         while not node.is_tail:
 *             other=node.mi             # <<<<<<<<<<<<<<
 *             self.hunt(mi,other)
 *             node=to_try.next(node)
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_node->mi);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_other, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "world_cy.pyx":1223
 *         while not node.is_tail:
 *             other=node.mi
 *             self.hunt(mi,other)             # <<<<<<<<<<<<<<
 *             node=to_try.next(node)
 *         other=node.mi
 */
    ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->hunt(__pyx_v_self, __pyx_v_mi, __pyx_v_other);

    /* "world_cy.pyx":1224
 *             other=node.mi
 *             self.hunt(mi,other)
 *             node=to_try.next(node)             # <<<<<<<<<<<<<<
 *         other=node.mi
 *         self.hunt(mi,other)
 */
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_to_try->__pyx_vtab)->next(__pyx_v_to_try, __pyx_v_node)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_1));
    __pyx_t_1 = 0;
  }

  /* "world_cy.pyx":1225
 *             self.hunt(mi,other)
 *             node=to_try.next(node)
 *         other=node.mi             # <<<<<<<<<<<<<<
 *         self.hunt(mi,other)
 *     cdef void eat(self,Minion mi):
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_node->mi);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_XDECREF_SET(__pyx_v_other, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "world_cy.pyx":1226
 *             node=to_try.next(node)
 *         other=node.mi
 *         self.hunt(mi,other)             # <<<<<<<<<<<<<<
 *     cdef void eat(self,Minion mi):
 *         cdef double total
 */
  ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->hunt(__pyx_v_self, __pyx_v_mi, __pyx_v_other);

  /* "world_cy.pyx":1193
 *         self.excrete(mi,out)
 *         self.take_energy(mi,out)
 *     cdef void try_hunt(self,Minion mi):             # <<<<<<<<<<<<<<
 *         cdef int xpos,ypos
 *         cdef size_t i,j,x,y
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("world_cy.World.try_hunt", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_other);
  __Pyx_XDECREF((PyObject *)__pyx_v_occupying);
  __Pyx_XDECREF((PyObject *)__pyx_v_to_try);
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1227
 *         other=node.mi
 *         self.hunt(mi,other)
 *     cdef void eat(self,Minion mi):             # <<<<<<<<<<<<<<
 *         cdef double total
 *         cdef int xpos,ypos
 */

static void __pyx_f_8world_cy_5World_eat(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi) {
  double __pyx_v_total;
  int __pyx_v_xpos;
  int __pyx_v_ypos;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  size_t __pyx_t_10;
  size_t __pyx_t_11;
  size_t __pyx_t_12;
  __Pyx_RefNannySetupContext("eat", 0);
  __Pyx_TraceCall("eat", __pyx_f[1], 1227, 0, __PYX_ERR(1, 1227, __pyx_L1_error));

  /* "world_cy.pyx":1231
 *         cdef int xpos,ypos
 *         cdef size_t i,j,x,y
 *         if self.no_eat:             # <<<<<<<<<<<<<<
 *             return
 *         total=0
 */
  __pyx_t_1 = (__pyx_v_self->no_eat != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1232
 *         cdef size_t i,j,x,y
 *         if self.no_eat:
 *             return             # <<<<<<<<<<<<<<
 *         total=0
 *         xpos=mi.pos[0]
 */
    goto __pyx_L0;

    /* "world_cy.pyx":1231
 *         cdef int xpos,ypos
 *         cdef size_t i,j,x,y
 *         if self.no_eat:             # <<<<<<<<<<<<<<
 *             return
 *         total=0
 */
  }

  /* "world_cy.pyx":1233
 *         if self.no_eat:
 *             return
 *         total=0             # <<<<<<<<<<<<<<
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 */
  __pyx_v_total = 0.0;

  /* "world_cy.pyx":1234
 *             return
 *         total=0
 *         xpos=mi.pos[0]             # <<<<<<<<<<<<<<
 *         ypos=mi.pos[1]
 *         for i in range(1+2*<size_t>mi.alen):
 */
  __pyx_v_xpos = __pyx_v_mi->pos.f0;

  /* "world_cy.pyx":1235
 *         total=0
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]             # <<<<<<<<<<<<<<
 *         for i in range(1+2*<size_t>mi.alen):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 */
  __pyx_v_ypos = __pyx_v_mi->pos.f1;

  /* "world_cy.pyx":1236
 *         xpos=mi.pos[0]
 *         ypos=mi.pos[1]
 *         for i in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(1+2*<size_t>mi.alen):
 */
  __pyx_t_2 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "world_cy.pyx":1237
 *         ypos=mi.pos[1]
 *         for i in range(1+2*<size_t>mi.alen):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)             # <<<<<<<<<<<<<<
 *             for j in range(1+2*<size_t>mi.alen):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 */
    __pyx_t_5 = ((__pyx_v_xpos - __pyx_v_mi->alen) + ((int)__pyx_v_i));
    if (unlikely(__pyx_v_self->xsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 1237, __pyx_L1_error)
    }
    __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_5, __pyx_v_self->xsize));

    /* "world_cy.pyx":1238
 *         for i in range(1+2*<size_t>mi.alen):
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 total+=self.mins[x,y]
 */
    __pyx_t_6 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "world_cy.pyx":1239
 *             x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *             for j in range(1+2*<size_t>mi.alen):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)             # <<<<<<<<<<<<<<
 *                 total+=self.mins[x,y]
 *                 self.mins[x,y]=0
 */
      __pyx_t_5 = ((__pyx_v_ypos - __pyx_v_mi->alen) + ((int)__pyx_v_j));
      if (unlikely(__pyx_v_self->ysize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 1239, __pyx_L1_error)
      }
      __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_5, __pyx_v_self->ysize));

      /* "world_cy.pyx":1240
 *             for j in range(1+2*<size_t>mi.alen):
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 total+=self.mins[x,y]             # <<<<<<<<<<<<<<
 *                 self.mins[x,y]=0
 *         self.digest(mi,total)
 */
      if (unlikely(!__pyx_v_self->mins.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1240, __pyx_L1_error)}
      __pyx_t_9 = __pyx_v_x;
      __pyx_t_10 = __pyx_v_y;
      __pyx_t_5 = -1;
      if (unlikely(__pyx_t_9 >= (size_t)__pyx_v_self->mins.shape[0])) __pyx_t_5 = 0;
      if (unlikely(__pyx_t_10 >= (size_t)__pyx_v_self->mins.shape[1])) __pyx_t_5 = 1;
      if (unlikely(__pyx_t_5 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_5);
        __PYX_ERR(1, 1240, __pyx_L1_error)
      }
      __pyx_v_total = (__pyx_v_total + (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->mins.data + __pyx_t_9 * __pyx_v_self->mins.strides[0]) ) + __pyx_t_10 * __pyx_v_self->mins.strides[1]) ))));

      /* "world_cy.pyx":1241
 *                 y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                 total+=self.mins[x,y]
 *                 self.mins[x,y]=0             # <<<<<<<<<<<<<<
 *         self.digest(mi,total)
 *     cdef void act(self,Minion mi):
 */
      if (unlikely(!__pyx_v_self->mins.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1241, __pyx_L1_error)}
      __pyx_t_11 = __pyx_v_x;
      __pyx_t_12 = __pyx_v_y;
      __pyx_t_5 = -1;
      if (unlikely(__pyx_t_11 >= (size_t)__pyx_v_self->mins.shape[0])) __pyx_t_5 = 0;
      if (unlikely(__pyx_t_12 >= (size_t)__pyx_v_self->mins.shape[1])) __pyx_t_5 = 1;
      if (unlikely(__pyx_t_5 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_5);
        __PYX_ERR(1, 1241, __pyx_L1_error)
      }
      *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->mins.data + __pyx_t_11 * __pyx_v_self->mins.strides[0]) ) + __pyx_t_12 * __pyx_v_self->mins.strides[1]) )) = 0.0;
    }
  }

  /* "world_cy.pyx":1242
 *                 total+=self.mins[x,y]
 *                 self.mins[x,y]=0
 *         self.digest(mi,total)             # <<<<<<<<<<<<<<
 *     cdef void act(self,Minion mi):
 *         if mi.frozen:
 */
  ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->digest(__pyx_v_self, __pyx_v_mi, __pyx_v_total);

  /* "world_cy.pyx":1227
 *         other=node.mi
 *         self.hunt(mi,other)
 *     cdef void eat(self,Minion mi):             # <<<<<<<<<<<<<<
 *         cdef double total
 *         cdef int xpos,ypos
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.World.eat", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1243
 *                 self.mins[x,y]=0
 *         self.digest(mi,total)
 *     cdef void act(self,Minion mi):             # <<<<<<<<<<<<<<
 *         if mi.frozen:
 *             return
 */

static void __pyx_f_8world_cy_5World_act(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("act", 0);
  __Pyx_TraceCall("act", __pyx_f[1], 1243, 0, __PYX_ERR(1, 1243, __pyx_L1_error));

  /* "world_cy.pyx":1244
 *         self.digest(mi,total)
 *     cdef void act(self,Minion mi):
 *         if mi.frozen:             # <<<<<<<<<<<<<<
 *             return
 *         #print("mi.action",mi.action)
 */
  __pyx_t_1 = (__pyx_v_mi->frozen != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1245
 *     cdef void act(self,Minion mi):
 *         if mi.frozen:
 *             return             # <<<<<<<<<<<<<<
 *         #print("mi.action",mi.action)
 *         if mi.action==0:
 */
    goto __pyx_L0;

    /* "world_cy.pyx":1244
 *         self.digest(mi,total)
 *     cdef void act(self,Minion mi):
 *         if mi.frozen:             # <<<<<<<<<<<<<<
 *             return
 *         #print("mi.action",mi.action)
 */
  }

  /* "world_cy.pyx":1247
 *             return
 *         #print("mi.action",mi.action)
 *         if mi.action==0:             # <<<<<<<<<<<<<<
 *             self.move(mi)
 *             #print("mi.move_dist",mi.move_dist)
 */
  switch (__pyx_v_mi->action) {
    case 0:

    /* "world_cy.pyx":1248
 *         #print("mi.action",mi.action)
 *         if mi.action==0:
 *             self.move(mi)             # <<<<<<<<<<<<<<
 *             #print("mi.move_dist",mi.move_dist)
 *         elif mi.action==1:
 */
    ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->move(__pyx_v_self, __pyx_v_mi);

    /* "world_cy.pyx":1247
 *             return
 *         #print("mi.action",mi.action)
 *         if mi.action==0:             # <<<<<<<<<<<<<<
 *             self.move(mi)
 *             #print("mi.move_dist",mi.move_dist)
 */
    break;
    case 1:

    /* "world_cy.pyx":1251
 *             #print("mi.move_dist",mi.move_dist)
 *         elif mi.action==1:
 *             self.stretch(mi)             # <<<<<<<<<<<<<<
 *         elif mi.action==2:
 *             self.try_hunt(mi)
 */
    ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->stretch(__pyx_v_self, __pyx_v_mi);

    /* "world_cy.pyx":1250
 *             self.move(mi)
 *             #print("mi.move_dist",mi.move_dist)
 *         elif mi.action==1:             # <<<<<<<<<<<<<<
 *             self.stretch(mi)
 *         elif mi.action==2:
 */
    break;
    case 2:

    /* "world_cy.pyx":1253
 *             self.stretch(mi)
 *         elif mi.action==2:
 *             self.try_hunt(mi)             # <<<<<<<<<<<<<<
 *         elif mi.action==3:
 *             self.eat(mi)
 */
    ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->try_hunt(__pyx_v_self, __pyx_v_mi);

    /* "world_cy.pyx":1252
 *         elif mi.action==1:
 *             self.stretch(mi)
 *         elif mi.action==2:             # <<<<<<<<<<<<<<
 *             self.try_hunt(mi)
 *         elif mi.action==3:
 */
    break;
    case 3:

    /* "world_cy.pyx":1255
 *             self.try_hunt(mi)
 *         elif mi.action==3:
 *             self.eat(mi)             # <<<<<<<<<<<<<<
 *     cdef void basal_metabolism(self,Minion mi):
 *         self.loss_energy(mi,mi.basal_metabolic_rate*mi.mass)
 */
    ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->eat(__pyx_v_self, __pyx_v_mi);

    /* "world_cy.pyx":1254
 *         elif mi.action==2:
 *             self.try_hunt(mi)
 *         elif mi.action==3:             # <<<<<<<<<<<<<<
 *             self.eat(mi)
 *     cdef void basal_metabolism(self,Minion mi):
 */
    break;
    default: break;
  }

  /* "world_cy.pyx":1243
 *                 self.mins[x,y]=0
 *         self.digest(mi,total)
 *     cdef void act(self,Minion mi):             # <<<<<<<<<<<<<<
 *         if mi.frozen:
 *             return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.World.act", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1256
 *         elif mi.action==3:
 *             self.eat(mi)
 *     cdef void basal_metabolism(self,Minion mi):             # <<<<<<<<<<<<<<
 *         self.loss_energy(mi,mi.basal_metabolic_rate*mi.mass)
 * 
 */

static void __pyx_f_8world_cy_5World_basal_metabolism(struct __pyx_obj_8world_cy_World *__pyx_v_self, struct __pyx_obj_8world_cy_Minion *__pyx_v_mi) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("basal_metabolism", 0);
  __Pyx_TraceCall("basal_metabolism", __pyx_f[1], 1256, 0, __PYX_ERR(1, 1256, __pyx_L1_error));

  /* "world_cy.pyx":1257
 *             self.eat(mi)
 *     cdef void basal_metabolism(self,Minion mi):
 *         self.loss_energy(mi,mi.basal_metabolic_rate*mi.mass)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (void)(((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->loss_energy(__pyx_v_self, __pyx_v_mi, (__pyx_v_mi->basal_metabolic_rate * __pyx_v_mi->mass)));

  /* "world_cy.pyx":1256
 *         elif mi.action==3:
 *             self.eat(mi)
 *     cdef void basal_metabolism(self,Minion mi):             # <<<<<<<<<<<<<<
 *         self.loss_energy(mi,mi.basal_metabolic_rate*mi.mass)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.World.basal_metabolism", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1261
 * 
 * 
 *     cdef void control_all(self):             # <<<<<<<<<<<<<<
 *         if self.mis.len==0:
 *             return
 */

static void __pyx_f_8world_cy_5World_control_all(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  struct __pyx_obj_8world_cy_Minion *__pyx_v_mi = 0;
  __Pyx_memviewslice __pyx_v_inp = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_inps = { 0, 0, { 0 }, { 0 }, { 0 } };
  size_t __pyx_v_i;
  PyObject *__pyx_v_v = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_memviewslice __pyx_t_3 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_10 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_RefNannySetupContext("control_all", 0);
  __Pyx_TraceCall("control_all", __pyx_f[1], 1261, 0, __PYX_ERR(1, 1261, __pyx_L1_error));

  /* "world_cy.pyx":1262
 * 
 *     cdef void control_all(self):
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return
 *         cdef MinionDLLNode node
 */
  __pyx_t_1 = ((__pyx_v_self->mis->len == 0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1263
 *     cdef void control_all(self):
 *         if self.mis.len==0:
 *             return             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 */
    goto __pyx_L0;

    /* "world_cy.pyx":1262
 * 
 *     cdef void control_all(self):
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return
 *         cdef MinionDLLNode node
 */
  }

  /* "world_cy.pyx":1269
 *         cdef double[:,:] inps
 *         cdef size_t i
 *         if not self.halluc:             # <<<<<<<<<<<<<<
 *             node=self.mis.head
 *             while not node.is_tail:
 */
  __pyx_t_1 = ((!(__pyx_v_self->halluc != 0)) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1270
 *         cdef size_t i
 *         if not self.halluc:
 *             node=self.mis.head             # <<<<<<<<<<<<<<
 *             while not node.is_tail:
 *                 mi=node.mi
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->mis->head);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "world_cy.pyx":1271
 *         if not self.halluc:
 *             node=self.mis.head
 *             while not node.is_tail:             # <<<<<<<<<<<<<<
 *                 mi=node.mi
 *                 inp=mi.get_input(self.snapshot)
 */
    while (1) {
      __pyx_t_1 = ((!(__pyx_v_node->is_tail != 0)) != 0);
      if (!__pyx_t_1) break;

      /* "world_cy.pyx":1272
 *             node=self.mis.head
 *             while not node.is_tail:
 *                 mi=node.mi             # <<<<<<<<<<<<<<
 *                 inp=mi.get_input(self.snapshot)
 *                 #self.snapshot_error_detector("right before control")
 */
      __pyx_t_2 = ((PyObject *)__pyx_v_node->mi);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "world_cy.pyx":1273
 *             while not node.is_tail:
 *                 mi=node.mi
 *                 inp=mi.get_input(self.snapshot)             # <<<<<<<<<<<<<<
 *                 #self.snapshot_error_detector("right before control")
 *                 #if node.prev==None:
 */
      if (unlikely(!__pyx_v_self->snapshot.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1273, __pyx_L1_error)}
      __pyx_t_3 = ((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_mi->__pyx_vtab)->get_input(__pyx_v_mi, __pyx_v_self->snapshot); if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(1, 1273, __pyx_L1_error)
      __PYX_XDEC_MEMVIEW(&__pyx_v_inp, 1);
      __pyx_v_inp = __pyx_t_3;
      __pyx_t_3.memview = NULL;
      __pyx_t_3.data = NULL;

      /* "world_cy.pyx":1278
 *                  #   print(list(inp))
 *                 #print(inp[7*vision_len+7],inp[vision_len**2+7*vision_len+7],inp[2*vision_len**2+7*vision_len+7])
 *                 mi.brain.control(mi,inp)             # <<<<<<<<<<<<<<
 *                 node=self.mis.next(node)
 *             mi=node.mi
 */
      ((struct __pyx_vtabstruct_8world_cy_Brain *)__pyx_v_mi->brain->__pyx_vtab)->control(__pyx_v_mi->brain, __pyx_v_mi, __pyx_v_inp);

      /* "world_cy.pyx":1279
 *                 #print(inp[7*vision_len+7],inp[vision_len**2+7*vision_len+7],inp[2*vision_len**2+7*vision_len+7])
 *                 mi.brain.control(mi,inp)
 *                 node=self.mis.next(node)             # <<<<<<<<<<<<<<
 *             mi=node.mi
 *             inp=mi.get_input(self.snapshot)
 */
      __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->mis->__pyx_vtab)->next(__pyx_v_self->mis, __pyx_v_node)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1279, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2));
      __pyx_t_2 = 0;
    }

    /* "world_cy.pyx":1280
 *                 mi.brain.control(mi,inp)
 *                 node=self.mis.next(node)
 *             mi=node.mi             # <<<<<<<<<<<<<<
 *             inp=mi.get_input(self.snapshot)
 *             mi.brain.control(mi,inp)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_node->mi);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "world_cy.pyx":1281
 *                 node=self.mis.next(node)
 *             mi=node.mi
 *             inp=mi.get_input(self.snapshot)             # <<<<<<<<<<<<<<
 *             mi.brain.control(mi,inp)
 *             return
 */
    if (unlikely(!__pyx_v_self->snapshot.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1281, __pyx_L1_error)}
    __pyx_t_3 = ((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_mi->__pyx_vtab)->get_input(__pyx_v_mi, __pyx_v_self->snapshot); if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(1, 1281, __pyx_L1_error)
    __PYX_XDEC_MEMVIEW(&__pyx_v_inp, 1);
    __pyx_v_inp = __pyx_t_3;
    __pyx_t_3.memview = NULL;
    __pyx_t_3.data = NULL;

    /* "world_cy.pyx":1282
 *             mi=node.mi
 *             inp=mi.get_input(self.snapshot)
 *             mi.brain.control(mi,inp)             # <<<<<<<<<<<<<<
 *             return
 *         v=np.empty((self.mis.len,self.mis.head.mi.idim),dtype=np.float64)
 */
    ((struct __pyx_vtabstruct_8world_cy_Brain *)__pyx_v_mi->brain->__pyx_vtab)->control(__pyx_v_mi->brain, __pyx_v_mi, __pyx_v_inp);

    /* "world_cy.pyx":1283
 *             inp=mi.get_input(self.snapshot)
 *             mi.brain.control(mi,inp)
 *             return             # <<<<<<<<<<<<<<
 *         v=np.empty((self.mis.len,self.mis.head.mi.idim),dtype=np.float64)
 *         inps=v
 */
    goto __pyx_L0;

    /* "world_cy.pyx":1269
 *         cdef double[:,:] inps
 *         cdef size_t i
 *         if not self.halluc:             # <<<<<<<<<<<<<<
 *             node=self.mis.head
 *             while not node.is_tail:
 */
  }

  /* "world_cy.pyx":1284
 *             mi.brain.control(mi,inp)
 *             return
 *         v=np.empty((self.mis.len,self.mis.head.mi.idim),dtype=np.float64)             # <<<<<<<<<<<<<<
 *         inps=v
 *         node=self.mis.head
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->mis->len); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->mis->head->mi->idim); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(1, 1284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_v = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "world_cy.pyx":1285
 *             return
 *         v=np.empty((self.mis.len,self.mis.head.mi.idim),dtype=np.float64)
 *         inps=v             # <<<<<<<<<<<<<<
 *         node=self.mis.head
 *         i=0
 */
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_v_v, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(1, 1285, __pyx_L1_error)
  __pyx_v_inps = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "world_cy.pyx":1286
 *         v=np.empty((self.mis.len,self.mis.head.mi.idim),dtype=np.float64)
 *         inps=v
 *         node=self.mis.head             # <<<<<<<<<<<<<<
 *         i=0
 *         while not node.is_tail:
 */
  __pyx_t_7 = ((PyObject *)__pyx_v_self->mis->head);
  __Pyx_INCREF(__pyx_t_7);
  __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "world_cy.pyx":1287
 *         inps=v
 *         node=self.mis.head
 *         i=0             # <<<<<<<<<<<<<<
 *         while not node.is_tail:
 *             mi=node.mi
 */
  __pyx_v_i = 0;

  /* "world_cy.pyx":1288
 *         node=self.mis.head
 *         i=0
 *         while not node.is_tail:             # <<<<<<<<<<<<<<
 *             mi=node.mi
 *             inps[i,:]=mi.get_input(self.snapshot)
 */
  while (1) {
    __pyx_t_1 = ((!(__pyx_v_node->is_tail != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "world_cy.pyx":1289
 *         i=0
 *         while not node.is_tail:
 *             mi=node.mi             # <<<<<<<<<<<<<<
 *             inps[i,:]=mi.get_input(self.snapshot)
 *             node=self.mis.next(node)
 */
    __pyx_t_7 = ((PyObject *)__pyx_v_node->mi);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_7));
    __pyx_t_7 = 0;

    /* "world_cy.pyx":1290
 *         while not node.is_tail:
 *             mi=node.mi
 *             inps[i,:]=mi.get_input(self.snapshot)             # <<<<<<<<<<<<<<
 *             node=self.mis.next(node)
 *             i+=1
 */
    if (unlikely(!__pyx_v_self->snapshot.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1290, __pyx_L1_error)}
    __pyx_t_3 = ((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_mi->__pyx_vtab)->get_input(__pyx_v_mi, __pyx_v_self->snapshot); if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(1, 1290, __pyx_L1_error)
    __pyx_t_9.data = __pyx_v_inps.data;
    __pyx_t_9.memview = __pyx_v_inps.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_9, 0);
    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_i;
        Py_ssize_t __pyx_tmp_shape = __pyx_v_inps.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_inps.strides[0];
        if (__pyx_tmp_idx < 0)
            __pyx_tmp_idx += __pyx_tmp_shape;
        if (!__Pyx_is_valid_index(__pyx_tmp_idx, __pyx_tmp_shape)) {
            PyErr_SetString(PyExc_IndexError,
                            "Index out of bounds (axis 0)");
            __PYX_ERR(1, 1290, __pyx_L1_error)
        }
        __pyx_t_9.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_9.shape[0] = __pyx_v_inps.shape[1];
__pyx_t_9.strides[0] = __pyx_v_inps.strides[1];
    __pyx_t_9.suboffsets[0] = -1;

if (unlikely(__pyx_memoryview_copy_contents(__pyx_t_3, __pyx_t_9, 1, 1, 0) < 0)) __PYX_ERR(1, 1290, __pyx_L1_error)
    __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;
    __PYX_XDEC_MEMVIEW(&__pyx_t_3, 1);
    __pyx_t_3.memview = NULL;
    __pyx_t_3.data = NULL;

    /* "world_cy.pyx":1291
 *             mi=node.mi
 *             inps[i,:]=mi.get_input(self.snapshot)
 *             node=self.mis.next(node)             # <<<<<<<<<<<<<<
 *             i+=1
 *         mi=node.mi
 */
    __pyx_t_7 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->mis->__pyx_vtab)->next(__pyx_v_self->mis, __pyx_v_node)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_7));
    __pyx_t_7 = 0;

    /* "world_cy.pyx":1292
 *             inps[i,:]=mi.get_input(self.snapshot)
 *             node=self.mis.next(node)
 *             i+=1             # <<<<<<<<<<<<<<
 *         mi=node.mi
 *         inps[i,:]=mi.get_input(self.snapshot)
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "world_cy.pyx":1293
 *             node=self.mis.next(node)
 *             i+=1
 *         mi=node.mi             # <<<<<<<<<<<<<<
 *         inps[i,:]=mi.get_input(self.snapshot)
 *         np.random.shuffle(v)
 */
  __pyx_t_7 = ((PyObject *)__pyx_v_node->mi);
  __Pyx_INCREF(__pyx_t_7);
  __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_7));
  __pyx_t_7 = 0;

  /* "world_cy.pyx":1294
 *             i+=1
 *         mi=node.mi
 *         inps[i,:]=mi.get_input(self.snapshot)             # <<<<<<<<<<<<<<
 *         np.random.shuffle(v)
 *         node=self.mis.head
 */
  if (unlikely(!__pyx_v_self->snapshot.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1294, __pyx_L1_error)}
  __pyx_t_3 = ((struct __pyx_vtabstruct_8world_cy_Minion *)__pyx_v_mi->__pyx_vtab)->get_input(__pyx_v_mi, __pyx_v_self->snapshot); if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(1, 1294, __pyx_L1_error)
  __pyx_t_10.data = __pyx_v_inps.data;
  __pyx_t_10.memview = __pyx_v_inps.memview;
  __PYX_INC_MEMVIEW(&__pyx_t_10, 0);
  {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_i;
        Py_ssize_t __pyx_tmp_shape = __pyx_v_inps.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_inps.strides[0];
        if (__pyx_tmp_idx < 0)
            __pyx_tmp_idx += __pyx_tmp_shape;
        if (!__Pyx_is_valid_index(__pyx_tmp_idx, __pyx_tmp_shape)) {
            PyErr_SetString(PyExc_IndexError,
                            "Index out of bounds (axis 0)");
            __PYX_ERR(1, 1294, __pyx_L1_error)
        }
        __pyx_t_10.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_10.shape[0] = __pyx_v_inps.shape[1];
__pyx_t_10.strides[0] = __pyx_v_inps.strides[1];
    __pyx_t_10.suboffsets[0] = -1;

if (unlikely(__pyx_memoryview_copy_contents(__pyx_t_3, __pyx_t_10, 1, 1, 0) < 0)) __PYX_ERR(1, 1294, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_t_10, 1);
  __pyx_t_10.memview = NULL;
  __pyx_t_10.data = NULL;
  __PYX_XDEC_MEMVIEW(&__pyx_t_3, 1);
  __pyx_t_3.memview = NULL;
  __pyx_t_3.data = NULL;

  /* "world_cy.pyx":1295
 *         mi=node.mi
 *         inps[i,:]=mi.get_input(self.snapshot)
 *         np.random.shuffle(v)             # <<<<<<<<<<<<<<
 *         node=self.mis.head
 *         i=0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_random); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_shuffle); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_v) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_v);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "world_cy.pyx":1296
 *         inps[i,:]=mi.get_input(self.snapshot)
 *         np.random.shuffle(v)
 *         node=self.mis.head             # <<<<<<<<<<<<<<
 *         i=0
 *         while not node.is_tail:
 */
  __pyx_t_7 = ((PyObject *)__pyx_v_self->mis->head);
  __Pyx_INCREF(__pyx_t_7);
  __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_7));
  __pyx_t_7 = 0;

  /* "world_cy.pyx":1297
 *         np.random.shuffle(v)
 *         node=self.mis.head
 *         i=0             # <<<<<<<<<<<<<<
 *         while not node.is_tail:
 *             mi=node.mi
 */
  __pyx_v_i = 0;

  /* "world_cy.pyx":1298
 *         node=self.mis.head
 *         i=0
 *         while not node.is_tail:             # <<<<<<<<<<<<<<
 *             mi=node.mi
 *             inp=inps[i,:]
 */
  while (1) {
    __pyx_t_1 = ((!(__pyx_v_node->is_tail != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "world_cy.pyx":1299
 *         i=0
 *         while not node.is_tail:
 *             mi=node.mi             # <<<<<<<<<<<<<<
 *             inp=inps[i,:]
 *             mi.brain.control(mi,inp)
 */
    __pyx_t_7 = ((PyObject *)__pyx_v_node->mi);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_DECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_7));
    __pyx_t_7 = 0;

    /* "world_cy.pyx":1300
 *         while not node.is_tail:
 *             mi=node.mi
 *             inp=inps[i,:]             # <<<<<<<<<<<<<<
 *             mi.brain.control(mi,inp)
 *             node=self.mis.next(node)
 */
    __pyx_t_3.data = __pyx_v_inps.data;
    __pyx_t_3.memview = __pyx_v_inps.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_3, 0);
    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_i;
        Py_ssize_t __pyx_tmp_shape = __pyx_v_inps.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_inps.strides[0];
        if (__pyx_tmp_idx < 0)
            __pyx_tmp_idx += __pyx_tmp_shape;
        if (!__Pyx_is_valid_index(__pyx_tmp_idx, __pyx_tmp_shape)) {
            PyErr_SetString(PyExc_IndexError,
                            "Index out of bounds (axis 0)");
            __PYX_ERR(1, 1300, __pyx_L1_error)
        }
        __pyx_t_3.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_3.shape[0] = __pyx_v_inps.shape[1];
__pyx_t_3.strides[0] = __pyx_v_inps.strides[1];
    __pyx_t_3.suboffsets[0] = -1;

__PYX_XDEC_MEMVIEW(&__pyx_v_inp, 1);
    __pyx_v_inp = __pyx_t_3;
    __pyx_t_3.memview = NULL;
    __pyx_t_3.data = NULL;

    /* "world_cy.pyx":1301
 *             mi=node.mi
 *             inp=inps[i,:]
 *             mi.brain.control(mi,inp)             # <<<<<<<<<<<<<<
 *             node=self.mis.next(node)
 *             i+=1
 */
    ((struct __pyx_vtabstruct_8world_cy_Brain *)__pyx_v_mi->brain->__pyx_vtab)->control(__pyx_v_mi->brain, __pyx_v_mi, __pyx_v_inp);

    /* "world_cy.pyx":1302
 *             inp=inps[i,:]
 *             mi.brain.control(mi,inp)
 *             node=self.mis.next(node)             # <<<<<<<<<<<<<<
 *             i+=1
 *         mi=node.mi
 */
    __pyx_t_7 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->mis->__pyx_vtab)->next(__pyx_v_self->mis, __pyx_v_node)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_7));
    __pyx_t_7 = 0;

    /* "world_cy.pyx":1303
 *             mi.brain.control(mi,inp)
 *             node=self.mis.next(node)
 *             i+=1             # <<<<<<<<<<<<<<
 *         mi=node.mi
 *         inp=inps[i,:]
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "world_cy.pyx":1304
 *             node=self.mis.next(node)
 *             i+=1
 *         mi=node.mi             # <<<<<<<<<<<<<<
 *         inp=inps[i,:]
 *         mi.brain.control(mi,inp)
 */
  __pyx_t_7 = ((PyObject *)__pyx_v_node->mi);
  __Pyx_INCREF(__pyx_t_7);
  __Pyx_DECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_7));
  __pyx_t_7 = 0;

  /* "world_cy.pyx":1305
 *             i+=1
 *         mi=node.mi
 *         inp=inps[i,:]             # <<<<<<<<<<<<<<
 *         mi.brain.control(mi,inp)
 *     cdef void act_all(self):
 */
  __pyx_t_3.data = __pyx_v_inps.data;
  __pyx_t_3.memview = __pyx_v_inps.memview;
  __PYX_INC_MEMVIEW(&__pyx_t_3, 0);
  {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_i;
        Py_ssize_t __pyx_tmp_shape = __pyx_v_inps.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_inps.strides[0];
        if (__pyx_tmp_idx < 0)
            __pyx_tmp_idx += __pyx_tmp_shape;
        if (!__Pyx_is_valid_index(__pyx_tmp_idx, __pyx_tmp_shape)) {
            PyErr_SetString(PyExc_IndexError,
                            "Index out of bounds (axis 0)");
            __PYX_ERR(1, 1305, __pyx_L1_error)
        }
        __pyx_t_3.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_3.shape[0] = __pyx_v_inps.shape[1];
__pyx_t_3.strides[0] = __pyx_v_inps.strides[1];
    __pyx_t_3.suboffsets[0] = -1;

__PYX_XDEC_MEMVIEW(&__pyx_v_inp, 1);
  __pyx_v_inp = __pyx_t_3;
  __pyx_t_3.memview = NULL;
  __pyx_t_3.data = NULL;

  /* "world_cy.pyx":1306
 *         mi=node.mi
 *         inp=inps[i,:]
 *         mi.brain.control(mi,inp)             # <<<<<<<<<<<<<<
 *     cdef void act_all(self):
 *         cdef MinionDLLNode node
 */
  ((struct __pyx_vtabstruct_8world_cy_Brain *)__pyx_v_mi->brain->__pyx_vtab)->control(__pyx_v_mi->brain, __pyx_v_mi, __pyx_v_inp);

  /* "world_cy.pyx":1261
 * 
 * 
 *     cdef void control_all(self):             # <<<<<<<<<<<<<<
 *         if self.mis.len==0:
 *             return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __PYX_XDEC_MEMVIEW(&__pyx_t_3, 1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_10, 1);
  __Pyx_WriteUnraisable("world_cy.World.control_all", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_mi);
  __PYX_XDEC_MEMVIEW(&__pyx_v_inp, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_inps, 1);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1307
 *         inp=inps[i,:]
 *         mi.brain.control(mi,inp)
 *     cdef void act_all(self):             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 */

static void __pyx_f_8world_cy_5World_act_all(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  struct __pyx_obj_8world_cy_Minion *__pyx_v_mi = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("act_all", 0);
  __Pyx_TraceCall("act_all", __pyx_f[1], 1307, 0, __PYX_ERR(1, 1307, __pyx_L1_error));

  /* "world_cy.pyx":1310
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return
 *         node=self.mis.head
 */
  __pyx_t_1 = ((__pyx_v_self->mis->len == 0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1311
 *         cdef Minion mi
 *         if self.mis.len==0:
 *             return             # <<<<<<<<<<<<<<
 *         node=self.mis.head
 *         while not node.is_tail:
 */
    goto __pyx_L0;

    /* "world_cy.pyx":1310
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return
 *         node=self.mis.head
 */
  }

  /* "world_cy.pyx":1312
 *         if self.mis.len==0:
 *             return
 *         node=self.mis.head             # <<<<<<<<<<<<<<
 *         while not node.is_tail:
 *             mi=node.mi
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->mis->head);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "world_cy.pyx":1313
 *             return
 *         node=self.mis.head
 *         while not node.is_tail:             # <<<<<<<<<<<<<<
 *             mi=node.mi
 *             if not mi.dead:
 */
  while (1) {
    __pyx_t_1 = ((!(__pyx_v_node->is_tail != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "world_cy.pyx":1314
 *         node=self.mis.head
 *         while not node.is_tail:
 *             mi=node.mi             # <<<<<<<<<<<<<<
 *             if not mi.dead:
 *                 self.act(mi)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_node->mi);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "world_cy.pyx":1315
 *         while not node.is_tail:
 *             mi=node.mi
 *             if not mi.dead:             # <<<<<<<<<<<<<<
 *                 self.act(mi)
 *             node=self.mis.next(node)
 */
    __pyx_t_1 = ((!(__pyx_v_mi->dead != 0)) != 0);
    if (__pyx_t_1) {

      /* "world_cy.pyx":1316
 *             mi=node.mi
 *             if not mi.dead:
 *                 self.act(mi)             # <<<<<<<<<<<<<<
 *             node=self.mis.next(node)
 *         mi=node.mi
 */
      ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->act(__pyx_v_self, __pyx_v_mi);

      /* "world_cy.pyx":1315
 *         while not node.is_tail:
 *             mi=node.mi
 *             if not mi.dead:             # <<<<<<<<<<<<<<
 *                 self.act(mi)
 *             node=self.mis.next(node)
 */
    }

    /* "world_cy.pyx":1317
 *             if not mi.dead:
 *                 self.act(mi)
 *             node=self.mis.next(node)             # <<<<<<<<<<<<<<
 *         mi=node.mi
 *         if not mi.dead:
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->mis->__pyx_vtab)->next(__pyx_v_self->mis, __pyx_v_node)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2));
    __pyx_t_2 = 0;
  }

  /* "world_cy.pyx":1318
 *                 self.act(mi)
 *             node=self.mis.next(node)
 *         mi=node.mi             # <<<<<<<<<<<<<<
 *         if not mi.dead:
 *             self.act(mi)
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_node->mi);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "world_cy.pyx":1319
 *             node=self.mis.next(node)
 *         mi=node.mi
 *         if not mi.dead:             # <<<<<<<<<<<<<<
 *             self.act(mi)
 *     cdef void basal_metabolism_all(self):
 */
  __pyx_t_1 = ((!(__pyx_v_mi->dead != 0)) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1320
 *         mi=node.mi
 *         if not mi.dead:
 *             self.act(mi)             # <<<<<<<<<<<<<<
 *     cdef void basal_metabolism_all(self):
 *         cdef MinionDLLNode node
 */
    ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->act(__pyx_v_self, __pyx_v_mi);

    /* "world_cy.pyx":1319
 *             node=self.mis.next(node)
 *         mi=node.mi
 *         if not mi.dead:             # <<<<<<<<<<<<<<
 *             self.act(mi)
 *     cdef void basal_metabolism_all(self):
 */
  }

  /* "world_cy.pyx":1307
 *         inp=inps[i,:]
 *         mi.brain.control(mi,inp)
 *     cdef void act_all(self):             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("world_cy.World.act_all", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_mi);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1321
 *         if not mi.dead:
 *             self.act(mi)
 *     cdef void basal_metabolism_all(self):             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 */

static void __pyx_f_8world_cy_5World_basal_metabolism_all(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  struct __pyx_obj_8world_cy_Minion *__pyx_v_mi = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("basal_metabolism_all", 0);
  __Pyx_TraceCall("basal_metabolism_all", __pyx_f[1], 1321, 0, __PYX_ERR(1, 1321, __pyx_L1_error));

  /* "world_cy.pyx":1324
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return
 *         node=self.mis.head
 */
  __pyx_t_1 = ((__pyx_v_self->mis->len == 0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1325
 *         cdef Minion mi
 *         if self.mis.len==0:
 *             return             # <<<<<<<<<<<<<<
 *         node=self.mis.head
 *         while not node.is_tail:
 */
    goto __pyx_L0;

    /* "world_cy.pyx":1324
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return
 *         node=self.mis.head
 */
  }

  /* "world_cy.pyx":1326
 *         if self.mis.len==0:
 *             return
 *         node=self.mis.head             # <<<<<<<<<<<<<<
 *         while not node.is_tail:
 *             mi=node.mi
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->mis->head);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "world_cy.pyx":1327
 *             return
 *         node=self.mis.head
 *         while not node.is_tail:             # <<<<<<<<<<<<<<
 *             mi=node.mi
 *             if not mi.dead:
 */
  while (1) {
    __pyx_t_1 = ((!(__pyx_v_node->is_tail != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "world_cy.pyx":1328
 *         node=self.mis.head
 *         while not node.is_tail:
 *             mi=node.mi             # <<<<<<<<<<<<<<
 *             if not mi.dead:
 *                 self.basal_metabolism(mi)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_node->mi);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "world_cy.pyx":1329
 *         while not node.is_tail:
 *             mi=node.mi
 *             if not mi.dead:             # <<<<<<<<<<<<<<
 *                 self.basal_metabolism(mi)
 *             node=self.mis.next(node)
 */
    __pyx_t_1 = ((!(__pyx_v_mi->dead != 0)) != 0);
    if (__pyx_t_1) {

      /* "world_cy.pyx":1330
 *             mi=node.mi
 *             if not mi.dead:
 *                 self.basal_metabolism(mi)             # <<<<<<<<<<<<<<
 *             node=self.mis.next(node)
 *         mi=node.mi
 */
      ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->basal_metabolism(__pyx_v_self, __pyx_v_mi);

      /* "world_cy.pyx":1329
 *         while not node.is_tail:
 *             mi=node.mi
 *             if not mi.dead:             # <<<<<<<<<<<<<<
 *                 self.basal_metabolism(mi)
 *             node=self.mis.next(node)
 */
    }

    /* "world_cy.pyx":1331
 *             if not mi.dead:
 *                 self.basal_metabolism(mi)
 *             node=self.mis.next(node)             # <<<<<<<<<<<<<<
 *         mi=node.mi
 *         if not mi.dead:
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->mis->__pyx_vtab)->next(__pyx_v_self->mis, __pyx_v_node)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2));
    __pyx_t_2 = 0;
  }

  /* "world_cy.pyx":1332
 *                 self.basal_metabolism(mi)
 *             node=self.mis.next(node)
 *         mi=node.mi             # <<<<<<<<<<<<<<
 *         if not mi.dead:
 *             self.basal_metabolism(mi)
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_node->mi);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "world_cy.pyx":1333
 *             node=self.mis.next(node)
 *         mi=node.mi
 *         if not mi.dead:             # <<<<<<<<<<<<<<
 *             self.basal_metabolism(mi)
 *     cdef void render(self):
 */
  __pyx_t_1 = ((!(__pyx_v_mi->dead != 0)) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1334
 *         mi=node.mi
 *         if not mi.dead:
 *             self.basal_metabolism(mi)             # <<<<<<<<<<<<<<
 *     cdef void render(self):
 *         cdef size_t xsize,ysize,x,y,i,j
 */
    ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->basal_metabolism(__pyx_v_self, __pyx_v_mi);

    /* "world_cy.pyx":1333
 *             node=self.mis.next(node)
 *         mi=node.mi
 *         if not mi.dead:             # <<<<<<<<<<<<<<
 *             self.basal_metabolism(mi)
 *     cdef void render(self):
 */
  }

  /* "world_cy.pyx":1321
 *         if not mi.dead:
 *             self.act(mi)
 *     cdef void basal_metabolism_all(self):             # <<<<<<<<<<<<<<
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("world_cy.World.basal_metabolism_all", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_mi);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1335
 *         if not mi.dead:
 *             self.basal_metabolism(mi)
 *     cdef void render(self):             # <<<<<<<<<<<<<<
 *         cdef size_t xsize,ysize,x,y,i,j
 *         cdef int xpos,ypos
 */

static void __pyx_f_8world_cy_5World_render(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  size_t __pyx_v_xsize;
  size_t __pyx_v_ysize;
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  int __pyx_v_xpos;
  int __pyx_v_ypos;
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  struct __pyx_obj_8world_cy_Minion *__pyx_v_mi = 0;
  __pyx_ctuple_int__and_int__and_int __pyx_v_c;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  __pyx_ctuple_int__and_int__and_int __pyx_t_12;
  size_t __pyx_t_13;
  size_t __pyx_t_14;
  size_t __pyx_t_15;
  size_t __pyx_t_16;
  size_t __pyx_t_17;
  size_t __pyx_t_18;
  size_t __pyx_t_19;
  size_t __pyx_t_20;
  __Pyx_RefNannySetupContext("render", 0);
  __Pyx_TraceCall("render", __pyx_f[1], 1335, 0, __PYX_ERR(1, 1335, __pyx_L1_error));

  /* "world_cy.pyx":1341
 *         cdef Minion mi
 *         cdef (int,int,int) c
 *         xsize=<size_t>self.xsize             # <<<<<<<<<<<<<<
 *         ysize=<size_t>self.ysize
 *         for x in range(xsize):
 */
  __pyx_v_xsize = ((size_t)__pyx_v_self->xsize);

  /* "world_cy.pyx":1342
 *         cdef (int,int,int) c
 *         xsize=<size_t>self.xsize
 *         ysize=<size_t>self.ysize             # <<<<<<<<<<<<<<
 *         for x in range(xsize):
 *             for y in range(ysize):
 */
  __pyx_v_ysize = ((size_t)__pyx_v_self->ysize);

  /* "world_cy.pyx":1343
 *         xsize=<size_t>self.xsize
 *         ysize=<size_t>self.ysize
 *         for x in range(xsize):             # <<<<<<<<<<<<<<
 *             for y in range(ysize):
 *                 self.snapshot[x,y]=0
 */
  __pyx_t_1 = __pyx_v_xsize;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_x = __pyx_t_3;

    /* "world_cy.pyx":1344
 *         ysize=<size_t>self.ysize
 *         for x in range(xsize):
 *             for y in range(ysize):             # <<<<<<<<<<<<<<
 *                 self.snapshot[x,y]=0
 *         if self.mis.len==0:
 */
    __pyx_t_4 = __pyx_v_ysize;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_y = __pyx_t_6;

      /* "world_cy.pyx":1345
 *         for x in range(xsize):
 *             for y in range(ysize):
 *                 self.snapshot[x,y]=0             # <<<<<<<<<<<<<<
 *         if self.mis.len==0:
 *             pass
 */
      if (unlikely(!__pyx_v_self->snapshot.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1345, __pyx_L1_error)}
      __pyx_t_7 = __pyx_v_x;
      __pyx_t_8 = __pyx_v_y;
      __pyx_t_9 = -1;
      if (unlikely(__pyx_t_7 >= (size_t)__pyx_v_self->snapshot.shape[0])) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_8 >= (size_t)__pyx_v_self->snapshot.shape[1])) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        __PYX_ERR(1, 1345, __pyx_L1_error)
      }
      *((int *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->snapshot.data + __pyx_t_7 * __pyx_v_self->snapshot.strides[0]) ) + __pyx_t_8 * __pyx_v_self->snapshot.strides[1]) )) = 0;
    }
  }

  /* "world_cy.pyx":1346
 *             for y in range(ysize):
 *                 self.snapshot[x,y]=0
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             pass
 *         else:
 */
  __pyx_t_10 = ((__pyx_v_self->mis->len == 0) != 0);
  if (__pyx_t_10) {
    goto __pyx_L7;
  }

  /* "world_cy.pyx":1349
 *             pass
 *         else:
 *             node=self.mis.head             # <<<<<<<<<<<<<<
 *             while not node.is_tail:
 *                 mi=node.mi
 */
  /*else*/ {
    __pyx_t_11 = ((PyObject *)__pyx_v_self->mis->head);
    __Pyx_INCREF(__pyx_t_11);
    __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_11);
    __pyx_t_11 = 0;

    /* "world_cy.pyx":1350
 *         else:
 *             node=self.mis.head
 *             while not node.is_tail:             # <<<<<<<<<<<<<<
 *                 mi=node.mi
 *                 c=mi.color
 */
    while (1) {
      __pyx_t_10 = ((!(__pyx_v_node->is_tail != 0)) != 0);
      if (!__pyx_t_10) break;

      /* "world_cy.pyx":1351
 *             node=self.mis.head
 *             while not node.is_tail:
 *                 mi=node.mi             # <<<<<<<<<<<<<<
 *                 c=mi.color
 *                 xpos=mi.pos[0]
 */
      __pyx_t_11 = ((PyObject *)__pyx_v_node->mi);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_11));
      __pyx_t_11 = 0;

      /* "world_cy.pyx":1352
 *             while not node.is_tail:
 *                 mi=node.mi
 *                 c=mi.color             # <<<<<<<<<<<<<<
 *                 xpos=mi.pos[0]
 *                 ypos=mi.pos[1]
 */
      __pyx_t_12 = __pyx_v_mi->color;
      __pyx_v_c = __pyx_t_12;

      /* "world_cy.pyx":1353
 *                 mi=node.mi
 *                 c=mi.color
 *                 xpos=mi.pos[0]             # <<<<<<<<<<<<<<
 *                 ypos=mi.pos[1]
 *                 for i in range(1+2*<size_t>mi.alen):
 */
      __pyx_v_xpos = __pyx_v_mi->pos.f0;

      /* "world_cy.pyx":1354
 *                 c=mi.color
 *                 xpos=mi.pos[0]
 *                 ypos=mi.pos[1]             # <<<<<<<<<<<<<<
 *                 for i in range(1+2*<size_t>mi.alen):
 *                     x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 */
      __pyx_v_ypos = __pyx_v_mi->pos.f1;

      /* "world_cy.pyx":1355
 *                 xpos=mi.pos[0]
 *                 ypos=mi.pos[1]
 *                 for i in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *                     x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                     for j in range(1+2*<size_t>mi.alen):
 */
      __pyx_t_1 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
      __pyx_t_2 = __pyx_t_1;
      for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_i = __pyx_t_3;

        /* "world_cy.pyx":1356
 *                 ypos=mi.pos[1]
 *                 for i in range(1+2*<size_t>mi.alen):
 *                     x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)             # <<<<<<<<<<<<<<
 *                     for j in range(1+2*<size_t>mi.alen):
 *                         y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 */
        __pyx_t_9 = ((__pyx_v_xpos - __pyx_v_mi->alen) + ((int)__pyx_v_i));
        if (unlikely(__pyx_v_self->xsize == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(1, 1356, __pyx_L1_error)
        }
        __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_9, __pyx_v_self->xsize));

        /* "world_cy.pyx":1357
 *                 for i in range(1+2*<size_t>mi.alen):
 *                     x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                     for j in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *                         y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                         self.snapshot[x,y]=256**2*c[0]+256*c[1]+c[2]
 */
        __pyx_t_4 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
        __pyx_t_5 = __pyx_t_4;
        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
          __pyx_v_j = __pyx_t_6;

          /* "world_cy.pyx":1358
 *                     x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                     for j in range(1+2*<size_t>mi.alen):
 *                         y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)             # <<<<<<<<<<<<<<
 *                         self.snapshot[x,y]=256**2*c[0]+256*c[1]+c[2]
 *                 node=self.mis.next(node)
 */
          __pyx_t_9 = ((__pyx_v_ypos - __pyx_v_mi->alen) + ((int)__pyx_v_j));
          if (unlikely(__pyx_v_self->ysize == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
            __PYX_ERR(1, 1358, __pyx_L1_error)
          }
          __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_9, __pyx_v_self->ysize));

          /* "world_cy.pyx":1359
 *                     for j in range(1+2*<size_t>mi.alen):
 *                         y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                         self.snapshot[x,y]=256**2*c[0]+256*c[1]+c[2]             # <<<<<<<<<<<<<<
 *                 node=self.mis.next(node)
 *             mi=node.mi
 */
          if (unlikely(!__pyx_v_self->snapshot.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1359, __pyx_L1_error)}
          __pyx_t_13 = __pyx_v_x;
          __pyx_t_14 = __pyx_v_y;
          __pyx_t_9 = -1;
          if (unlikely(__pyx_t_13 >= (size_t)__pyx_v_self->snapshot.shape[0])) __pyx_t_9 = 0;
          if (unlikely(__pyx_t_14 >= (size_t)__pyx_v_self->snapshot.shape[1])) __pyx_t_9 = 1;
          if (unlikely(__pyx_t_9 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_9);
            __PYX_ERR(1, 1359, __pyx_L1_error)
          }
          *((int *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->snapshot.data + __pyx_t_13 * __pyx_v_self->snapshot.strides[0]) ) + __pyx_t_14 * __pyx_v_self->snapshot.strides[1]) )) = (((0x10000 * __pyx_v_c.f0) + (0x100 * __pyx_v_c.f1)) + __pyx_v_c.f2);
        }
      }

      /* "world_cy.pyx":1360
 *                         y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                         self.snapshot[x,y]=256**2*c[0]+256*c[1]+c[2]
 *                 node=self.mis.next(node)             # <<<<<<<<<<<<<<
 *             mi=node.mi
 *             c=mi.color
 */
      __pyx_t_11 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->mis->__pyx_vtab)->next(__pyx_v_self->mis, __pyx_v_node)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1360, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_11));
      __pyx_t_11 = 0;
    }

    /* "world_cy.pyx":1361
 *                         self.snapshot[x,y]=256**2*c[0]+256*c[1]+c[2]
 *                 node=self.mis.next(node)
 *             mi=node.mi             # <<<<<<<<<<<<<<
 *             c=mi.color
 *             xpos=mi.pos[0]
 */
    __pyx_t_11 = ((PyObject *)__pyx_v_node->mi);
    __Pyx_INCREF(__pyx_t_11);
    __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_11));
    __pyx_t_11 = 0;

    /* "world_cy.pyx":1362
 *                 node=self.mis.next(node)
 *             mi=node.mi
 *             c=mi.color             # <<<<<<<<<<<<<<
 *             xpos=mi.pos[0]
 *             ypos=mi.pos[1]
 */
    __pyx_t_12 = __pyx_v_mi->color;
    __pyx_v_c = __pyx_t_12;

    /* "world_cy.pyx":1363
 *             mi=node.mi
 *             c=mi.color
 *             xpos=mi.pos[0]             # <<<<<<<<<<<<<<
 *             ypos=mi.pos[1]
 *             for i in range(1+2*<size_t>mi.alen):
 */
    __pyx_v_xpos = __pyx_v_mi->pos.f0;

    /* "world_cy.pyx":1364
 *             c=mi.color
 *             xpos=mi.pos[0]
 *             ypos=mi.pos[1]             # <<<<<<<<<<<<<<
 *             for i in range(1+2*<size_t>mi.alen):
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 */
    __pyx_v_ypos = __pyx_v_mi->pos.f1;

    /* "world_cy.pyx":1365
 *             xpos=mi.pos[0]
 *             ypos=mi.pos[1]
 *             for i in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                 for j in range(1+2*<size_t>mi.alen):
 */
    __pyx_t_1 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
    __pyx_t_2 = __pyx_t_1;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "world_cy.pyx":1366
 *             ypos=mi.pos[1]
 *             for i in range(1+2*<size_t>mi.alen):
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)             # <<<<<<<<<<<<<<
 *                 for j in range(1+2*<size_t>mi.alen):
 *                     y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 */
      __pyx_t_9 = ((__pyx_v_xpos - __pyx_v_mi->alen) + ((int)__pyx_v_i));
      if (unlikely(__pyx_v_self->xsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 1366, __pyx_L1_error)
      }
      __pyx_v_x = ((size_t)__Pyx_mod_int(__pyx_t_9, __pyx_v_self->xsize));

      /* "world_cy.pyx":1367
 *             for i in range(1+2*<size_t>mi.alen):
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                 for j in range(1+2*<size_t>mi.alen):             # <<<<<<<<<<<<<<
 *                     y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                     self.snapshot[x,y]=256**2*c[0]+256*c[1]+c[2]
 */
      __pyx_t_4 = (1 + (2 * ((size_t)__pyx_v_mi->alen)));
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_j = __pyx_t_6;

        /* "world_cy.pyx":1368
 *                 x=<size_t>((xpos-mi.alen+<int>i)%self.xsize)
 *                 for j in range(1+2*<size_t>mi.alen):
 *                     y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)             # <<<<<<<<<<<<<<
 *                     self.snapshot[x,y]=256**2*c[0]+256*c[1]+c[2]
 *         for x in range(xsize):
 */
        __pyx_t_9 = ((__pyx_v_ypos - __pyx_v_mi->alen) + ((int)__pyx_v_j));
        if (unlikely(__pyx_v_self->ysize == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(1, 1368, __pyx_L1_error)
        }
        __pyx_v_y = ((size_t)__Pyx_mod_int(__pyx_t_9, __pyx_v_self->ysize));

        /* "world_cy.pyx":1369
 *                 for j in range(1+2*<size_t>mi.alen):
 *                     y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                     self.snapshot[x,y]=256**2*c[0]+256*c[1]+c[2]             # <<<<<<<<<<<<<<
 *         for x in range(xsize):
 *             for y in range(ysize):
 */
        if (unlikely(!__pyx_v_self->snapshot.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1369, __pyx_L1_error)}
        __pyx_t_15 = __pyx_v_x;
        __pyx_t_16 = __pyx_v_y;
        __pyx_t_9 = -1;
        if (unlikely(__pyx_t_15 >= (size_t)__pyx_v_self->snapshot.shape[0])) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_16 >= (size_t)__pyx_v_self->snapshot.shape[1])) __pyx_t_9 = 1;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          __PYX_ERR(1, 1369, __pyx_L1_error)
        }
        *((int *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->snapshot.data + __pyx_t_15 * __pyx_v_self->snapshot.strides[0]) ) + __pyx_t_16 * __pyx_v_self->snapshot.strides[1]) )) = (((0x10000 * __pyx_v_c.f0) + (0x100 * __pyx_v_c.f1)) + __pyx_v_c.f2);
      }
    }
  }
  __pyx_L7:;

  /* "world_cy.pyx":1370
 *                     y=<size_t>((ypos-mi.alen+<int>j)%self.ysize)
 *                     self.snapshot[x,y]=256**2*c[0]+256*c[1]+c[2]
 *         for x in range(xsize):             # <<<<<<<<<<<<<<
 *             for y in range(ysize):
 *                 if self.mins[x,y]>0:
 */
  __pyx_t_1 = __pyx_v_xsize;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_x = __pyx_t_3;

    /* "world_cy.pyx":1371
 *                     self.snapshot[x,y]=256**2*c[0]+256*c[1]+c[2]
 *         for x in range(xsize):
 *             for y in range(ysize):             # <<<<<<<<<<<<<<
 *                 if self.mins[x,y]>0:
 *                     self.snapshot[x,y]=256**3-1
 */
    __pyx_t_4 = __pyx_v_ysize;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_y = __pyx_t_6;

      /* "world_cy.pyx":1372
 *         for x in range(xsize):
 *             for y in range(ysize):
 *                 if self.mins[x,y]>0:             # <<<<<<<<<<<<<<
 *                     self.snapshot[x,y]=256**3-1
 * 
 */
      if (unlikely(!__pyx_v_self->mins.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1372, __pyx_L1_error)}
      __pyx_t_17 = __pyx_v_x;
      __pyx_t_18 = __pyx_v_y;
      __pyx_t_9 = -1;
      if (unlikely(__pyx_t_17 >= (size_t)__pyx_v_self->mins.shape[0])) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_18 >= (size_t)__pyx_v_self->mins.shape[1])) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        __PYX_ERR(1, 1372, __pyx_L1_error)
      }
      __pyx_t_10 = (((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->mins.data + __pyx_t_17 * __pyx_v_self->mins.strides[0]) ) + __pyx_t_18 * __pyx_v_self->mins.strides[1]) ))) > 0.0) != 0);
      if (__pyx_t_10) {

        /* "world_cy.pyx":1373
 *             for y in range(ysize):
 *                 if self.mins[x,y]>0:
 *                     self.snapshot[x,y]=256**3-1             # <<<<<<<<<<<<<<
 * 
 *         #for i in range(self.xsize):
 */
        if (unlikely(!__pyx_v_self->snapshot.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1373, __pyx_L1_error)}
        __pyx_t_19 = __pyx_v_x;
        __pyx_t_20 = __pyx_v_y;
        __pyx_t_9 = -1;
        if (unlikely(__pyx_t_19 >= (size_t)__pyx_v_self->snapshot.shape[0])) __pyx_t_9 = 0;
        if (unlikely(__pyx_t_20 >= (size_t)__pyx_v_self->snapshot.shape[1])) __pyx_t_9 = 1;
        if (unlikely(__pyx_t_9 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_9);
          __PYX_ERR(1, 1373, __pyx_L1_error)
        }
        *((int *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->snapshot.data + __pyx_t_19 * __pyx_v_self->snapshot.strides[0]) ) + __pyx_t_20 * __pyx_v_self->snapshot.strides[1]) )) = 0xFFFFFF;

        /* "world_cy.pyx":1372
 *         for x in range(xsize):
 *             for y in range(ysize):
 *                 if self.mins[x,y]>0:             # <<<<<<<<<<<<<<
 *                     self.snapshot[x,y]=256**3-1
 * 
 */
      }
    }
  }

  /* "world_cy.pyx":1335
 *         if not mi.dead:
 *             self.basal_metabolism(mi)
 *     cdef void render(self):             # <<<<<<<<<<<<<<
 *         cdef size_t xsize,ysize,x,y,i,j
 *         cdef int xpos,ypos
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("world_cy.World.render", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_mi);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "world_cy.pyx":1378
 *          #   print(list(self.snapshot[i,:]))
 *     #public API helpers
 *     cdef double _total_minion_mass(self):             # <<<<<<<<<<<<<<
 *         cdef double total
 *         cdef MinionDLLNode node
 */

static double __pyx_f_8world_cy_5World__total_minion_mass(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  double __pyx_v_total;
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  struct __pyx_obj_8world_cy_Minion *__pyx_v_mi = 0;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_total_minion_mass", 0);
  __Pyx_TraceCall("_total_minion_mass", __pyx_f[1], 1378, 0, __PYX_ERR(1, 1378, __pyx_L1_error));

  /* "world_cy.pyx":1382
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 *         total=0             # <<<<<<<<<<<<<<
 *         node=self.mis.head
 *         while not node.is_tail:
 */
  __pyx_v_total = 0.0;

  /* "world_cy.pyx":1383
 *         cdef Minion mi
 *         total=0
 *         node=self.mis.head             # <<<<<<<<<<<<<<
 *         while not node.is_tail:
 *             mi=node.mi
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->mis->head);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "world_cy.pyx":1384
 *         total=0
 *         node=self.mis.head
 *         while not node.is_tail:             # <<<<<<<<<<<<<<
 *             mi=node.mi
 *             if not mi.dead:
 */
  while (1) {
    __pyx_t_2 = ((!(__pyx_v_node->is_tail != 0)) != 0);
    if (!__pyx_t_2) break;

    /* "world_cy.pyx":1385
 *         node=self.mis.head
 *         while not node.is_tail:
 *             mi=node.mi             # <<<<<<<<<<<<<<
 *             if not mi.dead:
 *                 total+=mi.mass
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_node->mi);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "world_cy.pyx":1386
 *         while not node.is_tail:
 *             mi=node.mi
 *             if not mi.dead:             # <<<<<<<<<<<<<<
 *                 total+=mi.mass
 *             node=self.mis.next(node)
 */
    __pyx_t_2 = ((!(__pyx_v_mi->dead != 0)) != 0);
    if (__pyx_t_2) {

      /* "world_cy.pyx":1387
 *             mi=node.mi
 *             if not mi.dead:
 *                 total+=mi.mass             # <<<<<<<<<<<<<<
 *             node=self.mis.next(node)
 *         mi=node.mi
 */
      __pyx_v_total = (__pyx_v_total + __pyx_v_mi->mass);

      /* "world_cy.pyx":1386
 *         while not node.is_tail:
 *             mi=node.mi
 *             if not mi.dead:             # <<<<<<<<<<<<<<
 *                 total+=mi.mass
 *             node=self.mis.next(node)
 */
    }

    /* "world_cy.pyx":1388
 *             if not mi.dead:
 *                 total+=mi.mass
 *             node=self.mis.next(node)             # <<<<<<<<<<<<<<
 *         mi=node.mi
 *         if not mi.dead:
 */
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->mis->__pyx_vtab)->next(__pyx_v_self->mis, __pyx_v_node)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1388, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_1));
    __pyx_t_1 = 0;
  }

  /* "world_cy.pyx":1389
 *                 total+=mi.mass
 *             node=self.mis.next(node)
 *         mi=node.mi             # <<<<<<<<<<<<<<
 *         if not mi.dead:
 *             total+=mi.mass
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_node->mi);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "world_cy.pyx":1390
 *             node=self.mis.next(node)
 *         mi=node.mi
 *         if not mi.dead:             # <<<<<<<<<<<<<<
 *             total+=mi.mass
 *         return total
 */
  __pyx_t_2 = ((!(__pyx_v_mi->dead != 0)) != 0);
  if (__pyx_t_2) {

    /* "world_cy.pyx":1391
 *         mi=node.mi
 *         if not mi.dead:
 *             total+=mi.mass             # <<<<<<<<<<<<<<
 *         return total
 *     cdef double _total_mass(self):
 */
    __pyx_v_total = (__pyx_v_total + __pyx_v_mi->mass);

    /* "world_cy.pyx":1390
 *             node=self.mis.next(node)
 *         mi=node.mi
 *         if not mi.dead:             # <<<<<<<<<<<<<<
 *             total+=mi.mass
 *         return total
 */
  }

  /* "world_cy.pyx":1392
 *         if not mi.dead:
 *             total+=mi.mass
 *         return total             # <<<<<<<<<<<<<<
 *     cdef double _total_mass(self):
 *         cdef double total
 */
  __pyx_r = __pyx_v_total;
  goto __pyx_L0;

  /* "world_cy.pyx":1378
 *          #   print(list(self.snapshot[i,:]))
 *     #public API helpers
 *     cdef double _total_minion_mass(self):             # <<<<<<<<<<<<<<
 *         cdef double total
 *         cdef MinionDLLNode node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("world_cy.World._total_minion_mass", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_mi);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1393
 *             total+=mi.mass
 *         return total
 *     cdef double _total_mass(self):             # <<<<<<<<<<<<<<
 *         cdef double total
 *         cdef size_t xsize,ysize,x,y
 */

static double __pyx_f_8world_cy_5World__total_mass(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  double __pyx_v_total;
  size_t __pyx_v_xsize;
  size_t __pyx_v_ysize;
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  struct __pyx_obj_8world_cy_Minion *__pyx_v_mi = 0;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("_total_mass", 0);
  __Pyx_TraceCall("_total_mass", __pyx_f[1], 1393, 0, __PYX_ERR(1, 1393, __pyx_L1_error));

  /* "world_cy.pyx":1398
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 *         total=self.hidden_mass             # <<<<<<<<<<<<<<
 * 
 *         xsize=<size_t>self.xsize
 */
  __pyx_t_1 = __pyx_v_self->hidden_mass;
  __pyx_v_total = __pyx_t_1;

  /* "world_cy.pyx":1400
 *         total=self.hidden_mass
 * 
 *         xsize=<size_t>self.xsize             # <<<<<<<<<<<<<<
 *         ysize=<size_t>self.ysize
 *         for x in range(xsize):
 */
  __pyx_v_xsize = ((size_t)__pyx_v_self->xsize);

  /* "world_cy.pyx":1401
 * 
 *         xsize=<size_t>self.xsize
 *         ysize=<size_t>self.ysize             # <<<<<<<<<<<<<<
 *         for x in range(xsize):
 *             for y in range(ysize):
 */
  __pyx_v_ysize = ((size_t)__pyx_v_self->ysize);

  /* "world_cy.pyx":1402
 *         xsize=<size_t>self.xsize
 *         ysize=<size_t>self.ysize
 *         for x in range(xsize):             # <<<<<<<<<<<<<<
 *             for y in range(ysize):
 *                 total+=self.mins[x,y]
 */
  __pyx_t_2 = __pyx_v_xsize;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_x = __pyx_t_4;

    /* "world_cy.pyx":1403
 *         ysize=<size_t>self.ysize
 *         for x in range(xsize):
 *             for y in range(ysize):             # <<<<<<<<<<<<<<
 *                 total+=self.mins[x,y]
 *         if self.mis.len==0:
 */
    __pyx_t_5 = __pyx_v_ysize;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_y = __pyx_t_7;

      /* "world_cy.pyx":1404
 *         for x in range(xsize):
 *             for y in range(ysize):
 *                 total+=self.mins[x,y]             # <<<<<<<<<<<<<<
 *         if self.mis.len==0:
 *             return total
 */
      if (unlikely(!__pyx_v_self->mins.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1404, __pyx_L1_error)}
      __pyx_t_8 = __pyx_v_x;
      __pyx_t_9 = __pyx_v_y;
      __pyx_t_10 = -1;
      if (unlikely(__pyx_t_8 >= (size_t)__pyx_v_self->mins.shape[0])) __pyx_t_10 = 0;
      if (unlikely(__pyx_t_9 >= (size_t)__pyx_v_self->mins.shape[1])) __pyx_t_10 = 1;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(1, 1404, __pyx_L1_error)
      }
      __pyx_v_total = (__pyx_v_total + (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->mins.data + __pyx_t_8 * __pyx_v_self->mins.strides[0]) ) + __pyx_t_9 * __pyx_v_self->mins.strides[1]) ))));
    }
  }

  /* "world_cy.pyx":1405
 *             for y in range(ysize):
 *                 total+=self.mins[x,y]
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return total
 * 
 */
  __pyx_t_11 = ((__pyx_v_self->mis->len == 0) != 0);
  if (__pyx_t_11) {

    /* "world_cy.pyx":1406
 *                 total+=self.mins[x,y]
 *         if self.mis.len==0:
 *             return total             # <<<<<<<<<<<<<<
 * 
 *         node=self.mis.head
 */
    __pyx_r = __pyx_v_total;
    goto __pyx_L0;

    /* "world_cy.pyx":1405
 *             for y in range(ysize):
 *                 total+=self.mins[x,y]
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return total
 * 
 */
  }

  /* "world_cy.pyx":1408
 *             return total
 * 
 *         node=self.mis.head             # <<<<<<<<<<<<<<
 *         while not node.is_tail:
 *             mi=node.mi
 */
  __pyx_t_12 = ((PyObject *)__pyx_v_self->mis->head);
  __Pyx_INCREF(__pyx_t_12);
  __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_12);
  __pyx_t_12 = 0;

  /* "world_cy.pyx":1409
 * 
 *         node=self.mis.head
 *         while not node.is_tail:             # <<<<<<<<<<<<<<
 *             mi=node.mi
 *             if not mi.dead:
 */
  while (1) {
    __pyx_t_11 = ((!(__pyx_v_node->is_tail != 0)) != 0);
    if (!__pyx_t_11) break;

    /* "world_cy.pyx":1410
 *         node=self.mis.head
 *         while not node.is_tail:
 *             mi=node.mi             # <<<<<<<<<<<<<<
 *             if not mi.dead:
 *                 total+=mi.mass
 */
    __pyx_t_12 = ((PyObject *)__pyx_v_node->mi);
    __Pyx_INCREF(__pyx_t_12);
    __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_12));
    __pyx_t_12 = 0;

    /* "world_cy.pyx":1411
 *         while not node.is_tail:
 *             mi=node.mi
 *             if not mi.dead:             # <<<<<<<<<<<<<<
 *                 total+=mi.mass
 *             node=self.mis.next(node)
 */
    __pyx_t_11 = ((!(__pyx_v_mi->dead != 0)) != 0);
    if (__pyx_t_11) {

      /* "world_cy.pyx":1412
 *             mi=node.mi
 *             if not mi.dead:
 *                 total+=mi.mass             # <<<<<<<<<<<<<<
 *             node=self.mis.next(node)
 *         mi=node.mi
 */
      __pyx_v_total = (__pyx_v_total + __pyx_v_mi->mass);

      /* "world_cy.pyx":1411
 *         while not node.is_tail:
 *             mi=node.mi
 *             if not mi.dead:             # <<<<<<<<<<<<<<
 *                 total+=mi.mass
 *             node=self.mis.next(node)
 */
    }

    /* "world_cy.pyx":1413
 *             if not mi.dead:
 *                 total+=mi.mass
 *             node=self.mis.next(node)             # <<<<<<<<<<<<<<
 *         mi=node.mi
 *         if not mi.dead:
 */
    __pyx_t_12 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->mis->__pyx_vtab)->next(__pyx_v_self->mis, __pyx_v_node)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 1413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_12));
    __pyx_t_12 = 0;
  }

  /* "world_cy.pyx":1414
 *                 total+=mi.mass
 *             node=self.mis.next(node)
 *         mi=node.mi             # <<<<<<<<<<<<<<
 *         if not mi.dead:
 *             total+=mi.mass
 */
  __pyx_t_12 = ((PyObject *)__pyx_v_node->mi);
  __Pyx_INCREF(__pyx_t_12);
  __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_12));
  __pyx_t_12 = 0;

  /* "world_cy.pyx":1415
 *             node=self.mis.next(node)
 *         mi=node.mi
 *         if not mi.dead:             # <<<<<<<<<<<<<<
 *             total+=mi.mass
 *         return total
 */
  __pyx_t_11 = ((!(__pyx_v_mi->dead != 0)) != 0);
  if (__pyx_t_11) {

    /* "world_cy.pyx":1416
 *         mi=node.mi
 *         if not mi.dead:
 *             total+=mi.mass             # <<<<<<<<<<<<<<
 *         return total
 *     cdef double _total_min(self):
 */
    __pyx_v_total = (__pyx_v_total + __pyx_v_mi->mass);

    /* "world_cy.pyx":1415
 *             node=self.mis.next(node)
 *         mi=node.mi
 *         if not mi.dead:             # <<<<<<<<<<<<<<
 *             total+=mi.mass
 *         return total
 */
  }

  /* "world_cy.pyx":1417
 *         if not mi.dead:
 *             total+=mi.mass
 *         return total             # <<<<<<<<<<<<<<
 *     cdef double _total_min(self):
 *         cdef double total
 */
  __pyx_r = __pyx_v_total;
  goto __pyx_L0;

  /* "world_cy.pyx":1393
 *             total+=mi.mass
 *         return total
 *     cdef double _total_mass(self):             # <<<<<<<<<<<<<<
 *         cdef double total
 *         cdef size_t xsize,ysize,x,y
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("world_cy.World._total_mass", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_mi);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1418
 *             total+=mi.mass
 *         return total
 *     cdef double _total_min(self):             # <<<<<<<<<<<<<<
 *         cdef double total
 *         cdef size_t x,y
 */

static double __pyx_f_8world_cy_5World__total_min(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  double __pyx_v_total;
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("_total_min", 0);
  __Pyx_TraceCall("_total_min", __pyx_f[1], 1418, 0, __PYX_ERR(1, 1418, __pyx_L1_error));

  /* "world_cy.pyx":1421
 *         cdef double total
 *         cdef size_t x,y
 *         total=0             # <<<<<<<<<<<<<<
 *         for x in range(<size_t>self.xsize):
 *             for y in range(<size_t>self.ysize):
 */
  __pyx_v_total = 0.0;

  /* "world_cy.pyx":1422
 *         cdef size_t x,y
 *         total=0
 *         for x in range(<size_t>self.xsize):             # <<<<<<<<<<<<<<
 *             for y in range(<size_t>self.ysize):
 *                 total+=self.mins[x,y]
 */
  __pyx_t_1 = ((size_t)__pyx_v_self->xsize);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_x = __pyx_t_3;

    /* "world_cy.pyx":1423
 *         total=0
 *         for x in range(<size_t>self.xsize):
 *             for y in range(<size_t>self.ysize):             # <<<<<<<<<<<<<<
 *                 total+=self.mins[x,y]
 *         return total
 */
    __pyx_t_4 = ((size_t)__pyx_v_self->ysize);
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_y = __pyx_t_6;

      /* "world_cy.pyx":1424
 *         for x in range(<size_t>self.xsize):
 *             for y in range(<size_t>self.ysize):
 *                 total+=self.mins[x,y]             # <<<<<<<<<<<<<<
 *         return total
 *     cdef bint _exhausted(self):
 */
      if (unlikely(!__pyx_v_self->mins.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1424, __pyx_L1_error)}
      __pyx_t_7 = __pyx_v_x;
      __pyx_t_8 = __pyx_v_y;
      __pyx_t_9 = -1;
      if (unlikely(__pyx_t_7 >= (size_t)__pyx_v_self->mins.shape[0])) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_8 >= (size_t)__pyx_v_self->mins.shape[1])) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        __PYX_ERR(1, 1424, __pyx_L1_error)
      }
      __pyx_v_total = (__pyx_v_total + (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->mins.data + __pyx_t_7 * __pyx_v_self->mins.strides[0]) ) + __pyx_t_8 * __pyx_v_self->mins.strides[1]) ))));
    }
  }

  /* "world_cy.pyx":1425
 *             for y in range(<size_t>self.ysize):
 *                 total+=self.mins[x,y]
 *         return total             # <<<<<<<<<<<<<<
 *     cdef bint _exhausted(self):
 *         cdef size_t x,y
 */
  __pyx_r = __pyx_v_total;
  goto __pyx_L0;

  /* "world_cy.pyx":1418
 *             total+=mi.mass
 *         return total
 *     cdef double _total_min(self):             # <<<<<<<<<<<<<<
 *         cdef double total
 *         cdef size_t x,y
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.World._total_min", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1426
 *                 total+=self.mins[x,y]
 *         return total
 *     cdef bint _exhausted(self):             # <<<<<<<<<<<<<<
 *         cdef size_t x,y
 *         for x in range(<size_t>self.xsize):
 */

static int __pyx_f_8world_cy_5World__exhausted(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  size_t __pyx_v_x;
  size_t __pyx_v_y;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("_exhausted", 0);
  __Pyx_TraceCall("_exhausted", __pyx_f[1], 1426, 0, __PYX_ERR(1, 1426, __pyx_L1_error));

  /* "world_cy.pyx":1428
 *     cdef bint _exhausted(self):
 *         cdef size_t x,y
 *         for x in range(<size_t>self.xsize):             # <<<<<<<<<<<<<<
 *             for y in range(<size_t>self.ysize):
 *                 if self.mins[x,y]>0:
 */
  __pyx_t_1 = ((size_t)__pyx_v_self->xsize);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_x = __pyx_t_3;

    /* "world_cy.pyx":1429
 *         cdef size_t x,y
 *         for x in range(<size_t>self.xsize):
 *             for y in range(<size_t>self.ysize):             # <<<<<<<<<<<<<<
 *                 if self.mins[x,y]>0:
 *                     return False
 */
    __pyx_t_4 = ((size_t)__pyx_v_self->ysize);
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_y = __pyx_t_6;

      /* "world_cy.pyx":1430
 *         for x in range(<size_t>self.xsize):
 *             for y in range(<size_t>self.ysize):
 *                 if self.mins[x,y]>0:             # <<<<<<<<<<<<<<
 *                     return False
 *         return True
 */
      if (unlikely(!__pyx_v_self->mins.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1430, __pyx_L1_error)}
      __pyx_t_7 = __pyx_v_x;
      __pyx_t_8 = __pyx_v_y;
      __pyx_t_9 = -1;
      if (unlikely(__pyx_t_7 >= (size_t)__pyx_v_self->mins.shape[0])) __pyx_t_9 = 0;
      if (unlikely(__pyx_t_8 >= (size_t)__pyx_v_self->mins.shape[1])) __pyx_t_9 = 1;
      if (unlikely(__pyx_t_9 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_9);
        __PYX_ERR(1, 1430, __pyx_L1_error)
      }
      __pyx_t_10 = (((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->mins.data + __pyx_t_7 * __pyx_v_self->mins.strides[0]) ) + __pyx_t_8 * __pyx_v_self->mins.strides[1]) ))) > 0.0) != 0);
      if (__pyx_t_10) {

        /* "world_cy.pyx":1431
 *             for y in range(<size_t>self.ysize):
 *                 if self.mins[x,y]>0:
 *                     return False             # <<<<<<<<<<<<<<
 *         return True
 *     cdef double _get_avg_r(self):
 */
        __pyx_r = 0;
        goto __pyx_L0;

        /* "world_cy.pyx":1430
 *         for x in range(<size_t>self.xsize):
 *             for y in range(<size_t>self.ysize):
 *                 if self.mins[x,y]>0:             # <<<<<<<<<<<<<<
 *                     return False
 *         return True
 */
      }
    }
  }

  /* "world_cy.pyx":1432
 *                 if self.mins[x,y]>0:
 *                     return False
 *         return True             # <<<<<<<<<<<<<<
 *     cdef double _get_avg_r(self):
 *         if self.mis.len==0:
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "world_cy.pyx":1426
 *                 total+=self.mins[x,y]
 *         return total
 *     cdef bint _exhausted(self):             # <<<<<<<<<<<<<<
 *         cdef size_t x,y
 *         for x in range(<size_t>self.xsize):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("world_cy.World._exhausted", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1433
 *                     return False
 *         return True
 *     cdef double _get_avg_r(self):             # <<<<<<<<<<<<<<
 *         if self.mis.len==0:
 *             return 0
 */

static double __pyx_f_8world_cy_5World__get_avg_r(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  double __pyx_v_sum;
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  struct __pyx_obj_8world_cy_Minion *__pyx_v_mi = 0;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_get_avg_r", 0);
  __Pyx_TraceCall("_get_avg_r", __pyx_f[1], 1433, 0, __PYX_ERR(1, 1433, __pyx_L1_error));

  /* "world_cy.pyx":1434
 *         return True
 *     cdef double _get_avg_r(self):
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return 0
 *         cdef double sum
 */
  __pyx_t_1 = ((__pyx_v_self->mis->len == 0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1435
 *     cdef double _get_avg_r(self):
 *         if self.mis.len==0:
 *             return 0             # <<<<<<<<<<<<<<
 *         cdef double sum
 *         cdef MinionDLLNode node
 */
    __pyx_r = 0.0;
    goto __pyx_L0;

    /* "world_cy.pyx":1434
 *         return True
 *     cdef double _get_avg_r(self):
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return 0
 *         cdef double sum
 */
  }

  /* "world_cy.pyx":1439
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 *         node=self.mis.head             # <<<<<<<<<<<<<<
 *         while not node.is_tail:
 *             mi=node.mi
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->mis->head);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "world_cy.pyx":1440
 *         cdef Minion mi
 *         node=self.mis.head
 *         while not node.is_tail:             # <<<<<<<<<<<<<<
 *             mi=node.mi
 *             sum+=<double>mi.color[0]
 */
  while (1) {
    __pyx_t_1 = ((!(__pyx_v_node->is_tail != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "world_cy.pyx":1441
 *         node=self.mis.head
 *         while not node.is_tail:
 *             mi=node.mi             # <<<<<<<<<<<<<<
 *             sum+=<double>mi.color[0]
 *             node=self.mis.next(node)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_node->mi);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "world_cy.pyx":1442
 *         while not node.is_tail:
 *             mi=node.mi
 *             sum+=<double>mi.color[0]             # <<<<<<<<<<<<<<
 *             node=self.mis.next(node)
 *         mi=node.mi
 */
    __pyx_v_sum = (__pyx_v_sum + ((double)__pyx_v_mi->color.f0));

    /* "world_cy.pyx":1443
 *             mi=node.mi
 *             sum+=<double>mi.color[0]
 *             node=self.mis.next(node)             # <<<<<<<<<<<<<<
 *         mi=node.mi
 *         sum+=<double>mi.color[0]
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->mis->__pyx_vtab)->next(__pyx_v_self->mis, __pyx_v_node)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2));
    __pyx_t_2 = 0;
  }

  /* "world_cy.pyx":1444
 *             sum+=<double>mi.color[0]
 *             node=self.mis.next(node)
 *         mi=node.mi             # <<<<<<<<<<<<<<
 *         sum+=<double>mi.color[0]
 *         return sum/(<double>self.mis.len)
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_node->mi);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "world_cy.pyx":1445
 *             node=self.mis.next(node)
 *         mi=node.mi
 *         sum+=<double>mi.color[0]             # <<<<<<<<<<<<<<
 *         return sum/(<double>self.mis.len)
 *     cdef double _get_avg_g(self):
 */
  __pyx_v_sum = (__pyx_v_sum + ((double)__pyx_v_mi->color.f0));

  /* "world_cy.pyx":1446
 *         mi=node.mi
 *         sum+=<double>mi.color[0]
 *         return sum/(<double>self.mis.len)             # <<<<<<<<<<<<<<
 *     cdef double _get_avg_g(self):
 *         if self.mis.len==0:
 */
  if (unlikely(((double)__pyx_v_self->mis->len) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 1446, __pyx_L1_error)
  }
  __pyx_r = (__pyx_v_sum / ((double)__pyx_v_self->mis->len));
  goto __pyx_L0;

  /* "world_cy.pyx":1433
 *                     return False
 *         return True
 *     cdef double _get_avg_r(self):             # <<<<<<<<<<<<<<
 *         if self.mis.len==0:
 *             return 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("world_cy.World._get_avg_r", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_mi);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1447
 *         sum+=<double>mi.color[0]
 *         return sum/(<double>self.mis.len)
 *     cdef double _get_avg_g(self):             # <<<<<<<<<<<<<<
 *         if self.mis.len==0:
 *             return 0
 */

static double __pyx_f_8world_cy_5World__get_avg_g(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  double __pyx_v_sum;
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  struct __pyx_obj_8world_cy_Minion *__pyx_v_mi = 0;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_get_avg_g", 0);
  __Pyx_TraceCall("_get_avg_g", __pyx_f[1], 1447, 0, __PYX_ERR(1, 1447, __pyx_L1_error));

  /* "world_cy.pyx":1448
 *         return sum/(<double>self.mis.len)
 *     cdef double _get_avg_g(self):
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return 0
 *         cdef double sum
 */
  __pyx_t_1 = ((__pyx_v_self->mis->len == 0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1449
 *     cdef double _get_avg_g(self):
 *         if self.mis.len==0:
 *             return 0             # <<<<<<<<<<<<<<
 *         cdef double sum
 *         cdef MinionDLLNode node
 */
    __pyx_r = 0.0;
    goto __pyx_L0;

    /* "world_cy.pyx":1448
 *         return sum/(<double>self.mis.len)
 *     cdef double _get_avg_g(self):
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return 0
 *         cdef double sum
 */
  }

  /* "world_cy.pyx":1453
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 *         node=self.mis.head             # <<<<<<<<<<<<<<
 *         while not node.is_tail:
 *             mi=node.mi
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->mis->head);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "world_cy.pyx":1454
 *         cdef Minion mi
 *         node=self.mis.head
 *         while not node.is_tail:             # <<<<<<<<<<<<<<
 *             mi=node.mi
 *             sum+=<double>mi.color[1]
 */
  while (1) {
    __pyx_t_1 = ((!(__pyx_v_node->is_tail != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "world_cy.pyx":1455
 *         node=self.mis.head
 *         while not node.is_tail:
 *             mi=node.mi             # <<<<<<<<<<<<<<
 *             sum+=<double>mi.color[1]
 *             node=self.mis.next(node)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_node->mi);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "world_cy.pyx":1456
 *         while not node.is_tail:
 *             mi=node.mi
 *             sum+=<double>mi.color[1]             # <<<<<<<<<<<<<<
 *             node=self.mis.next(node)
 *         mi=node.mi
 */
    __pyx_v_sum = (__pyx_v_sum + ((double)__pyx_v_mi->color.f1));

    /* "world_cy.pyx":1457
 *             mi=node.mi
 *             sum+=<double>mi.color[1]
 *             node=self.mis.next(node)             # <<<<<<<<<<<<<<
 *         mi=node.mi
 *         sum+=<double>mi.color[1]
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->mis->__pyx_vtab)->next(__pyx_v_self->mis, __pyx_v_node)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2));
    __pyx_t_2 = 0;
  }

  /* "world_cy.pyx":1458
 *             sum+=<double>mi.color[1]
 *             node=self.mis.next(node)
 *         mi=node.mi             # <<<<<<<<<<<<<<
 *         sum+=<double>mi.color[1]
 *         return sum/(<double>self.mis.len)
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_node->mi);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "world_cy.pyx":1459
 *             node=self.mis.next(node)
 *         mi=node.mi
 *         sum+=<double>mi.color[1]             # <<<<<<<<<<<<<<
 *         return sum/(<double>self.mis.len)
 *     cdef double _get_avg_b(self):
 */
  __pyx_v_sum = (__pyx_v_sum + ((double)__pyx_v_mi->color.f1));

  /* "world_cy.pyx":1460
 *         mi=node.mi
 *         sum+=<double>mi.color[1]
 *         return sum/(<double>self.mis.len)             # <<<<<<<<<<<<<<
 *     cdef double _get_avg_b(self):
 *         if self.mis.len==0:
 */
  if (unlikely(((double)__pyx_v_self->mis->len) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 1460, __pyx_L1_error)
  }
  __pyx_r = (__pyx_v_sum / ((double)__pyx_v_self->mis->len));
  goto __pyx_L0;

  /* "world_cy.pyx":1447
 *         sum+=<double>mi.color[0]
 *         return sum/(<double>self.mis.len)
 *     cdef double _get_avg_g(self):             # <<<<<<<<<<<<<<
 *         if self.mis.len==0:
 *             return 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("world_cy.World._get_avg_g", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_mi);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1461
 *         sum+=<double>mi.color[1]
 *         return sum/(<double>self.mis.len)
 *     cdef double _get_avg_b(self):             # <<<<<<<<<<<<<<
 *         if self.mis.len==0:
 *             return 0
 */

static double __pyx_f_8world_cy_5World__get_avg_b(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  double __pyx_v_sum;
  struct __pyx_obj_8world_cy_MinionDLLNode *__pyx_v_node = 0;
  struct __pyx_obj_8world_cy_Minion *__pyx_v_mi = 0;
  double __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_get_avg_b", 0);
  __Pyx_TraceCall("_get_avg_b", __pyx_f[1], 1461, 0, __PYX_ERR(1, 1461, __pyx_L1_error));

  /* "world_cy.pyx":1462
 *         return sum/(<double>self.mis.len)
 *     cdef double _get_avg_b(self):
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return 0
 *         cdef double sum
 */
  __pyx_t_1 = ((__pyx_v_self->mis->len == 0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1463
 *     cdef double _get_avg_b(self):
 *         if self.mis.len==0:
 *             return 0             # <<<<<<<<<<<<<<
 *         cdef double sum
 *         cdef MinionDLLNode node
 */
    __pyx_r = 0.0;
    goto __pyx_L0;

    /* "world_cy.pyx":1462
 *         return sum/(<double>self.mis.len)
 *     cdef double _get_avg_b(self):
 *         if self.mis.len==0:             # <<<<<<<<<<<<<<
 *             return 0
 *         cdef double sum
 */
  }

  /* "world_cy.pyx":1467
 *         cdef MinionDLLNode node
 *         cdef Minion mi
 *         node=self.mis.head             # <<<<<<<<<<<<<<
 *         while not node.is_tail:
 *             mi=node.mi
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->mis->head);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "world_cy.pyx":1468
 *         cdef Minion mi
 *         node=self.mis.head
 *         while not node.is_tail:             # <<<<<<<<<<<<<<
 *             mi=node.mi
 *             sum+=<double>mi.color[2]
 */
  while (1) {
    __pyx_t_1 = ((!(__pyx_v_node->is_tail != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "world_cy.pyx":1469
 *         node=self.mis.head
 *         while not node.is_tail:
 *             mi=node.mi             # <<<<<<<<<<<<<<
 *             sum+=<double>mi.color[2]
 *             node=self.mis.next(node)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_node->mi);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "world_cy.pyx":1470
 *         while not node.is_tail:
 *             mi=node.mi
 *             sum+=<double>mi.color[2]             # <<<<<<<<<<<<<<
 *             node=self.mis.next(node)
 *         mi=node.mi
 */
    __pyx_v_sum = (__pyx_v_sum + ((double)__pyx_v_mi->color.f2));

    /* "world_cy.pyx":1471
 *             mi=node.mi
 *             sum+=<double>mi.color[2]
 *             node=self.mis.next(node)             # <<<<<<<<<<<<<<
 *         mi=node.mi
 *         sum+=<double>mi.color[2]
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8world_cy_MinionDLL *)__pyx_v_self->mis->__pyx_vtab)->next(__pyx_v_self->mis, __pyx_v_node)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_node, ((struct __pyx_obj_8world_cy_MinionDLLNode *)__pyx_t_2));
    __pyx_t_2 = 0;
  }

  /* "world_cy.pyx":1472
 *             sum+=<double>mi.color[2]
 *             node=self.mis.next(node)
 *         mi=node.mi             # <<<<<<<<<<<<<<
 *         sum+=<double>mi.color[2]
 *         return sum/(<double>self.mis.len)
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_node->mi);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_XDECREF_SET(__pyx_v_mi, ((struct __pyx_obj_8world_cy_Minion *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "world_cy.pyx":1473
 *             node=self.mis.next(node)
 *         mi=node.mi
 *         sum+=<double>mi.color[2]             # <<<<<<<<<<<<<<
 *         return sum/(<double>self.mis.len)
 * 
 */
  __pyx_v_sum = (__pyx_v_sum + ((double)__pyx_v_mi->color.f2));

  /* "world_cy.pyx":1474
 *         mi=node.mi
 *         sum+=<double>mi.color[2]
 *         return sum/(<double>self.mis.len)             # <<<<<<<<<<<<<<
 * 
 *     #public API-------------------------------------------
 */
  if (unlikely(((double)__pyx_v_self->mis->len) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 1474, __pyx_L1_error)
  }
  __pyx_r = (__pyx_v_sum / ((double)__pyx_v_self->mis->len));
  goto __pyx_L0;

  /* "world_cy.pyx":1461
 *         sum+=<double>mi.color[1]
 *         return sum/(<double>self.mis.len)
 *     cdef double _get_avg_b(self):             # <<<<<<<<<<<<<<
 *         if self.mis.len==0:
 *             return 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("world_cy.World._get_avg_b", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_mi);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1478
 *     #public API-------------------------------------------
 *     #main
 *     def occupy_check(self):             # <<<<<<<<<<<<<<
 *         for x in range(self.xsize):
 *             for y in range(self.ysize):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_5occupy_check(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_5occupy_check(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("occupy_check (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_4occupy_check(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_4occupy_check(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_dll = NULL;
  PyObject *__pyx_v_mi = NULL;
  PyObject *__pyx_v_xpos = NULL;
  PyObject *__pyx_v_ypos = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *(*__pyx_t_18)(PyObject *);
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  int __pyx_t_26;
  __Pyx_RefNannySetupContext("occupy_check", 0);
  __Pyx_TraceCall("occupy_check", __pyx_f[1], 1478, 0, __PYX_ERR(1, 1478, __pyx_L1_error));

  /* "world_cy.pyx":1479
 *     #main
 *     def occupy_check(self):
 *         for x in range(self.xsize):             # <<<<<<<<<<<<<<
 *             for y in range(self.ysize):
 *                 dll=self.occupy_map[x,y]
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->xsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1479, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1479, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1479, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1479, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1479, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1479, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "world_cy.pyx":1480
 *     def occupy_check(self):
 *         for x in range(self.xsize):
 *             for y in range(self.ysize):             # <<<<<<<<<<<<<<
 *                 dll=self.occupy_map[x,y]
 *                 for mi in dll:
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->ysize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_2 = __pyx_t_5; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1480, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1480, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 1480, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1480, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 1480, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1480, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1480, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "world_cy.pyx":1481
 *         for x in range(self.xsize):
 *             for y in range(self.ysize):
 *                 dll=self.occupy_map[x,y]             # <<<<<<<<<<<<<<
 *                 for mi in dll:
 *                     xpos,ypos=mi.get_pos()
 */
      if (unlikely(!__pyx_v_self->occupy_map.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1481, __pyx_L1_error)}
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_x); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1481, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_y); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1481, __pyx_L1_error)
      __pyx_t_10 = __pyx_t_8;
      __pyx_t_11 = __pyx_t_9;
      __pyx_t_12 = -1;
      if (__pyx_t_10 < 0) {
        __pyx_t_10 += __pyx_v_self->occupy_map.shape[0];
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_12 = 0;
      } else if (unlikely(__pyx_t_10 >= __pyx_v_self->occupy_map.shape[0])) __pyx_t_12 = 0;
      if (__pyx_t_11 < 0) {
        __pyx_t_11 += __pyx_v_self->occupy_map.shape[1];
        if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 1;
      } else if (unlikely(__pyx_t_11 >= __pyx_v_self->occupy_map.shape[1])) __pyx_t_12 = 1;
      if (unlikely(__pyx_t_12 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_12);
        __PYX_ERR(1, 1481, __pyx_L1_error)
      }
      __pyx_t_5 = (PyObject *) *((struct __pyx_obj_8world_cy_MinionDLL * *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->occupy_map.data + __pyx_t_10 * __pyx_v_self->occupy_map.strides[0]) ) + __pyx_t_11 * __pyx_v_self->occupy_map.strides[1]) ));
      __Pyx_INCREF((PyObject*)__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_dll, ((PyObject *)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "world_cy.pyx":1482
 *             for y in range(self.ysize):
 *                 dll=self.occupy_map[x,y]
 *                 for mi in dll:             # <<<<<<<<<<<<<<
 *                     xpos,ypos=mi.get_pos()
 *                     if max(dist(xpos,x,self.xsize),dist(ypos,y,self.ysize))>mi.get_alen():
 */
      if (likely(PyList_CheckExact(__pyx_v_dll)) || PyTuple_CheckExact(__pyx_v_dll)) {
        __pyx_t_5 = __pyx_v_dll; __Pyx_INCREF(__pyx_t_5); __pyx_t_9 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_dll); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_13 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1482, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_14 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_9); __Pyx_INCREF(__pyx_t_14); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 1482, __pyx_L1_error)
            #else
            __pyx_t_14 = PySequence_ITEM(__pyx_t_5, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1482, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_9); __Pyx_INCREF(__pyx_t_14); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 1482, __pyx_L1_error)
            #else
            __pyx_t_14 = PySequence_ITEM(__pyx_t_5, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1482, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            #endif
          }
        } else {
          __pyx_t_14 = __pyx_t_13(__pyx_t_5);
          if (unlikely(!__pyx_t_14)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 1482, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_14);
        }
        __Pyx_XDECREF_SET(__pyx_v_mi, __pyx_t_14);
        __pyx_t_14 = 0;

        /* "world_cy.pyx":1483
 *                 dll=self.occupy_map[x,y]
 *                 for mi in dll:
 *                     xpos,ypos=mi.get_pos()             # <<<<<<<<<<<<<<
 *                     if max(dist(xpos,x,self.xsize),dist(ypos,y,self.ysize))>mi.get_alen():
 *                         return 1,False,mi.get_pos(),mi.get_alen(),x,y
 */
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_pos); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 1483, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_16 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
          __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_15);
          if (likely(__pyx_t_16)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
            __Pyx_INCREF(__pyx_t_16);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_15, function);
          }
        }
        __pyx_t_14 = (__pyx_t_16) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_16) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1483, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_14))) || (PyList_CheckExact(__pyx_t_14))) {
          PyObject* sequence = __pyx_t_14;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(1, 1483, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_15 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_16 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_15 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_16 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(__pyx_t_16);
          #else
          __pyx_t_15 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 1483, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_16 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1483, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          #endif
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_17 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 1483, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_18 = Py_TYPE(__pyx_t_17)->tp_iternext;
          index = 0; __pyx_t_15 = __pyx_t_18(__pyx_t_17); if (unlikely(!__pyx_t_15)) goto __pyx_L9_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_15);
          index = 1; __pyx_t_16 = __pyx_t_18(__pyx_t_17); if (unlikely(!__pyx_t_16)) goto __pyx_L9_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_16);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_17), 2) < 0) __PYX_ERR(1, 1483, __pyx_L1_error)
          __pyx_t_18 = NULL;
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          goto __pyx_L10_unpacking_done;
          __pyx_L9_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_18 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(1, 1483, __pyx_L1_error)
          __pyx_L10_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_xpos, __pyx_t_15);
        __pyx_t_15 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ypos, __pyx_t_16);
        __pyx_t_16 = 0;

        /* "world_cy.pyx":1484
 *                 for mi in dll:
 *                     xpos,ypos=mi.get_pos()
 *                     if max(dist(xpos,x,self.xsize),dist(ypos,y,self.ysize))>mi.get_alen():             # <<<<<<<<<<<<<<
 *                         return 1,False,mi.get_pos(),mi.get_alen(),x,y
 *         for mi in self.mis:
 */
        __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_ypos); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1484, __pyx_L1_error)
        __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_v_y); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1484, __pyx_L1_error)
        __pyx_t_20 = __pyx_f_8world_cy_dist(__pyx_t_12, __pyx_t_19, __pyx_v_self->ysize);
        __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_v_xpos); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1484, __pyx_L1_error)
        __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_x); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1484, __pyx_L1_error)
        __pyx_t_21 = __pyx_f_8world_cy_dist(__pyx_t_19, __pyx_t_12, __pyx_v_self->xsize);
        if (((__pyx_t_20 > __pyx_t_21) != 0)) {
          __pyx_t_12 = __pyx_t_20;
        } else {
          __pyx_t_12 = __pyx_t_21;
        }
        __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_t_12); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_alen); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 1484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_17 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_15);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_15, function);
          }
        }
        __pyx_t_16 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = PyObject_RichCompare(__pyx_t_14, __pyx_t_16, Py_GT); __Pyx_XGOTREF(__pyx_t_15); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 1484, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_15); if (unlikely(__pyx_t_22 < 0)) __PYX_ERR(1, 1484, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (__pyx_t_22) {

          /* "world_cy.pyx":1485
 *                     xpos,ypos=mi.get_pos()
 *                     if max(dist(xpos,x,self.xsize),dist(ypos,y,self.ysize))>mi.get_alen():
 *                         return 1,False,mi.get_pos(),mi.get_alen(),x,y             # <<<<<<<<<<<<<<
 *         for mi in self.mis:
 *             xpos,ypos=mi.get_pos()
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_pos); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1485, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_14 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
            __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_16);
            if (likely(__pyx_t_14)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
              __Pyx_INCREF(__pyx_t_14);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_16, function);
            }
          }
          __pyx_t_15 = (__pyx_t_14) ? __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_14) : __Pyx_PyObject_CallNoArg(__pyx_t_16);
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 1485, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_alen); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1485, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_17 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_14);
            if (likely(__pyx_t_17)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_14, function);
            }
          }
          __pyx_t_16 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_14);
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1485, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_14 = PyTuple_New(6); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1485, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_INCREF(__pyx_int_1);
          __Pyx_GIVEREF(__pyx_int_1);
          PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_int_1);
          __Pyx_INCREF(Py_False);
          __Pyx_GIVEREF(Py_False);
          PyTuple_SET_ITEM(__pyx_t_14, 1, Py_False);
          __Pyx_GIVEREF(__pyx_t_15);
          PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_t_15);
          __Pyx_GIVEREF(__pyx_t_16);
          PyTuple_SET_ITEM(__pyx_t_14, 3, __pyx_t_16);
          __Pyx_INCREF(__pyx_v_x);
          __Pyx_GIVEREF(__pyx_v_x);
          PyTuple_SET_ITEM(__pyx_t_14, 4, __pyx_v_x);
          __Pyx_INCREF(__pyx_v_y);
          __Pyx_GIVEREF(__pyx_v_y);
          PyTuple_SET_ITEM(__pyx_t_14, 5, __pyx_v_y);
          __pyx_t_15 = 0;
          __pyx_t_16 = 0;
          __pyx_r = __pyx_t_14;
          __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L0;

          /* "world_cy.pyx":1484
 *                 for mi in dll:
 *                     xpos,ypos=mi.get_pos()
 *                     if max(dist(xpos,x,self.xsize),dist(ypos,y,self.ysize))>mi.get_alen():             # <<<<<<<<<<<<<<
 *                         return 1,False,mi.get_pos(),mi.get_alen(),x,y
 *         for mi in self.mis:
 */
        }

        /* "world_cy.pyx":1482
 *             for y in range(self.ysize):
 *                 dll=self.occupy_map[x,y]
 *                 for mi in dll:             # <<<<<<<<<<<<<<
 *                     xpos,ypos=mi.get_pos()
 *                     if max(dist(xpos,x,self.xsize),dist(ypos,y,self.ysize))>mi.get_alen():
 */
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "world_cy.pyx":1480
 *     def occupy_check(self):
 *         for x in range(self.xsize):
 *             for y in range(self.ysize):             # <<<<<<<<<<<<<<
 *                 dll=self.occupy_map[x,y]
 *                 for mi in dll:
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "world_cy.pyx":1479
 *     #main
 *     def occupy_check(self):
 *         for x in range(self.xsize):             # <<<<<<<<<<<<<<
 *             for y in range(self.ysize):
 *                 dll=self.occupy_map[x,y]
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "world_cy.pyx":1486
 *                     if max(dist(xpos,x,self.xsize),dist(ypos,y,self.ysize))>mi.get_alen():
 *                         return 1,False,mi.get_pos(),mi.get_alen(),x,y
 *         for mi in self.mis:             # <<<<<<<<<<<<<<
 *             xpos,ypos=mi.get_pos()
 *             for a in range(-mi.get_alen(),1+mi.get_alen()):
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self->mis))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self->mis))) {
    __pyx_t_1 = ((PyObject *)__pyx_v_self->mis); __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_self->mis)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1486, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1486, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1486, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1486, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1486, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1486, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_mi, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "world_cy.pyx":1487
 *                         return 1,False,mi.get_pos(),mi.get_alen(),x,y
 *         for mi in self.mis:
 *             xpos,ypos=mi.get_pos()             # <<<<<<<<<<<<<<
 *             for a in range(-mi.get_alen(),1+mi.get_alen()):
 *                 for b in range(-mi.get_alen(),1+mi.get_alen()):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_pos); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_2 = (__pyx_t_14) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_14) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 1487, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_14 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_14 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_14);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1487, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_14 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1487, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_16 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1487, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_18 = Py_TYPE(__pyx_t_16)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_18(__pyx_t_16); if (unlikely(!__pyx_t_5)) goto __pyx_L14_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_14 = __pyx_t_18(__pyx_t_16); if (unlikely(!__pyx_t_14)) goto __pyx_L14_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_14);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_16), 2) < 0) __PYX_ERR(1, 1487, __pyx_L1_error)
      __pyx_t_18 = NULL;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      goto __pyx_L15_unpacking_done;
      __pyx_L14_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_18 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 1487, __pyx_L1_error)
      __pyx_L15_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_xpos, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ypos, __pyx_t_14);
    __pyx_t_14 = 0;

    /* "world_cy.pyx":1488
 *         for mi in self.mis:
 *             xpos,ypos=mi.get_pos()
 *             for a in range(-mi.get_alen(),1+mi.get_alen()):             # <<<<<<<<<<<<<<
 *                 for b in range(-mi.get_alen(),1+mi.get_alen()):
 *                     x=(xpos+a)%self.xsize
 */
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_alen); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_14);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = PyNumber_Negative(__pyx_t_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_alen); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_16 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_2 = (__pyx_t_16) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_16) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_2, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_14 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_2 = __pyx_t_5; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1488, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1488, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 1488, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1488, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 1488, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1488, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1488, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_a, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "world_cy.pyx":1489
 *             xpos,ypos=mi.get_pos()
 *             for a in range(-mi.get_alen(),1+mi.get_alen()):
 *                 for b in range(-mi.get_alen(),1+mi.get_alen()):             # <<<<<<<<<<<<<<
 *                     x=(xpos+a)%self.xsize
 *                     y=(ypos+b)%self.ysize
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_alen); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_16 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_16)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_16);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      __pyx_t_5 = (__pyx_t_16) ? __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_16) : __Pyx_PyObject_CallNoArg(__pyx_t_14);
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = PyNumber_Negative(__pyx_t_5); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_alen); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_15 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_16);
        if (likely(__pyx_t_15)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_16, function);
        }
      }
      __pyx_t_5 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_16);
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_5, 1, 0, 0); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_16);
      __pyx_t_14 = 0;
      __pyx_t_16 = 0;
      __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_5, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (likely(PyList_CheckExact(__pyx_t_16)) || PyTuple_CheckExact(__pyx_t_16)) {
        __pyx_t_5 = __pyx_t_16; __Pyx_INCREF(__pyx_t_5); __pyx_t_9 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1489, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_13 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1489, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_16 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_9); __Pyx_INCREF(__pyx_t_16); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 1489, __pyx_L1_error)
            #else
            __pyx_t_16 = PySequence_ITEM(__pyx_t_5, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1489, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_9); __Pyx_INCREF(__pyx_t_16); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 1489, __pyx_L1_error)
            #else
            __pyx_t_16 = PySequence_ITEM(__pyx_t_5, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1489, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            #endif
          }
        } else {
          __pyx_t_16 = __pyx_t_13(__pyx_t_5);
          if (unlikely(!__pyx_t_16)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 1489, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_16);
        }
        __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_16);
        __pyx_t_16 = 0;

        /* "world_cy.pyx":1490
 *             for a in range(-mi.get_alen(),1+mi.get_alen()):
 *                 for b in range(-mi.get_alen(),1+mi.get_alen()):
 *                     x=(xpos+a)%self.xsize             # <<<<<<<<<<<<<<
 *                     y=(ypos+b)%self.ysize
 *                     dll=self.occupy_map[x,y]
 */
        __pyx_t_16 = PyNumber_Add(__pyx_v_xpos, __pyx_v_a); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1490, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_self->xsize); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1490, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_15 = PyNumber_Remainder(__pyx_t_16, __pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 1490, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_15);
        __pyx_t_15 = 0;

        /* "world_cy.pyx":1491
 *                 for b in range(-mi.get_alen(),1+mi.get_alen()):
 *                     x=(xpos+a)%self.xsize
 *                     y=(ypos+b)%self.ysize             # <<<<<<<<<<<<<<
 *                     dll=self.occupy_map[x,y]
 *                     if not dll.contains_py(mi):
 */
        __pyx_t_15 = PyNumber_Add(__pyx_v_ypos, __pyx_v_b); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 1491, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_self->ysize); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1491, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_16 = PyNumber_Remainder(__pyx_t_15, __pyx_t_14); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1491, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_16);
        __pyx_t_16 = 0;

        /* "world_cy.pyx":1492
 *                     x=(xpos+a)%self.xsize
 *                     y=(ypos+b)%self.ysize
 *                     dll=self.occupy_map[x,y]             # <<<<<<<<<<<<<<
 *                     if not dll.contains_py(mi):
 *                         return 2,False,mi.get_pos(),mi.get_alen(),x,y
 */
        if (unlikely(!__pyx_v_self->occupy_map.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1492, __pyx_L1_error)}
        __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_x); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1492, __pyx_L1_error)
        __pyx_t_23 = __Pyx_PyIndex_AsSsize_t(__pyx_v_y); if (unlikely((__pyx_t_23 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1492, __pyx_L1_error)
        __pyx_t_24 = __pyx_t_8;
        __pyx_t_25 = __pyx_t_23;
        __pyx_t_12 = -1;
        if (__pyx_t_24 < 0) {
          __pyx_t_24 += __pyx_v_self->occupy_map.shape[0];
          if (unlikely(__pyx_t_24 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_24 >= __pyx_v_self->occupy_map.shape[0])) __pyx_t_12 = 0;
        if (__pyx_t_25 < 0) {
          __pyx_t_25 += __pyx_v_self->occupy_map.shape[1];
          if (unlikely(__pyx_t_25 < 0)) __pyx_t_12 = 1;
        } else if (unlikely(__pyx_t_25 >= __pyx_v_self->occupy_map.shape[1])) __pyx_t_12 = 1;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          __PYX_ERR(1, 1492, __pyx_L1_error)
        }
        __pyx_t_16 = (PyObject *) *((struct __pyx_obj_8world_cy_MinionDLL * *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->occupy_map.data + __pyx_t_24 * __pyx_v_self->occupy_map.strides[0]) ) + __pyx_t_25 * __pyx_v_self->occupy_map.strides[1]) ));
        __Pyx_INCREF((PyObject*)__pyx_t_16);
        __Pyx_XDECREF_SET(__pyx_v_dll, ((PyObject *)__pyx_t_16));
        __pyx_t_16 = 0;

        /* "world_cy.pyx":1493
 *                     y=(ypos+b)%self.ysize
 *                     dll=self.occupy_map[x,y]
 *                     if not dll.contains_py(mi):             # <<<<<<<<<<<<<<
 *                         return 2,False,mi.get_pos(),mi.get_alen(),x,y
 *         return True
 */
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_dll, __pyx_n_s_contains_py); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1493, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_15 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_14, function);
          }
        }
        __pyx_t_16 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_15, __pyx_v_mi) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_mi);
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1493, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_16); if (unlikely(__pyx_t_22 < 0)) __PYX_ERR(1, 1493, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_26 = ((!__pyx_t_22) != 0);
        if (__pyx_t_26) {

          /* "world_cy.pyx":1494
 *                     dll=self.occupy_map[x,y]
 *                     if not dll.contains_py(mi):
 *                         return 2,False,mi.get_pos(),mi.get_alen(),x,y             # <<<<<<<<<<<<<<
 *         return True
 *     def total_mass_error_detector(self,prompt):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_pos); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1494, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_15 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
            __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);
            if (likely(__pyx_t_15)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
              __Pyx_INCREF(__pyx_t_15);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_14, function);
            }
          }
          __pyx_t_16 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_14);
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1494, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_alen); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 1494, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_17 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_17)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
            }
          }
          __pyx_t_14 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1494, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = PyTuple_New(6); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 1494, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_INCREF(__pyx_int_2);
          __Pyx_GIVEREF(__pyx_int_2);
          PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_int_2);
          __Pyx_INCREF(Py_False);
          __Pyx_GIVEREF(Py_False);
          PyTuple_SET_ITEM(__pyx_t_15, 1, Py_False);
          __Pyx_GIVEREF(__pyx_t_16);
          PyTuple_SET_ITEM(__pyx_t_15, 2, __pyx_t_16);
          __Pyx_GIVEREF(__pyx_t_14);
          PyTuple_SET_ITEM(__pyx_t_15, 3, __pyx_t_14);
          __Pyx_INCREF(__pyx_v_x);
          __Pyx_GIVEREF(__pyx_v_x);
          PyTuple_SET_ITEM(__pyx_t_15, 4, __pyx_v_x);
          __Pyx_INCREF(__pyx_v_y);
          __Pyx_GIVEREF(__pyx_v_y);
          PyTuple_SET_ITEM(__pyx_t_15, 5, __pyx_v_y);
          __pyx_t_16 = 0;
          __pyx_t_14 = 0;
          __pyx_r = __pyx_t_15;
          __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L0;

          /* "world_cy.pyx":1493
 *                     y=(ypos+b)%self.ysize
 *                     dll=self.occupy_map[x,y]
 *                     if not dll.contains_py(mi):             # <<<<<<<<<<<<<<
 *                         return 2,False,mi.get_pos(),mi.get_alen(),x,y
 *         return True
 */
        }

        /* "world_cy.pyx":1489
 *             xpos,ypos=mi.get_pos()
 *             for a in range(-mi.get_alen(),1+mi.get_alen()):
 *                 for b in range(-mi.get_alen(),1+mi.get_alen()):             # <<<<<<<<<<<<<<
 *                     x=(xpos+a)%self.xsize
 *                     y=(ypos+b)%self.ysize
 */
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "world_cy.pyx":1488
 *         for mi in self.mis:
 *             xpos,ypos=mi.get_pos()
 *             for a in range(-mi.get_alen(),1+mi.get_alen()):             # <<<<<<<<<<<<<<
 *                 for b in range(-mi.get_alen(),1+mi.get_alen()):
 *                     x=(xpos+a)%self.xsize
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "world_cy.pyx":1486
 *                     if max(dist(xpos,x,self.xsize),dist(ypos,y,self.ysize))>mi.get_alen():
 *                         return 1,False,mi.get_pos(),mi.get_alen(),x,y
 *         for mi in self.mis:             # <<<<<<<<<<<<<<
 *             xpos,ypos=mi.get_pos()
 *             for a in range(-mi.get_alen(),1+mi.get_alen()):
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "world_cy.pyx":1495
 *                     if not dll.contains_py(mi):
 *                         return 2,False,mi.get_pos(),mi.get_alen(),x,y
 *         return True             # <<<<<<<<<<<<<<
 *     def total_mass_error_detector(self,prompt):
 *         if self.total_mass()>15000.2:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "world_cy.pyx":1478
 *     #public API-------------------------------------------
 *     #main
 *     def occupy_check(self):             # <<<<<<<<<<<<<<
 *         for x in range(self.xsize):
 *             for y in range(self.ysize):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("world_cy.World.occupy_check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_dll);
  __Pyx_XDECREF(__pyx_v_mi);
  __Pyx_XDECREF(__pyx_v_xpos);
  __Pyx_XDECREF(__pyx_v_ypos);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1496
 *                         return 2,False,mi.get_pos(),mi.get_alen(),x,y
 *         return True
 *     def total_mass_error_detector(self,prompt):             # <<<<<<<<<<<<<<
 *         if self.total_mass()>15000.2:
 *             print("error during "+prompt+"!!!")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_7total_mass_error_detector(PyObject *__pyx_v_self, PyObject *__pyx_v_prompt); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_7total_mass_error_detector(PyObject *__pyx_v_self, PyObject *__pyx_v_prompt) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("total_mass_error_detector (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_6total_mass_error_detector(((struct __pyx_obj_8world_cy_World *)__pyx_v_self), ((PyObject *)__pyx_v_prompt));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_6total_mass_error_detector(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_prompt) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("total_mass_error_detector", 0);
  __Pyx_TraceCall("total_mass_error_detector", __pyx_f[1], 1496, 0, __PYX_ERR(1, 1496, __pyx_L1_error));

  /* "world_cy.pyx":1497
 *         return True
 *     def total_mass_error_detector(self,prompt):
 *         if self.total_mass()>15000.2:             # <<<<<<<<<<<<<<
 *             print("error during "+prompt+"!!!")
 *             raise Exception()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_total_mass); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_float_15000_2, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 1497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "world_cy.pyx":1498
 *     def total_mass_error_detector(self,prompt):
 *         if self.total_mass()>15000.2:
 *             print("error during "+prompt+"!!!")             # <<<<<<<<<<<<<<
 *             raise Exception()
 *     def mins_negative_error_detector(self,prompt):
 */
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_error_during, __pyx_v_prompt); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__32); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(1, 1498, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "world_cy.pyx":1499
 *         if self.total_mass()>15000.2:
 *             print("error during "+prompt+"!!!")
 *             raise Exception()             # <<<<<<<<<<<<<<
 *     def mins_negative_error_detector(self,prompt):
 *         for i in range(self.get_xsize()):
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1499, __pyx_L1_error)

    /* "world_cy.pyx":1497
 *         return True
 *     def total_mass_error_detector(self,prompt):
 *         if self.total_mass()>15000.2:             # <<<<<<<<<<<<<<
 *             print("error during "+prompt+"!!!")
 *             raise Exception()
 */
  }

  /* "world_cy.pyx":1496
 *                         return 2,False,mi.get_pos(),mi.get_alen(),x,y
 *         return True
 *     def total_mass_error_detector(self,prompt):             # <<<<<<<<<<<<<<
 *         if self.total_mass()>15000.2:
 *             print("error during "+prompt+"!!!")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("world_cy.World.total_mass_error_detector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1500
 *             print("error during "+prompt+"!!!")
 *             raise Exception()
 *     def mins_negative_error_detector(self,prompt):             # <<<<<<<<<<<<<<
 *         for i in range(self.get_xsize()):
 *             for j in range(self.get_ysize()):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_9mins_negative_error_detector(PyObject *__pyx_v_self, PyObject *__pyx_v_prompt); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_9mins_negative_error_detector(PyObject *__pyx_v_self, PyObject *__pyx_v_prompt) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mins_negative_error_detector (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_8mins_negative_error_detector(((struct __pyx_obj_8world_cy_World *)__pyx_v_self), ((PyObject *)__pyx_v_prompt));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_8mins_negative_error_detector(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_prompt) {
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("mins_negative_error_detector", 0);
  __Pyx_TraceCall("mins_negative_error_detector", __pyx_f[1], 1500, 0, __PYX_ERR(1, 1500, __pyx_L1_error));

  /* "world_cy.pyx":1501
 *             raise Exception()
 *     def mins_negative_error_detector(self,prompt):
 *         for i in range(self.get_xsize()):             # <<<<<<<<<<<<<<
 *             for j in range(self.get_ysize()):
 *                 if self.get_mins()[i,j]<0:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_xsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1501, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 1501, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1501, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 1501, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1501, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1501, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "world_cy.pyx":1502
 *     def mins_negative_error_detector(self,prompt):
 *         for i in range(self.get_xsize()):
 *             for j in range(self.get_ysize()):             # <<<<<<<<<<<<<<
 *                 if self.get_mins()[i,j]<0:
 *                     print("mins negative in "+prompt+" at ",i,j)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_ysize); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1502, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1502, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1502, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1502, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1502, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1502, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_8(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1502, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "world_cy.pyx":1503
 *         for i in range(self.get_xsize()):
 *             for j in range(self.get_ysize()):
 *                 if self.get_mins()[i,j]<0:             # <<<<<<<<<<<<<<
 *                     print("mins negative in "+prompt+" at ",i,j)
 *                     return
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_mins); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1503, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1503, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1503, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_i);
      __Pyx_INCREF(__pyx_v_j);
      __Pyx_GIVEREF(__pyx_v_j);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_j);
      __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1503, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyObject_RichCompare(__pyx_t_9, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1503, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1503, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_10) {

        /* "world_cy.pyx":1504
 *             for j in range(self.get_ysize()):
 *                 if self.get_mins()[i,j]<0:
 *                     print("mins negative in "+prompt+" at ",i,j)             # <<<<<<<<<<<<<<
 *                     return
 *     def snapshot_error_detector(self,prompt):
 */
        __pyx_t_6 = PyNumber_Add(__pyx_kp_s_mins_negative_in, __pyx_v_prompt); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1504, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_9 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_at); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1504, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1504, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_9);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_i);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_j);
        __pyx_t_9 = 0;
        if (__Pyx_PrintOne(0, __pyx_t_6) < 0) __PYX_ERR(1, 1504, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "world_cy.pyx":1505
 *                 if self.get_mins()[i,j]<0:
 *                     print("mins negative in "+prompt+" at ",i,j)
 *                     return             # <<<<<<<<<<<<<<
 *     def snapshot_error_detector(self,prompt):
 *         for i in range(self.get_xsize()):
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "world_cy.pyx":1503
 *         for i in range(self.get_xsize()):
 *             for j in range(self.get_ysize()):
 *                 if self.get_mins()[i,j]<0:             # <<<<<<<<<<<<<<
 *                     print("mins negative in "+prompt+" at ",i,j)
 *                     return
 */
      }

      /* "world_cy.pyx":1502
 *     def mins_negative_error_detector(self,prompt):
 *         for i in range(self.get_xsize()):
 *             for j in range(self.get_ysize()):             # <<<<<<<<<<<<<<
 *                 if self.get_mins()[i,j]<0:
 *                     print("mins negative in "+prompt+" at ",i,j)
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "world_cy.pyx":1501
 *             raise Exception()
 *     def mins_negative_error_detector(self,prompt):
 *         for i in range(self.get_xsize()):             # <<<<<<<<<<<<<<
 *             for j in range(self.get_ysize()):
 *                 if self.get_mins()[i,j]<0:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "world_cy.pyx":1500
 *             print("error during "+prompt+"!!!")
 *             raise Exception()
 *     def mins_negative_error_detector(self,prompt):             # <<<<<<<<<<<<<<
 *         for i in range(self.get_xsize()):
 *             for j in range(self.get_ysize()):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("world_cy.World.mins_negative_error_detector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1506
 *                     print("mins negative in "+prompt+" at ",i,j)
 *                     return
 *     def snapshot_error_detector(self,prompt):             # <<<<<<<<<<<<<<
 *         for i in range(self.get_xsize()):
 *             for j in range(self.get_ysize()):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_11snapshot_error_detector(PyObject *__pyx_v_self, PyObject *__pyx_v_prompt); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_11snapshot_error_detector(PyObject *__pyx_v_self, PyObject *__pyx_v_prompt) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("snapshot_error_detector (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_10snapshot_error_detector(((struct __pyx_obj_8world_cy_World *)__pyx_v_self), ((PyObject *)__pyx_v_prompt));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_10snapshot_error_detector(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_prompt) {
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  __Pyx_RefNannySetupContext("snapshot_error_detector", 0);
  __Pyx_TraceCall("snapshot_error_detector", __pyx_f[1], 1506, 0, __PYX_ERR(1, 1506, __pyx_L1_error));

  /* "world_cy.pyx":1507
 *                     return
 *     def snapshot_error_detector(self,prompt):
 *         for i in range(self.get_xsize()):             # <<<<<<<<<<<<<<
 *             for j in range(self.get_ysize()):
 *                 if self.snapshot[i,j]==1:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_xsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1507, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 1507, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1507, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 1507, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1507, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1507, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "world_cy.pyx":1508
 *     def snapshot_error_detector(self,prompt):
 *         for i in range(self.get_xsize()):
 *             for j in range(self.get_ysize()):             # <<<<<<<<<<<<<<
 *                 if self.snapshot[i,j]==1:
 *                     print("snapshot not assigned in "+prompt)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_ysize); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1508, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1508, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1508, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1508, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1508, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1508, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_8(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1508, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "world_cy.pyx":1509
 *         for i in range(self.get_xsize()):
 *             for j in range(self.get_ysize()):
 *                 if self.snapshot[i,j]==1:             # <<<<<<<<<<<<<<
 *                     print("snapshot not assigned in "+prompt)
 *                     return
 */
      if (unlikely(!__pyx_v_self->snapshot.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1509, __pyx_L1_error)}
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1509, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_j); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1509, __pyx_L1_error)
      __pyx_t_11 = __pyx_t_9;
      __pyx_t_12 = __pyx_t_10;
      __pyx_t_13 = -1;
      if (__pyx_t_11 < 0) {
        __pyx_t_11 += __pyx_v_self->snapshot.shape[0];
        if (unlikely(__pyx_t_11 < 0)) __pyx_t_13 = 0;
      } else if (unlikely(__pyx_t_11 >= __pyx_v_self->snapshot.shape[0])) __pyx_t_13 = 0;
      if (__pyx_t_12 < 0) {
        __pyx_t_12 += __pyx_v_self->snapshot.shape[1];
        if (unlikely(__pyx_t_12 < 0)) __pyx_t_13 = 1;
      } else if (unlikely(__pyx_t_12 >= __pyx_v_self->snapshot.shape[1])) __pyx_t_13 = 1;
      if (unlikely(__pyx_t_13 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_13);
        __PYX_ERR(1, 1509, __pyx_L1_error)
      }
      __pyx_t_14 = (((*((int *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->snapshot.data + __pyx_t_11 * __pyx_v_self->snapshot.strides[0]) ) + __pyx_t_12 * __pyx_v_self->snapshot.strides[1]) ))) == 1) != 0);
      if (__pyx_t_14) {

        /* "world_cy.pyx":1510
 *             for j in range(self.get_ysize()):
 *                 if self.snapshot[i,j]==1:
 *                     print("snapshot not assigned in "+prompt)             # <<<<<<<<<<<<<<
 *                     return
 *         print("no problem in "+prompt)
 */
        __pyx_t_3 = PyNumber_Add(__pyx_kp_s_snapshot_not_assigned_in, __pyx_v_prompt); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1510, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_PrintOne(0, __pyx_t_3) < 0) __PYX_ERR(1, 1510, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "world_cy.pyx":1511
 *                 if self.snapshot[i,j]==1:
 *                     print("snapshot not assigned in "+prompt)
 *                     return             # <<<<<<<<<<<<<<
 *         print("no problem in "+prompt)
 *     def max_mass(self):
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L0;

        /* "world_cy.pyx":1509
 *         for i in range(self.get_xsize()):
 *             for j in range(self.get_ysize()):
 *                 if self.snapshot[i,j]==1:             # <<<<<<<<<<<<<<
 *                     print("snapshot not assigned in "+prompt)
 *                     return
 */
      }

      /* "world_cy.pyx":1508
 *     def snapshot_error_detector(self,prompt):
 *         for i in range(self.get_xsize()):
 *             for j in range(self.get_ysize()):             # <<<<<<<<<<<<<<
 *                 if self.snapshot[i,j]==1:
 *                     print("snapshot not assigned in "+prompt)
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "world_cy.pyx":1507
 *                     return
 *     def snapshot_error_detector(self,prompt):
 *         for i in range(self.get_xsize()):             # <<<<<<<<<<<<<<
 *             for j in range(self.get_ysize()):
 *                 if self.snapshot[i,j]==1:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "world_cy.pyx":1512
 *                     print("snapshot not assigned in "+prompt)
 *                     return
 *         print("no problem in "+prompt)             # <<<<<<<<<<<<<<
 *     def max_mass(self):
 *         m=-1
 */
  __pyx_t_1 = PyNumber_Add(__pyx_kp_s_no_problem_in, __pyx_v_prompt); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(1, 1512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "world_cy.pyx":1506
 *                     print("mins negative in "+prompt+" at ",i,j)
 *                     return
 *     def snapshot_error_detector(self,prompt):             # <<<<<<<<<<<<<<
 *         for i in range(self.get_xsize()):
 *             for j in range(self.get_ysize()):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("world_cy.World.snapshot_error_detector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1513
 *                     return
 *         print("no problem in "+prompt)
 *     def max_mass(self):             # <<<<<<<<<<<<<<
 *         m=-1
 *         for mi in self.mis:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_13max_mass(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_13max_mass(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("max_mass (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_12max_mass(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_12max_mass(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_mi = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("max_mass", 0);
  __Pyx_TraceCall("max_mass", __pyx_f[1], 1513, 0, __PYX_ERR(1, 1513, __pyx_L1_error));

  /* "world_cy.pyx":1514
 *         print("no problem in "+prompt)
 *     def max_mass(self):
 *         m=-1             # <<<<<<<<<<<<<<
 *         for mi in self.mis:
 *             if mi.get_mass()>m:
 */
  __Pyx_INCREF(__pyx_int_neg_1);
  __pyx_v_m = __pyx_int_neg_1;

  /* "world_cy.pyx":1515
 *     def max_mass(self):
 *         m=-1
 *         for mi in self.mis:             # <<<<<<<<<<<<<<
 *             if mi.get_mass()>m:
 *                 m=mi.get_mass()
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self->mis))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self->mis))) {
    __pyx_t_1 = ((PyObject *)__pyx_v_self->mis); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_self->mis)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1515, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1515, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1515, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1515, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1515, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1515, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_mi, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "world_cy.pyx":1516
 *         m=-1
 *         for mi in self.mis:
 *             if mi.get_mass()>m:             # <<<<<<<<<<<<<<
 *                 m=mi.get_mass()
 *         return m
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_mass); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_v_m, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1516, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 1516, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_7) {

      /* "world_cy.pyx":1517
 *         for mi in self.mis:
 *             if mi.get_mass()>m:
 *                 m=mi.get_mass()             # <<<<<<<<<<<<<<
 *         return m
 *     def death_by(self,prompt):
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_mass); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1517, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1517, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_m, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "world_cy.pyx":1516
 *         m=-1
 *         for mi in self.mis:
 *             if mi.get_mass()>m:             # <<<<<<<<<<<<<<
 *                 m=mi.get_mass()
 *         return m
 */
    }

    /* "world_cy.pyx":1515
 *     def max_mass(self):
 *         m=-1
 *         for mi in self.mis:             # <<<<<<<<<<<<<<
 *             if mi.get_mass()>m:
 *                 m=mi.get_mass()
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "world_cy.pyx":1518
 *             if mi.get_mass()>m:
 *                 m=mi.get_mass()
 *         return m             # <<<<<<<<<<<<<<
 *     def death_by(self,prompt):
 *         print("death by "+prompt)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_m);
  __pyx_r = __pyx_v_m;
  goto __pyx_L0;

  /* "world_cy.pyx":1513
 *                     return
 *         print("no problem in "+prompt)
 *     def max_mass(self):             # <<<<<<<<<<<<<<
 *         m=-1
 *         for mi in self.mis:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("world_cy.World.max_mass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_mi);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1519
 *                 m=mi.get_mass()
 *         return m
 *     def death_by(self,prompt):             # <<<<<<<<<<<<<<
 *         print("death by "+prompt)
 *     def status(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_15death_by(PyObject *__pyx_v_self, PyObject *__pyx_v_prompt); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_15death_by(PyObject *__pyx_v_self, PyObject *__pyx_v_prompt) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("death_by (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_14death_by(((struct __pyx_obj_8world_cy_World *)__pyx_v_self), ((PyObject *)__pyx_v_prompt));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_14death_by(CYTHON_UNUSED struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_prompt) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("death_by", 0);
  __Pyx_TraceCall("death_by", __pyx_f[1], 1519, 0, __PYX_ERR(1, 1519, __pyx_L1_error));

  /* "world_cy.pyx":1520
 *         return m
 *     def death_by(self,prompt):
 *         print("death by "+prompt)             # <<<<<<<<<<<<<<
 *     def status(self):
 *         red_num=0
 */
  __pyx_t_1 = PyNumber_Add(__pyx_kp_s_death_by, __pyx_v_prompt); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(1, 1520, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "world_cy.pyx":1519
 *                 m=mi.get_mass()
 *         return m
 *     def death_by(self,prompt):             # <<<<<<<<<<<<<<
 *         print("death by "+prompt)
 *     def status(self):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.death_by", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1521
 *     def death_by(self,prompt):
 *         print("death by "+prompt)
 *     def status(self):             # <<<<<<<<<<<<<<
 *         red_num=0
 *         blue_num=0
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_17status(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_17status(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("status (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_16status(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_16status(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_v_red_num = NULL;
  PyObject *__pyx_v_blue_num = NULL;
  PyObject *__pyx_v_mi = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("status", 0);
  __Pyx_TraceCall("status", __pyx_f[1], 1521, 0, __PYX_ERR(1, 1521, __pyx_L1_error));

  /* "world_cy.pyx":1522
 *         print("death by "+prompt)
 *     def status(self):
 *         red_num=0             # <<<<<<<<<<<<<<
 *         blue_num=0
 *         for mi in self.mis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_red_num = __pyx_int_0;

  /* "world_cy.pyx":1523
 *     def status(self):
 *         red_num=0
 *         blue_num=0             # <<<<<<<<<<<<<<
 *         for mi in self.mis:
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_blue_num = __pyx_int_0;

  /* "world_cy.pyx":1524
 *         red_num=0
 *         blue_num=0
 *         for mi in self.mis:             # <<<<<<<<<<<<<<
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):
 *                 red_num+=1
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self->mis))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self->mis))) {
    __pyx_t_1 = ((PyObject *)__pyx_v_self->mis); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_self->mis)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1524, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1524, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1524, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1524, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1524, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1524, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_mi, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "world_cy.pyx":1525
 *         blue_num=0
 *         for mi in self.mis:
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):             # <<<<<<<<<<<<<<
 *                 red_num+=1
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_dna); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_get_colorTrait); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get_c); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_4, __pyx_tuple__33, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1525, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 1525, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_9) {

      /* "world_cy.pyx":1526
 *         for mi in self.mis:
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):
 *                 red_num+=1             # <<<<<<<<<<<<<<
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):
 *                 blue_num+=1
 */
      __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_red_num, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF_SET(__pyx_v_red_num, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "world_cy.pyx":1525
 *         blue_num=0
 *         for mi in self.mis:
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):             # <<<<<<<<<<<<<<
 *                 red_num+=1
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):
 */
    }

    /* "world_cy.pyx":1527
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):
 *                 red_num+=1
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):             # <<<<<<<<<<<<<<
 *                 blue_num+=1
 *         return (red_num,blue_num)
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_dna); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get_colorTrait); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get_c); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_7, __pyx_tuple__34, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1527, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 1527, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_9) {

      /* "world_cy.pyx":1528
 *                 red_num+=1
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):
 *                 blue_num+=1             # <<<<<<<<<<<<<<
 *         return (red_num,blue_num)
 *     def append_red_dnas(self,l):
 */
      __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_blue_num, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1528, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_blue_num, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "world_cy.pyx":1527
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):
 *                 red_num+=1
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):             # <<<<<<<<<<<<<<
 *                 blue_num+=1
 *         return (red_num,blue_num)
 */
    }

    /* "world_cy.pyx":1524
 *         red_num=0
 *         blue_num=0
 *         for mi in self.mis:             # <<<<<<<<<<<<<<
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):
 *                 red_num+=1
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "world_cy.pyx":1529
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):
 *                 blue_num+=1
 *         return (red_num,blue_num)             # <<<<<<<<<<<<<<
 *     def append_red_dnas(self,l):
 *         for mi in self.mis:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_red_num);
  __Pyx_GIVEREF(__pyx_v_red_num);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_red_num);
  __Pyx_INCREF(__pyx_v_blue_num);
  __Pyx_GIVEREF(__pyx_v_blue_num);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_blue_num);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1521
 *     def death_by(self,prompt):
 *         print("death by "+prompt)
 *     def status(self):             # <<<<<<<<<<<<<<
 *         red_num=0
 *         blue_num=0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("world_cy.World.status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_red_num);
  __Pyx_XDECREF(__pyx_v_blue_num);
  __Pyx_XDECREF(__pyx_v_mi);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1530
 *                 blue_num+=1
 *         return (red_num,blue_num)
 *     def append_red_dnas(self,l):             # <<<<<<<<<<<<<<
 *         for mi in self.mis:
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_19append_red_dnas(PyObject *__pyx_v_self, PyObject *__pyx_v_l); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_19append_red_dnas(PyObject *__pyx_v_self, PyObject *__pyx_v_l) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append_red_dnas (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_18append_red_dnas(((struct __pyx_obj_8world_cy_World *)__pyx_v_self), ((PyObject *)__pyx_v_l));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_18append_red_dnas(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_l) {
  PyObject *__pyx_v_mi = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("append_red_dnas", 0);
  __Pyx_TraceCall("append_red_dnas", __pyx_f[1], 1530, 0, __PYX_ERR(1, 1530, __pyx_L1_error));

  /* "world_cy.pyx":1531
 *         return (red_num,blue_num)
 *     def append_red_dnas(self,l):
 *         for mi in self.mis:             # <<<<<<<<<<<<<<
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):
 *                 l.append(mi.get_dna())
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self->mis))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self->mis))) {
    __pyx_t_1 = ((PyObject *)__pyx_v_self->mis); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_self->mis)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1531, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1531, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1531, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1531, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1531, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1531, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_mi, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "world_cy.pyx":1532
 *     def append_red_dnas(self,l):
 *         for mi in self.mis:
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):             # <<<<<<<<<<<<<<
 *                 l.append(mi.get_dna())
 *     def append_blue_dnas(self,l):
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_dna); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_get_colorTrait); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get_c); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_4, __pyx_tuple__33, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1532, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 1532, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_9) {

      /* "world_cy.pyx":1533
 *         for mi in self.mis:
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):
 *                 l.append(mi.get_dna())             # <<<<<<<<<<<<<<
 *     def append_blue_dnas(self,l):
 *         for mi in self.mis:
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_dna); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1533, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1533, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = __Pyx_PyObject_Append(__pyx_v_l, __pyx_t_7); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 1533, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "world_cy.pyx":1532
 *     def append_red_dnas(self,l):
 *         for mi in self.mis:
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):             # <<<<<<<<<<<<<<
 *                 l.append(mi.get_dna())
 *     def append_blue_dnas(self,l):
 */
    }

    /* "world_cy.pyx":1531
 *         return (red_num,blue_num)
 *     def append_red_dnas(self,l):
 *         for mi in self.mis:             # <<<<<<<<<<<<<<
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):
 *                 l.append(mi.get_dna())
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "world_cy.pyx":1530
 *                 blue_num+=1
 *         return (red_num,blue_num)
 *     def append_red_dnas(self,l):             # <<<<<<<<<<<<<<
 *         for mi in self.mis:
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("world_cy.World.append_red_dnas", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_mi);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1534
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):
 *                 l.append(mi.get_dna())
 *     def append_blue_dnas(self,l):             # <<<<<<<<<<<<<<
 *         for mi in self.mis:
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_21append_blue_dnas(PyObject *__pyx_v_self, PyObject *__pyx_v_l); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_21append_blue_dnas(PyObject *__pyx_v_self, PyObject *__pyx_v_l) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append_blue_dnas (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_20append_blue_dnas(((struct __pyx_obj_8world_cy_World *)__pyx_v_self), ((PyObject *)__pyx_v_l));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_20append_blue_dnas(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_l) {
  PyObject *__pyx_v_mi = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("append_blue_dnas", 0);
  __Pyx_TraceCall("append_blue_dnas", __pyx_f[1], 1534, 0, __PYX_ERR(1, 1534, __pyx_L1_error));

  /* "world_cy.pyx":1535
 *                 l.append(mi.get_dna())
 *     def append_blue_dnas(self,l):
 *         for mi in self.mis:             # <<<<<<<<<<<<<<
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):
 *                 l.append(mi.get_dna())
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self->mis))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self->mis))) {
    __pyx_t_1 = ((PyObject *)__pyx_v_self->mis); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_self->mis)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1535, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1535, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1535, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1535, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1535, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1535, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_mi, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "world_cy.pyx":1536
 *     def append_blue_dnas(self,l):
 *         for mi in self.mis:
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):             # <<<<<<<<<<<<<<
 *                 l.append(mi.get_dna())
 *     def one_step(self):
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_dna); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_get_colorTrait); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get_c); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_4, __pyx_tuple__34, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1536, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 1536, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_9) {

      /* "world_cy.pyx":1537
 *         for mi in self.mis:
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):
 *                 l.append(mi.get_dna())             # <<<<<<<<<<<<<<
 *     def one_step(self):
 *         self.render()
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_dna); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1537, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1537, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = __Pyx_PyObject_Append(__pyx_v_l, __pyx_t_7); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 1537, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "world_cy.pyx":1536
 *     def append_blue_dnas(self,l):
 *         for mi in self.mis:
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):             # <<<<<<<<<<<<<<
 *                 l.append(mi.get_dna())
 *     def one_step(self):
 */
    }

    /* "world_cy.pyx":1535
 *                 l.append(mi.get_dna())
 *     def append_blue_dnas(self,l):
 *         for mi in self.mis:             # <<<<<<<<<<<<<<
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):
 *                 l.append(mi.get_dna())
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "world_cy.pyx":1534
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):
 *                 l.append(mi.get_dna())
 *     def append_blue_dnas(self,l):             # <<<<<<<<<<<<<<
 *         for mi in self.mis:
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("world_cy.World.append_blue_dnas", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_mi);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1538
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):
 *                 l.append(mi.get_dna())
 *     def one_step(self):             # <<<<<<<<<<<<<<
 *         self.render()
 *         self.control_all()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_23one_step(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_23one_step(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_step (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_22one_step(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_22one_step(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("one_step", 0);
  __Pyx_TraceCall("one_step", __pyx_f[1], 1538, 0, __PYX_ERR(1, 1538, __pyx_L1_error));

  /* "world_cy.pyx":1539
 *                 l.append(mi.get_dna())
 *     def one_step(self):
 *         self.render()             # <<<<<<<<<<<<<<
 *         self.control_all()
 *         self.act_all()
 */
  ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->render(__pyx_v_self);

  /* "world_cy.pyx":1540
 *     def one_step(self):
 *         self.render()
 *         self.control_all()             # <<<<<<<<<<<<<<
 *         self.act_all()
 *         self.basal_metabolism_all()
 */
  ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->control_all(__pyx_v_self);

  /* "world_cy.pyx":1541
 *         self.render()
 *         self.control_all()
 *         self.act_all()             # <<<<<<<<<<<<<<
 *         self.basal_metabolism_all()
 *         self.moment+=1
 */
  ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->act_all(__pyx_v_self);

  /* "world_cy.pyx":1542
 *         self.control_all()
 *         self.act_all()
 *         self.basal_metabolism_all()             # <<<<<<<<<<<<<<
 *         self.moment+=1
 *         self.kill_elderly()
 */
  ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->basal_metabolism_all(__pyx_v_self);

  /* "world_cy.pyx":1543
 *         self.act_all()
 *         self.basal_metabolism_all()
 *         self.moment+=1             # <<<<<<<<<<<<<<
 *         self.kill_elderly()
 *         self.unregister_deads()
 */
  __pyx_v_self->moment = (__pyx_v_self->moment + 1);

  /* "world_cy.pyx":1544
 *         self.basal_metabolism_all()
 *         self.moment+=1
 *         self.kill_elderly()             # <<<<<<<<<<<<<<
 *         self.unregister_deads()
 *         if self.moment%100==0:
 */
  ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->kill_elderly(__pyx_v_self);

  /* "world_cy.pyx":1545
 *         self.moment+=1
 *         self.kill_elderly()
 *         self.unregister_deads()             # <<<<<<<<<<<<<<
 *         if self.moment%100==0:
 *             seed()
 */
  ((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->unregister_deads(__pyx_v_self);

  /* "world_cy.pyx":1546
 *         self.kill_elderly()
 *         self.unregister_deads()
 *         if self.moment%100==0:             # <<<<<<<<<<<<<<
 *             seed()
 *     #basic
 */
  __pyx_t_1 = ((__Pyx_mod_long(__pyx_v_self->moment, 0x64) == 0) != 0);
  if (__pyx_t_1) {

    /* "world_cy.pyx":1547
 *         self.unregister_deads()
 *         if self.moment%100==0:
 *             seed()             # <<<<<<<<<<<<<<
 *     #basic
 *     def get_xsize(self):
 */
    __pyx_f_11fast_random_seed();

    /* "world_cy.pyx":1546
 *         self.kill_elderly()
 *         self.unregister_deads()
 *         if self.moment%100==0:             # <<<<<<<<<<<<<<
 *             seed()
 *     #basic
 */
  }

  /* "world_cy.pyx":1538
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):
 *                 l.append(mi.get_dna())
 *     def one_step(self):             # <<<<<<<<<<<<<<
 *         self.render()
 *         self.control_all()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.World.one_step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1549
 *             seed()
 *     #basic
 *     def get_xsize(self):             # <<<<<<<<<<<<<<
 *         return self.xsize
 *     def get_ysize(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_25get_xsize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_25get_xsize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_xsize (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_24get_xsize(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_24get_xsize(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_xsize", 0);
  __Pyx_TraceCall("get_xsize", __pyx_f[1], 1549, 0, __PYX_ERR(1, 1549, __pyx_L1_error));

  /* "world_cy.pyx":1550
 *     #basic
 *     def get_xsize(self):
 *         return self.xsize             # <<<<<<<<<<<<<<
 *     def get_ysize(self):
 *         return self.ysize
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->xsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1549
 *             seed()
 *     #basic
 *     def get_xsize(self):             # <<<<<<<<<<<<<<
 *         return self.xsize
 *     def get_ysize(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.get_xsize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1551
 *     def get_xsize(self):
 *         return self.xsize
 *     def get_ysize(self):             # <<<<<<<<<<<<<<
 *         return self.ysize
 *     def get_moment(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_27get_ysize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_27get_ysize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ysize (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_26get_ysize(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_26get_ysize(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_ysize", 0);
  __Pyx_TraceCall("get_ysize", __pyx_f[1], 1551, 0, __PYX_ERR(1, 1551, __pyx_L1_error));

  /* "world_cy.pyx":1552
 *         return self.xsize
 *     def get_ysize(self):
 *         return self.ysize             # <<<<<<<<<<<<<<
 *     def get_moment(self):
 *         return self.moment
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->ysize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1551
 *     def get_xsize(self):
 *         return self.xsize
 *     def get_ysize(self):             # <<<<<<<<<<<<<<
 *         return self.ysize
 *     def get_moment(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.get_ysize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1553
 *     def get_ysize(self):
 *         return self.ysize
 *     def get_moment(self):             # <<<<<<<<<<<<<<
 *         return self.moment
 *     def get_new_id(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_29get_moment(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_29get_moment(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_moment (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_28get_moment(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_28get_moment(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_moment", 0);
  __Pyx_TraceCall("get_moment", __pyx_f[1], 1553, 0, __PYX_ERR(1, 1553, __pyx_L1_error));

  /* "world_cy.pyx":1554
 *         return self.ysize
 *     def get_moment(self):
 *         return self.moment             # <<<<<<<<<<<<<<
 *     def get_new_id(self):
 *         return self.new_id
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->moment); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1553
 *     def get_ysize(self):
 *         return self.ysize
 *     def get_moment(self):             # <<<<<<<<<<<<<<
 *         return self.moment
 *     def get_new_id(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.get_moment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1555
 *     def get_moment(self):
 *         return self.moment
 *     def get_new_id(self):             # <<<<<<<<<<<<<<
 *         return self.new_id
 *     def get_mins(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_31get_new_id(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_31get_new_id(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_new_id (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_30get_new_id(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_30get_new_id(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_new_id", 0);
  __Pyx_TraceCall("get_new_id", __pyx_f[1], 1555, 0, __PYX_ERR(1, 1555, __pyx_L1_error));

  /* "world_cy.pyx":1556
 *         return self.moment
 *     def get_new_id(self):
 *         return self.new_id             # <<<<<<<<<<<<<<
 *     def get_mins(self):
 *         return self.mins
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->new_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1555
 *     def get_moment(self):
 *         return self.moment
 *     def get_new_id(self):             # <<<<<<<<<<<<<<
 *         return self.new_id
 *     def get_mins(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.get_new_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1557
 *     def get_new_id(self):
 *         return self.new_id
 *     def get_mins(self):             # <<<<<<<<<<<<<<
 *         return self.mins
 *     def total_mass(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_33get_mins(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_33get_mins(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mins (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_32get_mins(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_32get_mins(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_mins", 0);
  __Pyx_TraceCall("get_mins", __pyx_f[1], 1557, 0, __PYX_ERR(1, 1557, __pyx_L1_error));

  /* "world_cy.pyx":1558
 *         return self.new_id
 *     def get_mins(self):
 *         return self.mins             # <<<<<<<<<<<<<<
 *     def total_mass(self):
 *         return self._total_mass()
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->mins.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1558, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->mins, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1557
 *     def get_new_id(self):
 *         return self.new_id
 *     def get_mins(self):             # <<<<<<<<<<<<<<
 *         return self.mins
 *     def total_mass(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.get_mins", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1559
 *     def get_mins(self):
 *         return self.mins
 *     def total_mass(self):             # <<<<<<<<<<<<<<
 *         return self._total_mass()
 *     def total_minion_mass(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_35total_mass(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_35total_mass(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("total_mass (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_34total_mass(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_34total_mass(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("total_mass", 0);
  __Pyx_TraceCall("total_mass", __pyx_f[1], 1559, 0, __PYX_ERR(1, 1559, __pyx_L1_error));

  /* "world_cy.pyx":1560
 *         return self.mins
 *     def total_mass(self):
 *         return self._total_mass()             # <<<<<<<<<<<<<<
 *     def total_minion_mass(self):
 *         return self._total_minion_mass()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->_total_mass(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1559
 *     def get_mins(self):
 *         return self.mins
 *     def total_mass(self):             # <<<<<<<<<<<<<<
 *         return self._total_mass()
 *     def total_minion_mass(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.total_mass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1561
 *     def total_mass(self):
 *         return self._total_mass()
 *     def total_minion_mass(self):             # <<<<<<<<<<<<<<
 *         return self._total_minion_mass()
 *     def total_min(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_37total_minion_mass(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_37total_minion_mass(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("total_minion_mass (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_36total_minion_mass(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_36total_minion_mass(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("total_minion_mass", 0);
  __Pyx_TraceCall("total_minion_mass", __pyx_f[1], 1561, 0, __PYX_ERR(1, 1561, __pyx_L1_error));

  /* "world_cy.pyx":1562
 *         return self._total_mass()
 *     def total_minion_mass(self):
 *         return self._total_minion_mass()             # <<<<<<<<<<<<<<
 *     def total_min(self):
 *         return self._total_min()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->_total_minion_mass(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1561
 *     def total_mass(self):
 *         return self._total_mass()
 *     def total_minion_mass(self):             # <<<<<<<<<<<<<<
 *         return self._total_minion_mass()
 *     def total_min(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.total_minion_mass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1563
 *     def total_minion_mass(self):
 *         return self._total_minion_mass()
 *     def total_min(self):             # <<<<<<<<<<<<<<
 *         return self._total_min()
 *     #end conditions
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_39total_min(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_39total_min(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("total_min (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_38total_min(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_38total_min(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("total_min", 0);
  __Pyx_TraceCall("total_min", __pyx_f[1], 1563, 0, __PYX_ERR(1, 1563, __pyx_L1_error));

  /* "world_cy.pyx":1564
 *         return self._total_minion_mass()
 *     def total_min(self):
 *         return self._total_min()             # <<<<<<<<<<<<<<
 *     #end conditions
 *     def limit(self,n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->_total_min(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1563
 *     def total_minion_mass(self):
 *         return self._total_minion_mass()
 *     def total_min(self):             # <<<<<<<<<<<<<<
 *         return self._total_min()
 *     #end conditions
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.total_min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1566
 *         return self._total_min()
 *     #end conditions
 *     def limit(self,n):             # <<<<<<<<<<<<<<
 *         return self.moment>=n
 *     def exhausted(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_41limit(PyObject *__pyx_v_self, PyObject *__pyx_v_n); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_41limit(PyObject *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("limit (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_40limit(((struct __pyx_obj_8world_cy_World *)__pyx_v_self), ((PyObject *)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_40limit(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("limit", 0);
  __Pyx_TraceCall("limit", __pyx_f[1], 1566, 0, __PYX_ERR(1, 1566, __pyx_L1_error));

  /* "world_cy.pyx":1567
 *     #end conditions
 *     def limit(self,n):
 *         return self.moment>=n             # <<<<<<<<<<<<<<
 *     def exhausted(self):
 *         return self._exhausted()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->moment); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_n, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1567, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1566
 *         return self._total_min()
 *     #end conditions
 *     def limit(self,n):             # <<<<<<<<<<<<<<
 *         return self.moment>=n
 *     def exhausted(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("world_cy.World.limit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1568
 *     def limit(self,n):
 *         return self.moment>=n
 *     def exhausted(self):             # <<<<<<<<<<<<<<
 *         return self._exhausted()
 *     def extincted(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_43exhausted(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_43exhausted(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exhausted (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_42exhausted(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_42exhausted(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("exhausted", 0);
  __Pyx_TraceCall("exhausted", __pyx_f[1], 1568, 0, __PYX_ERR(1, 1568, __pyx_L1_error));

  /* "world_cy.pyx":1569
 *         return self.moment>=n
 *     def exhausted(self):
 *         return self._exhausted()             # <<<<<<<<<<<<<<
 *     def extincted(self):
 *         return self.mis.is_empty()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->_exhausted(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1568
 *     def limit(self,n):
 *         return self.moment>=n
 *     def exhausted(self):             # <<<<<<<<<<<<<<
 *         return self._exhausted()
 *     def extincted(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.exhausted", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1570
 *     def exhausted(self):
 *         return self._exhausted()
 *     def extincted(self):             # <<<<<<<<<<<<<<
 *         return self.mis.is_empty()
 *     #measurements
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_45extincted(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_45extincted(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extincted (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_44extincted(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_44extincted(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("extincted", 0);
  __Pyx_TraceCall("extincted", __pyx_f[1], 1570, 0, __PYX_ERR(1, 1570, __pyx_L1_error));

  /* "world_cy.pyx":1571
 *         return self._exhausted()
 *     def extincted(self):
 *         return self.mis.is_empty()             # <<<<<<<<<<<<<<
 *     #measurements
 *     def get_pedigree(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->mis), __pyx_n_s_is_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1570
 *     def exhausted(self):
 *         return self._exhausted()
 *     def extincted(self):             # <<<<<<<<<<<<<<
 *         return self.mis.is_empty()
 *     #measurements
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("world_cy.World.extincted", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1573
 *         return self.mis.is_empty()
 *     #measurements
 *     def get_pedigree(self):             # <<<<<<<<<<<<<<
 *         return list(self.pedigree)
 *     def sample_dna(self,n):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_47get_pedigree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_47get_pedigree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_pedigree (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_46get_pedigree(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_46get_pedigree(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_pedigree", 0);
  __Pyx_TraceCall("get_pedigree", __pyx_f[1], 1573, 0, __PYX_ERR(1, 1573, __pyx_L1_error));

  /* "world_cy.pyx":1574
 *     #measurements
 *     def get_pedigree(self):
 *         return list(self.pedigree)             # <<<<<<<<<<<<<<
 *     def sample_dna(self,n):
 *         if n>=self.mis.len:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py___pyx_ctuple_int__and_int__and_int(__pyx_v_self->pedigree); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1573
 *         return self.mis.is_empty()
 *     #measurements
 *     def get_pedigree(self):             # <<<<<<<<<<<<<<
 *         return list(self.pedigree)
 *     def sample_dna(self,n):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("world_cy.World.get_pedigree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1575
 *     def get_pedigree(self):
 *         return list(self.pedigree)
 *     def sample_dna(self,n):             # <<<<<<<<<<<<<<
 *         if n>=self.mis.len:
 *             subpopulation=sample(list(self.mis),n)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_49sample_dna(PyObject *__pyx_v_self, PyObject *__pyx_v_n); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_49sample_dna(PyObject *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sample_dna (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_48sample_dna(((struct __pyx_obj_8world_cy_World *)__pyx_v_self), ((PyObject *)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_48sample_dna(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_v_subpopulation = NULL;
  PyObject *__pyx_v_dnas = NULL;
  PyObject *__pyx_v_mi = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("sample_dna", 0);
  __Pyx_TraceCall("sample_dna", __pyx_f[1], 1575, 0, __PYX_ERR(1, 1575, __pyx_L1_error));

  /* "world_cy.pyx":1576
 *         return list(self.pedigree)
 *     def sample_dna(self,n):
 *         if n>=self.mis.len:             # <<<<<<<<<<<<<<
 *             subpopulation=sample(list(self.mis),n)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->mis->len); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_n, __pyx_t_1, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 1576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "world_cy.pyx":1577
 *     def sample_dna(self,n):
 *         if n>=self.mis.len:
 *             subpopulation=sample(list(self.mis),n)             # <<<<<<<<<<<<<<
 *         else:
 *             subpopulation=list(self.mis)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sample); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PySequence_List(((PyObject *)__pyx_v_self->mis)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_4, __pyx_v_n};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1577, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_4, __pyx_v_n};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1577, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_4);
      __Pyx_INCREF(__pyx_v_n);
      __Pyx_GIVEREF(__pyx_v_n);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_n);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_subpopulation = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "world_cy.pyx":1576
 *         return list(self.pedigree)
 *     def sample_dna(self,n):
 *         if n>=self.mis.len:             # <<<<<<<<<<<<<<
 *             subpopulation=sample(list(self.mis),n)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "world_cy.pyx":1579
 *             subpopulation=sample(list(self.mis),n)
 *         else:
 *             subpopulation=list(self.mis)             # <<<<<<<<<<<<<<
 *         dnas=[]
 *         for mi in subpopulation:
 */
  /*else*/ {
    __pyx_t_2 = PySequence_List(((PyObject *)__pyx_v_self->mis)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_subpopulation = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "world_cy.pyx":1580
 *         else:
 *             subpopulation=list(self.mis)
 *         dnas=[]             # <<<<<<<<<<<<<<
 *         for mi in subpopulation:
 *             dnas.append(mi.get_dna())
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_dnas = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "world_cy.pyx":1581
 *             subpopulation=list(self.mis)
 *         dnas=[]
 *         for mi in subpopulation:             # <<<<<<<<<<<<<<
 *             dnas.append(mi.get_dna())
 *         return dnas
 */
  if (likely(PyList_CheckExact(__pyx_v_subpopulation)) || PyTuple_CheckExact(__pyx_v_subpopulation)) {
    __pyx_t_2 = __pyx_v_subpopulation; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_subpopulation); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1581, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 1581, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1581, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 1581, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1581, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_9(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1581, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_mi, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "world_cy.pyx":1582
 *         dnas=[]
 *         for mi in subpopulation:
 *             dnas.append(mi.get_dna())             # <<<<<<<<<<<<<<
 *         return dnas
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_mi, __pyx_n_s_get_dna); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_dnas, __pyx_t_1); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 1582, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "world_cy.pyx":1581
 *             subpopulation=list(self.mis)
 *         dnas=[]
 *         for mi in subpopulation:             # <<<<<<<<<<<<<<
 *             dnas.append(mi.get_dna())
 *         return dnas
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":1583
 *         for mi in subpopulation:
 *             dnas.append(mi.get_dna())
 *         return dnas             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_dnas);
  __pyx_r = __pyx_v_dnas;
  goto __pyx_L0;

  /* "world_cy.pyx":1575
 *     def get_pedigree(self):
 *         return list(self.pedigree)
 *     def sample_dna(self,n):             # <<<<<<<<<<<<<<
 *         if n>=self.mis.len:
 *             subpopulation=sample(list(self.mis),n)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("world_cy.World.sample_dna", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_subpopulation);
  __Pyx_XDECREF(__pyx_v_dnas);
  __Pyx_XDECREF(__pyx_v_mi);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1586
 * 
 * 
 *     def get_mis(self):             # <<<<<<<<<<<<<<
 *         return list(self.mis)
 *     def get_nth_mi(self,n):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_51get_mis(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_51get_mis(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mis (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_50get_mis(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_50get_mis(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_mis", 0);
  __Pyx_TraceCall("get_mis", __pyx_f[1], 1586, 0, __PYX_ERR(1, 1586, __pyx_L1_error));

  /* "world_cy.pyx":1587
 * 
 *     def get_mis(self):
 *         return list(self.mis)             # <<<<<<<<<<<<<<
 *     def get_nth_mi(self,n):
 *         return self.mis.get_nth_py(n)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PySequence_List(((PyObject *)__pyx_v_self->mis)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1586
 * 
 * 
 *     def get_mis(self):             # <<<<<<<<<<<<<<
 *         return list(self.mis)
 *     def get_nth_mi(self,n):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.get_mis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1588
 *     def get_mis(self):
 *         return list(self.mis)
 *     def get_nth_mi(self,n):             # <<<<<<<<<<<<<<
 *         return self.mis.get_nth_py(n)
 *     def get_population(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_53get_nth_mi(PyObject *__pyx_v_self, PyObject *__pyx_v_n); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_53get_nth_mi(PyObject *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_nth_mi (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_52get_nth_mi(((struct __pyx_obj_8world_cy_World *)__pyx_v_self), ((PyObject *)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_52get_nth_mi(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_nth_mi", 0);
  __Pyx_TraceCall("get_nth_mi", __pyx_f[1], 1588, 0, __PYX_ERR(1, 1588, __pyx_L1_error));

  /* "world_cy.pyx":1589
 *         return list(self.mis)
 *     def get_nth_mi(self,n):
 *         return self.mis.get_nth_py(n)             # <<<<<<<<<<<<<<
 *     def get_population(self):
 *         return self.mis.len
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->mis), __pyx_n_s_get_nth_py); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_n) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_n);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1588
 *     def get_mis(self):
 *         return list(self.mis)
 *     def get_nth_mi(self,n):             # <<<<<<<<<<<<<<
 *         return self.mis.get_nth_py(n)
 *     def get_population(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("world_cy.World.get_nth_mi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1590
 *     def get_nth_mi(self,n):
 *         return self.mis.get_nth_py(n)
 *     def get_population(self):             # <<<<<<<<<<<<<<
 *         return self.mis.len
 *     def get_colors(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_55get_population(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_55get_population(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_population (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_54get_population(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_54get_population(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_population", 0);
  __Pyx_TraceCall("get_population", __pyx_f[1], 1590, 0, __PYX_ERR(1, 1590, __pyx_L1_error));

  /* "world_cy.pyx":1591
 *         return self.mis.get_nth_py(n)
 *     def get_population(self):
 *         return self.mis.len             # <<<<<<<<<<<<<<
 *     def get_colors(self):
 *         for mi in self.mis:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->mis->len); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1590
 *     def get_nth_mi(self,n):
 *         return self.mis.get_nth_py(n)
 *     def get_population(self):             # <<<<<<<<<<<<<<
 *         return self.mis.len
 *     def get_colors(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.get_population", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8world_cy_5World_58generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "world_cy.pyx":1592
 *     def get_population(self):
 *         return self.mis.len
 *     def get_colors(self):             # <<<<<<<<<<<<<<
 *         for mi in self.mis:
 *             yield mi.color
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_57get_colors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_57get_colors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_colors (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_56get_colors(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_56get_colors(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_colors", 0);
  __pyx_cur_scope = (struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors *)__pyx_tp_new_8world_cy___pyx_scope_struct_1_get_colors(__pyx_ptype_8world_cy___pyx_scope_struct_1_get_colors, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 1592, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_8world_cy_5World_58generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_get_colors, __pyx_n_s_World_get_colors, __pyx_n_s_world_cy); if (unlikely(!gen)) __PYX_ERR(1, 1592, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.World.get_colors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8world_cy_5World_58generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors *__pyx_cur_scope = ((struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_colors", 0);
  __Pyx_TraceCall("get_colors", __pyx_f[1], 1592, 0, __PYX_ERR(1, 1592, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 1592, __pyx_L1_error)

  /* "world_cy.pyx":1593
 *         return self.mis.len
 *     def get_colors(self):
 *         for mi in self.mis:             # <<<<<<<<<<<<<<
 *             yield mi.color
 *     def get_avg_r(self):
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_v_self->mis))) || PyTuple_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_v_self->mis))) {
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_v_self->mis); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_cur_scope->__pyx_v_self->mis)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1593, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1593, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1593, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1593, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1593, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1593, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_mi);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_mi, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "world_cy.pyx":1594
 *     def get_colors(self):
 *         for mi in self.mis:
 *             yield mi.color             # <<<<<<<<<<<<<<
 *     def get_avg_r(self):
 *         return self._get_avg_r()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_mi, __pyx_n_s_color_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_TraceReturn(__pyx_r, 0);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 1594, __pyx_L1_error)

    /* "world_cy.pyx":1593
 *         return self.mis.len
 *     def get_colors(self):
 *         for mi in self.mis:             # <<<<<<<<<<<<<<
 *             yield mi.color
 *     def get_avg_r(self):
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "world_cy.pyx":1592
 *     def get_population(self):
 *         return self.mis.len
 *     def get_colors(self):             # <<<<<<<<<<<<<<
 *         for mi in self.mis:
 *             yield mi.color
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("get_colors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1595
 *         for mi in self.mis:
 *             yield mi.color
 *     def get_avg_r(self):             # <<<<<<<<<<<<<<
 *         return self._get_avg_r()
 *     def get_avg_g(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_60get_avg_r(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_60get_avg_r(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_avg_r (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_59get_avg_r(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_59get_avg_r(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_avg_r", 0);
  __Pyx_TraceCall("get_avg_r", __pyx_f[1], 1595, 0, __PYX_ERR(1, 1595, __pyx_L1_error));

  /* "world_cy.pyx":1596
 *             yield mi.color
 *     def get_avg_r(self):
 *         return self._get_avg_r()             # <<<<<<<<<<<<<<
 *     def get_avg_g(self):
 *         return self._get_avg_g()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->_get_avg_r(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1595
 *         for mi in self.mis:
 *             yield mi.color
 *     def get_avg_r(self):             # <<<<<<<<<<<<<<
 *         return self._get_avg_r()
 *     def get_avg_g(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.get_avg_r", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1597
 *     def get_avg_r(self):
 *         return self._get_avg_r()
 *     def get_avg_g(self):             # <<<<<<<<<<<<<<
 *         return self._get_avg_g()
 *     def get_avg_b(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_62get_avg_g(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_62get_avg_g(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_avg_g (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_61get_avg_g(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_61get_avg_g(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_avg_g", 0);
  __Pyx_TraceCall("get_avg_g", __pyx_f[1], 1597, 0, __PYX_ERR(1, 1597, __pyx_L1_error));

  /* "world_cy.pyx":1598
 *         return self._get_avg_r()
 *     def get_avg_g(self):
 *         return self._get_avg_g()             # <<<<<<<<<<<<<<
 *     def get_avg_b(self):
 *         return self._get_avg_b()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->_get_avg_g(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1597
 *     def get_avg_r(self):
 *         return self._get_avg_r()
 *     def get_avg_g(self):             # <<<<<<<<<<<<<<
 *         return self._get_avg_g()
 *     def get_avg_b(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.get_avg_g", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1599
 *     def get_avg_g(self):
 *         return self._get_avg_g()
 *     def get_avg_b(self):             # <<<<<<<<<<<<<<
 *         return self._get_avg_b()
 *     def get_messiness(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_64get_avg_b(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_64get_avg_b(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_avg_b (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_63get_avg_b(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_63get_avg_b(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_avg_b", 0);
  __Pyx_TraceCall("get_avg_b", __pyx_f[1], 1599, 0, __PYX_ERR(1, 1599, __pyx_L1_error));

  /* "world_cy.pyx":1600
 *         return self._get_avg_g()
 *     def get_avg_b(self):
 *         return self._get_avg_b()             # <<<<<<<<<<<<<<
 *     def get_messiness(self):
 *         return self.messiness
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_8world_cy_World *)__pyx_v_self->__pyx_vtab)->_get_avg_b(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1599
 *     def get_avg_g(self):
 *         return self._get_avg_g()
 *     def get_avg_b(self):             # <<<<<<<<<<<<<<
 *         return self._get_avg_b()
 *     def get_messiness(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.get_avg_b", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "world_cy.pyx":1601
 *     def get_avg_b(self):
 *         return self._get_avg_b()
 *     def get_messiness(self):             # <<<<<<<<<<<<<<
 *         return self.messiness
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_66get_messiness(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_66get_messiness(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_messiness (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_65get_messiness(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_65get_messiness(struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_messiness", 0);
  __Pyx_TraceCall("get_messiness", __pyx_f[1], 1601, 0, __PYX_ERR(1, 1601, __pyx_L1_error));

  /* "world_cy.pyx":1602
 *         return self._get_avg_b()
 *     def get_messiness(self):
 *         return self.messiness             # <<<<<<<<<<<<<<
 * 
 *     #for use in visualization
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->messiness); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "world_cy.pyx":1601
 *     def get_avg_b(self):
 *         return self._get_avg_b()
 *     def get_messiness(self):             # <<<<<<<<<<<<<<
 *         return self.messiness
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.get_messiness", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8world_cy_5World_69generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "world_cy.pyx":1605
 * 
 *     #for use in visualization
 *     def body_rect(self,k):             # <<<<<<<<<<<<<<
 *         #called in: play.py
 *         for mi in self.mis:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_68body_rect(PyObject *__pyx_v_self, PyObject *__pyx_v_k); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_68body_rect(PyObject *__pyx_v_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("body_rect (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_67body_rect(((struct __pyx_obj_8world_cy_World *)__pyx_v_self), ((PyObject *)__pyx_v_k));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_67body_rect(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_k) {
  struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("body_rect", 0);
  __pyx_cur_scope = (struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect *)__pyx_tp_new_8world_cy___pyx_scope_struct_2_body_rect(__pyx_ptype_8world_cy___pyx_scope_struct_2_body_rect, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 1605, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_k = __pyx_v_k;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_k);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_k);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_8world_cy_5World_69generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_body_rect, __pyx_n_s_World_body_rect, __pyx_n_s_world_cy); if (unlikely(!gen)) __PYX_ERR(1, 1605, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.World.body_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8world_cy_5World_69generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect *__pyx_cur_scope = ((struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("body_rect", 0);
  __Pyx_TraceCall("body_rect", __pyx_f[1], 1605, 0, __PYX_ERR(1, 1605, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 1605, __pyx_L1_error)

  /* "world_cy.pyx":1607
 *     def body_rect(self,k):
 *         #called in: play.py
 *         for mi in self.mis:             # <<<<<<<<<<<<<<
 *             x,y=mi.get_pos()
 *             alen=mi.get_alen()
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_v_self->mis))) || PyTuple_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_v_self->mis))) {
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_v_self->mis); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_cur_scope->__pyx_v_self->mis)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1607, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1607, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1607, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1607, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1607, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1607, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_mi);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_mi, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "world_cy.pyx":1608
 *         #called in: play.py
 *         for mi in self.mis:
 *             x,y=mi.get_pos()             # <<<<<<<<<<<<<<
 *             alen=mi.get_alen()
 *             yield mi.get_color(),(k*(x-alen),k*(y-alen),k*(1+2*alen),k*(1+2*alen))
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_mi, __pyx_n_s_get_pos); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 1608, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(1, 1608, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 1608, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_x);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_x, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_y);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_y, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "world_cy.pyx":1609
 *         for mi in self.mis:
 *             x,y=mi.get_pos()
 *             alen=mi.get_alen()             # <<<<<<<<<<<<<<
 *             yield mi.get_color(),(k*(x-alen),k*(y-alen),k*(1+2*alen),k*(1+2*alen))
 *     def geni_rect(self,k):
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_mi, __pyx_n_s_get_alen); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_alen);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_alen, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "world_cy.pyx":1610
 *             x,y=mi.get_pos()
 *             alen=mi.get_alen()
 *             yield mi.get_color(),(k*(x-alen),k*(y-alen),k*(1+2*alen),k*(1+2*alen))             # <<<<<<<<<<<<<<
 *     def geni_rect(self,k):
 *         #called in: play.py
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_mi, __pyx_n_s_get_color); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_x, __pyx_cur_scope->__pyx_v_alen); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_k, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_y, __pyx_cur_scope->__pyx_v_alen); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_k, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Multiply(__pyx_int_2, __pyx_cur_scope->__pyx_v_alen); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_6, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_k, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Multiply(__pyx_int_2, __pyx_cur_scope->__pyx_v_alen); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_9, 1, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_k, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
    __pyx_t_5 = 0;
    __pyx_t_7 = 0;
    __pyx_t_6 = 0;
    __pyx_t_9 = 0;
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
    __pyx_t_4 = 0;
    __pyx_t_10 = 0;
    __pyx_r = __pyx_t_9;
    __pyx_t_9 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_TraceReturn(__pyx_r, 0);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L8_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 1610, __pyx_L1_error)

    /* "world_cy.pyx":1607
 *     def body_rect(self,k):
 *         #called in: play.py
 *         for mi in self.mis:             # <<<<<<<<<<<<<<
 *             x,y=mi.get_pos()
 *             alen=mi.get_alen()
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "world_cy.pyx":1605
 * 
 *     #for use in visualization
 *     def body_rect(self,k):             # <<<<<<<<<<<<<<
 *         #called in: play.py
 *         for mi in self.mis:
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("body_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8world_cy_5World_72generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "world_cy.pyx":1611
 *             alen=mi.get_alen()
 *             yield mi.get_color(),(k*(x-alen),k*(y-alen),k*(1+2*alen),k*(1+2*alen))
 *     def geni_rect(self,k):             # <<<<<<<<<<<<<<
 *         #called in: play.py
 *         for mi in self.mis:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_71geni_rect(PyObject *__pyx_v_self, PyObject *__pyx_v_k); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_71geni_rect(PyObject *__pyx_v_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("geni_rect (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_70geni_rect(((struct __pyx_obj_8world_cy_World *)__pyx_v_self), ((PyObject *)__pyx_v_k));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_70geni_rect(struct __pyx_obj_8world_cy_World *__pyx_v_self, PyObject *__pyx_v_k) {
  struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("geni_rect", 0);
  __pyx_cur_scope = (struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect *)__pyx_tp_new_8world_cy___pyx_scope_struct_3_geni_rect(__pyx_ptype_8world_cy___pyx_scope_struct_3_geni_rect, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 1611, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_k = __pyx_v_k;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_k);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_k);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_8world_cy_5World_72generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_geni_rect, __pyx_n_s_World_geni_rect, __pyx_n_s_world_cy); if (unlikely(!gen)) __PYX_ERR(1, 1611, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("world_cy.World.geni_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8world_cy_5World_72generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect *__pyx_cur_scope = ((struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("geni_rect", 0);
  __Pyx_TraceCall("geni_rect", __pyx_f[1], 1611, 0, __PYX_ERR(1, 1611, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L10_resume_from_yield;
    case 2: goto __pyx_L11_resume_from_yield;
    case 3: goto __pyx_L12_resume_from_yield;
    case 4: goto __pyx_L13_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 1611, __pyx_L1_error)

  /* "world_cy.pyx":1613
 *     def geni_rect(self,k):
 *         #called in: play.py
 *         for mi in self.mis:             # <<<<<<<<<<<<<<
 *             if mi.get_action()==1:
 *                 x,y=mi.get_pos()
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_v_self->mis))) || PyTuple_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_v_self->mis))) {
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_v_self->mis); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_cur_scope->__pyx_v_self->mis)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1613, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1613, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1613, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1613, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1613, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1613, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1613, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_mi);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_mi, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "world_cy.pyx":1614
 *         #called in: play.py
 *         for mi in self.mis:
 *             if mi.get_action()==1:             # <<<<<<<<<<<<<<
 *                 x,y=mi.get_pos()
 *                 alen=mi.get_alen()
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_mi, __pyx_n_s_get_action); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_4, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 1614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_7) {

      /* "world_cy.pyx":1615
 *         for mi in self.mis:
 *             if mi.get_action()==1:
 *                 x,y=mi.get_pos()             # <<<<<<<<<<<<<<
 *                 alen=mi.get_alen()
 *                 color=mi.get_color()
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_mi, __pyx_n_s_get_pos); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
        PyObject* sequence = __pyx_t_5;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(1, 1615, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1615, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1615, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_8 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1615, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
        index = 0; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(1, 1615, __pyx_L1_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L8_unpacking_done;
        __pyx_L7_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(1, 1615, __pyx_L1_error)
        __pyx_L8_unpacking_done:;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_x);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_x, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_y);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_y, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;

      /* "world_cy.pyx":1616
 *             if mi.get_action()==1:
 *                 x,y=mi.get_pos()
 *                 alen=mi.get_alen()             # <<<<<<<<<<<<<<
 *                 color=mi.get_color()
 *                 move_direc=mi.get_move_direc()
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_mi, __pyx_n_s_get_alen); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_alen);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_alen, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;

      /* "world_cy.pyx":1617
 *                 x,y=mi.get_pos()
 *                 alen=mi.get_alen()
 *                 color=mi.get_color()             # <<<<<<<<<<<<<<
 *                 move_direc=mi.get_move_direc()
 *                 if move_direc==0:
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_mi, __pyx_n_s_get_color); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_color);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_color, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;

      /* "world_cy.pyx":1618
 *                 alen=mi.get_alen()
 *                 color=mi.get_color()
 *                 move_direc=mi.get_move_direc()             # <<<<<<<<<<<<<<
 *                 if move_direc==0:
 *                     yield color,(k*x,k*y,k*(1+2*alen),k)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_mi, __pyx_n_s_get_move_direc); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1618, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1618, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_move_direc);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_move_direc, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;

      /* "world_cy.pyx":1619
 *                 color=mi.get_color()
 *                 move_direc=mi.get_move_direc()
 *                 if move_direc==0:             # <<<<<<<<<<<<<<
 *                     yield color,(k*x,k*y,k*(1+2*alen),k)
 *                 elif move_direc==1:
 */
      __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_cur_scope->__pyx_v_move_direc, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1619, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 1619, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_7) {

        /* "world_cy.pyx":1620
 *                 move_direc=mi.get_move_direc()
 *                 if move_direc==0:
 *                     yield color,(k*x,k*y,k*(1+2*alen),k)             # <<<<<<<<<<<<<<
 *                 elif move_direc==1:
 *                     yield color,(k*x,k*y,k,k*(1+2*alen))
 */
        __pyx_t_5 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_k, __pyx_cur_scope->__pyx_v_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1620, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_k, __pyx_cur_scope->__pyx_v_y); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1620, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_4 = PyNumber_Multiply(__pyx_int_2, __pyx_cur_scope->__pyx_v_alen); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1620, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_4, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1620, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_k, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1620, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1620, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_4);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_k);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_k);
        PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_cur_scope->__pyx_v_k);
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;
        __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1620, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_color);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_color);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_cur_scope->__pyx_v_color);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_r = __pyx_t_4;
        __pyx_t_4 = 0;
        __Pyx_XGIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_TraceReturn(__pyx_r, 0);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L10_resume_from_yield:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_1);
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 1620, __pyx_L1_error)

        /* "world_cy.pyx":1619
 *                 color=mi.get_color()
 *                 move_direc=mi.get_move_direc()
 *                 if move_direc==0:             # <<<<<<<<<<<<<<
 *                     yield color,(k*x,k*y,k*(1+2*alen),k)
 *                 elif move_direc==1:
 */
        goto __pyx_L9;
      }

      /* "world_cy.pyx":1621
 *                 if move_direc==0:
 *                     yield color,(k*x,k*y,k*(1+2*alen),k)
 *                 elif move_direc==1:             # <<<<<<<<<<<<<<
 *                     yield color,(k*x,k*y,k,k*(1+2*alen))
 *                 elif move_direc==2:
 */
      __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_cur_scope->__pyx_v_move_direc, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1621, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 1621, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_7) {

        /* "world_cy.pyx":1622
 *                     yield color,(k*x,k*y,k*(1+2*alen),k)
 *                 elif move_direc==1:
 *                     yield color,(k*x,k*y,k,k*(1+2*alen))             # <<<<<<<<<<<<<<
 *                 elif move_direc==2:
 *                     yield color,(k*x+k-1,k*y,-k*(1+2*alen),k)
 */
        __pyx_t_4 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_k, __pyx_cur_scope->__pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1622, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_k, __pyx_cur_scope->__pyx_v_y); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1622, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = PyNumber_Multiply(__pyx_int_2, __pyx_cur_scope->__pyx_v_alen); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1622, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_6, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1622, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_k, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1622, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1622, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_8);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_k);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_k);
        PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_cur_scope->__pyx_v_k);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_6);
        __pyx_t_4 = 0;
        __pyx_t_8 = 0;
        __pyx_t_6 = 0;
        __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1622, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_color);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_color);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_cur_scope->__pyx_v_color);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_r = __pyx_t_6;
        __pyx_t_6 = 0;
        __Pyx_XGIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_TraceReturn(__pyx_r, 0);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 2;
        return __pyx_r;
        __pyx_L11_resume_from_yield:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_1);
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 1622, __pyx_L1_error)

        /* "world_cy.pyx":1621
 *                 if move_direc==0:
 *                     yield color,(k*x,k*y,k*(1+2*alen),k)
 *                 elif move_direc==1:             # <<<<<<<<<<<<<<
 *                     yield color,(k*x,k*y,k,k*(1+2*alen))
 *                 elif move_direc==2:
 */
        goto __pyx_L9;
      }

      /* "world_cy.pyx":1623
 *                 elif move_direc==1:
 *                     yield color,(k*x,k*y,k,k*(1+2*alen))
 *                 elif move_direc==2:             # <<<<<<<<<<<<<<
 *                     yield color,(k*x+k-1,k*y,-k*(1+2*alen),k)
 *                 elif move_direc==3:
 */
      __pyx_t_6 = __Pyx_PyInt_EqObjC(__pyx_cur_scope->__pyx_v_move_direc, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 1623, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_7) {

        /* "world_cy.pyx":1624
 *                     yield color,(k*x,k*y,k,k*(1+2*alen))
 *                 elif move_direc==2:
 *                     yield color,(k*x+k-1,k*y,-k*(1+2*alen),k)             # <<<<<<<<<<<<<<
 *                 elif move_direc==3:
 *                     yield color,(k*x,k*y+k-1,k,-k*(1+2*alen))
 */
        __pyx_t_6 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_k, __pyx_cur_scope->__pyx_v_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = PyNumber_Add(__pyx_t_6, __pyx_cur_scope->__pyx_v_k); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_k, __pyx_cur_scope->__pyx_v_y); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = PyNumber_Negative(__pyx_cur_scope->__pyx_v_k); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = PyNumber_Multiply(__pyx_int_2, __pyx_cur_scope->__pyx_v_alen); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_4, 1, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_Multiply(__pyx_t_8, __pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_4);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_k);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_k);
        PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_cur_scope->__pyx_v_k);
        __pyx_t_6 = 0;
        __pyx_t_5 = 0;
        __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_color);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_color);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_cur_scope->__pyx_v_color);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_r = __pyx_t_4;
        __pyx_t_4 = 0;
        __Pyx_XGIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_TraceReturn(__pyx_r, 0);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 3;
        return __pyx_r;
        __pyx_L12_resume_from_yield:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_1);
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 1624, __pyx_L1_error)

        /* "world_cy.pyx":1623
 *                 elif move_direc==1:
 *                     yield color,(k*x,k*y,k,k*(1+2*alen))
 *                 elif move_direc==2:             # <<<<<<<<<<<<<<
 *                     yield color,(k*x+k-1,k*y,-k*(1+2*alen),k)
 *                 elif move_direc==3:
 */
        goto __pyx_L9;
      }

      /* "world_cy.pyx":1625
 *                 elif move_direc==2:
 *                     yield color,(k*x+k-1,k*y,-k*(1+2*alen),k)
 *                 elif move_direc==3:             # <<<<<<<<<<<<<<
 *                     yield color,(k*x,k*y+k-1,k,-k*(1+2*alen))
 */
      __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_cur_scope->__pyx_v_move_direc, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1625, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 1625, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_7) {

        /* "world_cy.pyx":1626
 *                     yield color,(k*x+k-1,k*y,-k*(1+2*alen),k)
 *                 elif move_direc==3:
 *                     yield color,(k*x,k*y+k-1,k,-k*(1+2*alen))             # <<<<<<<<<<<<<<
 */
        __pyx_t_4 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_k, __pyx_cur_scope->__pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1626, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_k, __pyx_cur_scope->__pyx_v_y); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1626, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_5 = PyNumber_Add(__pyx_t_10, __pyx_cur_scope->__pyx_v_k); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1626, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1626, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Negative(__pyx_cur_scope->__pyx_v_k); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1626, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PyNumber_Multiply(__pyx_int_2, __pyx_cur_scope->__pyx_v_alen); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1626, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_6, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1626, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Multiply(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1626, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1626, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_10);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_k);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_k);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_cur_scope->__pyx_v_k);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_6);
        __pyx_t_4 = 0;
        __pyx_t_10 = 0;
        __pyx_t_6 = 0;
        __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1626, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_color);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_color);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_cur_scope->__pyx_v_color);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_r = __pyx_t_6;
        __pyx_t_6 = 0;
        __Pyx_XGIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_TraceReturn(__pyx_r, 0);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 4;
        return __pyx_r;
        __pyx_L13_resume_from_yield:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_1);
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 1626, __pyx_L1_error)

        /* "world_cy.pyx":1625
 *                 elif move_direc==2:
 *                     yield color,(k*x+k-1,k*y,-k*(1+2*alen),k)
 *                 elif move_direc==3:             # <<<<<<<<<<<<<<
 *                     yield color,(k*x,k*y+k-1,k,-k*(1+2*alen))
 */
      }
      __pyx_L9:;

      /* "world_cy.pyx":1614
 *         #called in: play.py
 *         for mi in self.mis:
 *             if mi.get_action()==1:             # <<<<<<<<<<<<<<
 *                 x,y=mi.get_pos()
 *                 alen=mi.get_alen()
 */
    }

    /* "world_cy.pyx":1613
 *     def geni_rect(self,k):
 *         #called in: play.py
 *         for mi in self.mis:             # <<<<<<<<<<<<<<
 *             if mi.get_action()==1:
 *                 x,y=mi.get_pos()
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "world_cy.pyx":1611
 *             alen=mi.get_alen()
 *             yield mi.get_color(),(k*(x-alen),k*(y-alen),k*(1+2*alen),k*(1+2*alen))
 *     def geni_rect(self,k):             # <<<<<<<<<<<<<<
 *         #called in: play.py
 *         for mi in self.mis:
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("geni_rect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_74__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_74__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_73__reduce_cython__(((struct __pyx_obj_8world_cy_World *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_73__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_World *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_5World_76__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8world_cy_5World_76__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8world_cy_5World_75__setstate_cython__(((struct __pyx_obj_8world_cy_World *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_5World_75__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8world_cy_World *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[0], 3, 0, __PYX_ERR(0, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("world_cy.World.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Brain(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_8world_cy_23__pyx_unpickle_Brain(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8world_cy_23__pyx_unpickle_Brain = {"__pyx_unpickle_Brain", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8world_cy_23__pyx_unpickle_Brain, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8world_cy_23__pyx_unpickle_Brain(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Brain (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Brain", 1, 3, 3, 1); __PYX_ERR(0, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Brain", 1, 3, 3, 2); __PYX_ERR(0, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Brain") < 0)) __PYX_ERR(0, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Brain", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("world_cy.__pyx_unpickle_Brain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8world_cy_22__pyx_unpickle_Brain(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8world_cy_22__pyx_unpickle_Brain(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_TraceFrameInit(__pyx_codeobj__37)
  __Pyx_RefNannySetupContext("__pyx_unpickle_Brain", 0);
  __Pyx_TraceCall("__pyx_unpickle_Brain", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x63f4f1e:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x63f4f1e = (weights))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x63f4f1e) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x63f4f1e:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x63f4f1e = (weights))" % __pyx_checksum)
 *     __pyx_result = Brain.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x63f4f1e:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x63f4f1e = (weights))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Brain.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x63, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x63f4f1e:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x63f4f1e = (weights))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x63f4f1e = (weights))" % __pyx_checksum)
 *     __pyx_result = Brain.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Brain__set_state(<Brain> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8world_cy_Brain), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x63f4f1e = (weights))" % __pyx_checksum)
 *     __pyx_result = Brain.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Brain__set_state(<Brain> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Brain.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Brain__set_state(<Brain> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Brain__set_state(Brain __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_8world_cy___pyx_unpickle_Brain__set_state(((struct __pyx_obj_8world_cy_Brain *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x63f4f1e = (weights))" % __pyx_checksum)
 *     __pyx_result = Brain.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Brain__set_state(<Brain> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Brain__set_state(<Brain> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Brain__set_state(Brain __pyx_result, tuple __pyx_state):
 *     __pyx_result.weights = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Brain(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("world_cy.__pyx_unpickle_Brain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Brain__set_state(<Brain> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Brain__set_state(Brain __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.weights = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_8world_cy___pyx_unpickle_Brain__set_state(struct __pyx_obj_8world_cy_Brain *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_memviewslice __pyx_t_2 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Brain__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_Brain__set_state", __pyx_f[0], 11, 0, __PYX_ERR(0, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Brain__set_state(Brain __pyx_result, tuple __pyx_state):
 *     __pyx_result.weights = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_2.memview)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v___pyx_result->weights, 0);
  __pyx_v___pyx_result->weights = __pyx_t_2;
  __pyx_t_2.memview = NULL;
  __pyx_t_2.data = NULL;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Brain__set_state(Brain __pyx_result, tuple __pyx_state):
 *     __pyx_result.weights = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 1) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.weights = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Brain__set_state(Brain __pyx_result, tuple __pyx_state):
 *     __pyx_result.weights = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Brain__set_state(<Brain> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Brain__set_state(Brain __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.weights = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_2, 1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("world_cy.__pyx_unpickle_Brain__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_ctuple_int__and_int__and_int")
 * cdef object __pyx_convert_vector_to_py___pyx_ctuple_int__and_int__and_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py___pyx_ctuple_int__and_int__and_int(const std::vector<__pyx_ctuple_int__and_int__and_int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_ctuple_int__and_int__and_int", 0);
  __Pyx_TraceCall("__pyx_convert_vector_to_py___pyx_ctuple_int__and_int__and_int", __pyx_f[0], 60, 0, __PYX_ERR(0, 60, __pyx_L1_error));

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py___pyx_ctuple_int__and_int__and_int")
 * cdef object __pyx_convert_vector_to_py___pyx_ctuple_int__and_int__and_int(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert__to_py___pyx_ctuple_int__and_int__and_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_ctuple_int__and_int__and_int")
 * cdef object __pyx_convert_vector_to_py___pyx_ctuple_int__and_int__and_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_ctuple_int__and_int__and_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(0, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(0, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 122, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 122, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 123, __pyx_L3_error)
    } else {

      /* "View.MemoryView":123
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 122, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(0, 122, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(0, 122, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 122, 0, __PYX_ERR(0, 122, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":129
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 129, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 129, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":130
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 133, __pyx_L1_error)

    /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 136, __pyx_L1_error)

    /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":139
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_ASCII) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ASCII);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":140
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(0, 140, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":141
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 141, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_7;

  /* "View.MemoryView":144
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":145
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 148, __pyx_L1_error)

    /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_8 = 0;
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 151, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_9;
    __pyx_v_idx = __pyx_t_8;
    __pyx_t_8 = (__pyx_t_8 + 1);

    /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":153
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(0, 153, __pyx_L1_error)

      /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":154
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 157, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":158
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":159
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 160, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "View.MemoryView":161
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":162
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":164
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(0, 164, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":166
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":169
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":170
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 170, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":174
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(0, 176, __pyx_L1_error)

      /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":179
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":180
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(0, 180, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(0, 180, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_itemsize);
      __pyx_t_9 = __pyx_t_1;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_9; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "View.MemoryView":181
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":182
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);
  __Pyx_TraceCall("__getbuffer__", __pyx_f[0], 185, 0, __PYX_ERR(0, 185, __pyx_L1_error));

  /* "View.MemoryView":186
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 187, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":188
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 189, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":190
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 192, __pyx_L1_error)

    /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":193
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":194
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":195
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":196
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":197
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":198
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":199
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":200
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":203
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":205
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":207
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);
  __Pyx_TraceCall("__dealloc__", __pyx_f[0], 211, 0, __PYX_ERR(0, 211, __pyx_L1_error));

  /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":213
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":216
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":218
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":219
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.array.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 222, 0, __PYX_ERR(0, 222, __pyx_L1_error));

  /* "View.MemoryView":223
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_memview", 0);
  __Pyx_TraceCall("get_memview", __pyx_f[0], 226, 0, __PYX_ERR(0, 226, __pyx_L1_error));

  /* "View.MemoryView":227
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":228
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);
  __Pyx_TraceCall("__len__", __pyx_f[0], 230, 0, __PYX_ERR(0, 230, __pyx_L1_error));

  /* "View.MemoryView":231
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__getattr__", 0);
  __Pyx_TraceCall("__getattr__", __pyx_f[0], 233, 0, __PYX_ERR(0, 233, __pyx_L1_error));

  /* "View.MemoryView":234
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_TraceCall("__getitem__", __pyx_f[0], 236, 0, __PYX_ERR(0, 236, __pyx_L1_error));

  /* "View.MemoryView":237
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_TraceCall("__setitem__", __pyx_f[0], 239, 0, __PYX_ERR(0, 239, __pyx_L1_error));

  /* "View.MemoryView":240
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[0], 3, 0, __PYX_ERR(0, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);
  __Pyx_TraceCall("array_cwrapper", __pyx_f[0], 244, 0, __PYX_ERR(0, 244, __pyx_L1_error));

  /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":249
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":252
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(0, 252, __pyx_L1_error)

    /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":253
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":255
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 281, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 281, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 281, 0, __PYX_ERR(0, 281, __pyx_L1_error));

  /* "View.MemoryView":282
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);
  __Pyx_TraceCall("__repr__", __pyx_f[0], 283, 0, __PYX_ERR(0, 283, __pyx_L1_error));

  /* "View.MemoryView":284
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[0], 16, 0, __PYX_ERR(0, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __Pyx_TraceCall("align_pointer", __pyx_f[0], 298, 1, __PYX_ERR(0, 298, __pyx_L1_error));

  /* "View.MemoryView":300
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":304
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":307
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":309
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.align_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(0, 345, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 345, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 345, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 345, 0, __PYX_ERR(0, 345, __pyx_L1_error));

  /* "View.MemoryView":346
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":347
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":349
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 349, __pyx_L1_error)

    /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":351
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":352
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         global __pyx_memoryview_thread_locks_used
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":356
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 */
    __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

    /* "View.MemoryView":357
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 */
    __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

    /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  }

  /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":359
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 raise MemoryError
 */
    __pyx_v_self->lock = PyThread_allocate_lock();

    /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":361
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
      PyErr_NoMemory(); __PYX_ERR(0, 361, __pyx_L1_error)

      /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    }

    /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  }

  /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":364
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":366
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L10:;

  /* "View.MemoryView":368
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":370
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  PyThread_type_lock __pyx_t_7;
  __Pyx_RefNannySetupContext("__dealloc__", 0);
  __Pyx_TraceCall("__dealloc__", __pyx_f[0], 372, 0, __PYX_ERR(0, 372, __pyx_L1_error));

  /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":374
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  __pyx_t_2 = ((((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":377
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":378
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    Py_DECREF(Py_None);

    /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":383
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":385
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":388
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_7 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":387
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_6;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_7;

          /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":389
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":391
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.memoryview.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);
  __Pyx_TraceCall("get_item_pointer", __pyx_f[0], 393, 0, __PYX_ERR(0, 393, __pyx_L1_error));

  /* "View.MemoryView":395
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 397, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 397, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 397, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 397, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":398
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 398, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(0, 398, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":400
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_TraceCall("__getitem__", __pyx_f[0], 403, 0, __PYX_ERR(0, 403, __pyx_L1_error));

  /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":405
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":407
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 407, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 407, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 410, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":411
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":413
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(0, 413, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":414
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_TraceCall("__setitem__", __pyx_f[0], 416, 0, __PYX_ERR(0, 416, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.readonly != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 418, __pyx_L1_error)

    /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":420
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 420, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 420, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 422, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":423
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 424, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":425
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":427
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_memoryview_type))))) __PYX_ERR(0, 427, __pyx_L1_error)
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_4), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":429
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_TraceCall("is_slice", __pyx_f[0], 431, 0, __PYX_ERR(0, 431, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":435
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 435, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":436
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(0, 436, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":437
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":439
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);
  __Pyx_TraceCall("setitem_slice_assignment", __pyx_f[0], 441, 0, __PYX_ERR(0, 441, __pyx_L1_error));

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(0, 445, __pyx_L1_error)

  /* "View.MemoryView":446
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(0, 446, __pyx_L1_error)

  /* "View.MemoryView":447
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_4 = __pyx_memoryview_copy_contents((__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice))[0]), (__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice))[0]), __pyx_t_2, __pyx_t_3, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 445, __pyx_L1_error)

  /* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);
  __Pyx_TraceCall("setitem_slice_assign_scalar", __pyx_f[0], 449, 0, __PYX_ERR(0, 449, __pyx_L1_error));

  /* "View.MemoryView":451
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":456
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_v_dst_slice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice));

  /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_1 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":459
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":461
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(0, 461, __pyx_L1_error)

      /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":462
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":464
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":466
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":468
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":470
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 470, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_1 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":475
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_2 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 475, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":476
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":479
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __pyx_t_3 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_5 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ErrRestore(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_5;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);
  __Pyx_TraceCall("setitem_indexed", __pyx_f[0], 481, 0, __PYX_ERR(0, 481, __pyx_L1_error));

  /* "View.MemoryView":482
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(0, 482, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":483
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);
  __Pyx_TraceCall("convert_item_to_object", __pyx_f[0], 485, 0, __PYX_ERR(0, 485, __pyx_L1_error));

  /* "View.MemoryView":488
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":491
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":493
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 493, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 493, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 493, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":498
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":499
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "View.MemoryView":494
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 494, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_9);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(0, 494, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 495, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 495, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);
  __Pyx_TraceCall("assign_item_from_object", __pyx_f[0], 501, 0, __PYX_ERR(0, 501, __pyx_L1_error));

  /* "View.MemoryView":504
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":510
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 510, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":512
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 512, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 512, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 512, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(0, 514, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  char *__pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);
  __Pyx_TraceCall("__getbuffer__", __pyx_f[0], 518, 0, __PYX_ERR(0, 518, __pyx_L1_error));

  /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->view.readonly != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 520, __pyx_L1_error)

    /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":523
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_4;

    /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":525
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":528
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_4;

    /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":530
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":533
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_4;

    /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":535
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":538
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_5 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_5;

    /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":540
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":542
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_6 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_6;

  /* "View.MemoryView":543
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_7 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_7;

  /* "View.MemoryView":544
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_8 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_8;

  /* "View.MemoryView":545
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_8 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_8;

  /* "View.MemoryView":546
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":547
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 553, 0, __PYX_ERR(0, 553, __pyx_L1_error));

  /* "View.MemoryView":554
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(0, 554, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":555
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(0, 555, __pyx_L1_error)

  /* "View.MemoryView":556
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 559, 0, __PYX_ERR(0, 559, __pyx_L1_error));

  /* "View.MemoryView":560
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.base.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 563, 0, __PYX_ERR(0, 563, __pyx_L1_error));

  /* "View.MemoryView":564
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 564, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 567, 0, __PYX_ERR(0, 567, __pyx_L1_error));

  /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 570, __pyx_L1_error)

    /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":572
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 575, 0, __PYX_ERR(0, 575, __pyx_L1_error));

  /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__49, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":579
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 582, 0, __PYX_ERR(0, 582, __pyx_L1_error));

  /* "View.MemoryView":583
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 586, 0, __PYX_ERR(0, 586, __pyx_L1_error));

  /* "View.MemoryView":587
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 590, 0, __PYX_ERR(0, 590, __pyx_L1_error));

  /* "View.MemoryView":591
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 594, 0, __PYX_ERR(0, 594, __pyx_L1_error));

  /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":596
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":598
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":599
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 599, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":601
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":603
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);
  __Pyx_TraceCall("__len__", __pyx_f[0], 605, 0, __PYX_ERR(0, 605, __pyx_L1_error));

  /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":607
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":609
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);
  __Pyx_TraceCall("__repr__", __pyx_f[0], 611, 0, __PYX_ERR(0, 611, __pyx_L1_error));

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":613
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);
  __Pyx_TraceCall("__str__", __pyx_f[0], 615, 0, __PYX_ERR(0, 615, __pyx_L1_error));

  /* "View.MemoryView":616
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_c_contig", 0);
  __Pyx_TraceCall("is_c_contig", __pyx_f[0], 619, 0, __PYX_ERR(0, 619, __pyx_L1_error));

  /* "View.MemoryView":622
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":623
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_f_contig", 0);
  __Pyx_TraceCall("is_f_contig", __pyx_f[0], 625, 0, __PYX_ERR(0, 625, __pyx_L1_error));

  /* "View.MemoryView":628
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":629
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);
  __Pyx_TraceCall("copy", __pyx_f[0], 631, 0, __PYX_ERR(0, 631, __pyx_L1_error));

  /* "View.MemoryView":633
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":635
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":636
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":641
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("copy_fortran", 0);
  __Pyx_TraceCall("copy_fortran", __pyx_f[0], 643, 0, __PYX_ERR(0, 643, __pyx_L1_error));

  /* "View.MemoryView":645
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":647
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":648
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 648, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":653
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[0], 3, 0, __PYX_ERR(0, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);
  __Pyx_TraceCall("memoryview_cwrapper", __pyx_f[0], 657, 0, __PYX_ERR(0, 657, __pyx_L1_error));

  /* "View.MemoryView":658
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":659
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":660
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);
  __Pyx_TraceCall("memoryview_check", __pyx_f[0], 663, 0, __PYX_ERR(0, 663, __pyx_L1_error));

  /* "View.MemoryView":664
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.memoryview_check", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("_unellipsify", 0);
  __Pyx_TraceCall("_unellipsify", __pyx_f[0], 666, 0, __PYX_ERR(0, 666, __pyx_L1_error));

  /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":672
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":674
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":676
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":677
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":678
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 679, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 679, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 679, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 679, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":682
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 682, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 682, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__52);
            __Pyx_GIVEREF(__pyx_slice__52);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__52);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 682, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":683
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":685
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__52); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 685, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":686
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":689
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __PYX_ERR(0, 689, __pyx_L1_error)

        /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":691
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":692
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 692, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":694
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 694, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":696
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__52);
        __Pyx_GIVEREF(__pyx_slice__52);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__52);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 696, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":698
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);
  __Pyx_TraceCall("assert_direct_dimensions", __pyx_f[0], 700, 0, __PYX_ERR(0, 700, __pyx_L1_error));

  /* "View.MemoryView":701
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 703, __pyx_L1_error)

      /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  __Pyx_RefNannySetupContext("memview_slice", 0);
  __Pyx_TraceCall("memview_slice", __pyx_f[0], 710, 0, __PYX_ERR(0, 710, __pyx_L1_error));

  /* "View.MemoryView":711
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":718
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":722
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 722, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":725
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(0, 725, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":726
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":728
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":729
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":735
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":736
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":741
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":742
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 746, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 746, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 746, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 746, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":751
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 751, __pyx_L1_error)

      /* "View.MemoryView":748
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 748, __pyx_L1_error)

      /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":755
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":756
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":757
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":758
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":760
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 760, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 760, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":761
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 761, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 761, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":762
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 762, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 762, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":764
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":765
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":766
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 768, __pyx_L1_error)

      /* "View.MemoryView":774
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":778
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(0, 778, __pyx_L1_error) }

    /* "View.MemoryView":779
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(0, 779, __pyx_L1_error) }

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(0, 777, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":783
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(0, 782, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_TraceCall("slice_memviewslice", __pyx_f[0], 807, 1, __PYX_ERR(0, 807, __pyx_L1_error));

  /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":830
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":832
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 832, __pyx_L1_error)

      /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":835
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":838
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 838, __pyx_L1_error)

      /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":843
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":845
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":848
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":850
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":853
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":855
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":859
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":861
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":863
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":866
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":868
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":871
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":875
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":878
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":881
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":884
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":885
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":886
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":890
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":892
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":897
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":899
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":900
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 899, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":902
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":904
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);
  __Pyx_TraceCall("pybuffer_index", __pyx_f[0], 910, 0, __PYX_ERR(0, 910, __pyx_L1_error));

  /* "View.MemoryView":912
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":913
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":917
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 917, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(0, 917, __pyx_L1_error)
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":918
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":920
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":921
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":923
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":926
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":928
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 928, __pyx_L1_error)

      /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":931
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 931, __pyx_L1_error)

    /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":933
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":935
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":937
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  __Pyx_TraceCall("transpose_memslice", __pyx_f[0], 943, 1, __PYX_ERR(0, 943, __pyx_L1_error));

  /* "View.MemoryView":944
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":946
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":947
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":951
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":952
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":953
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":954
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":957
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 957, __pyx_L1_error)

      /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":959
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);
  __Pyx_TraceCall("__dealloc__", __pyx_f[0], 976, 0, __PYX_ERR(0, 976, __pyx_L1_error));

  /* "View.MemoryView":977
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView._memoryviewslice.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);
  __Pyx_TraceCall("convert_item_to_object", __pyx_f[0], 979, 0, __PYX_ERR(0, 979, __pyx_L1_error));

  /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":981
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":983
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);
  __Pyx_TraceCall("assign_item_from_object", __pyx_f[0], 985, 0, __PYX_ERR(0, 985, __pyx_L1_error));

  /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":987
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(0, 987, __pyx_L1_error)

    /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":989
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 992, 0, __PYX_ERR(0, 992, __pyx_L1_error));

  /* "View.MemoryView":993
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.base.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[0], 3, 0, __PYX_ERR(0, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);
  __Pyx_TraceCall("memoryview_fromslice", __pyx_f[0], 999, 0, __PYX_ERR(0, 999, __pyx_L1_error));

  /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1008
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1013
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1015
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1016
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1018
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1019
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1021
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1022
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1023
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1024
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1025
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1028
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1030
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1033
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1036
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1037
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1039
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1040
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1042
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1043
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1044
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1046
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1047
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1049
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);
  __Pyx_TraceCall("get_slice_from_memview", __pyx_f[0], 1052, 0, __PYX_ERR(0, 1052, __pyx_L1_error));

  /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1056
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(0, 1056, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1057
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1059
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1060
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("slice_copy", 0);
  __Pyx_TraceCall("slice_copy", __pyx_f[0], 1063, 0, __PYX_ERR(0, 1063, __pyx_L1_error));

  /* "View.MemoryView":1067
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1068
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1069
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1071
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1072
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1074
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1075
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1076
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1077
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.slice_copy", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);
  __Pyx_TraceCall("memoryview_copy", __pyx_f[0], 1080, 0, __PYX_ERR(0, 1080, __pyx_L1_error));

  /* "View.MemoryView":1083
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1084
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);
  __Pyx_TraceCall("memoryview_copy_from_slice", __pyx_f[0], 1087, 0, __PYX_ERR(0, 1087, __pyx_L1_error));

  /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1095
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1096
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1098
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1099
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1101
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1103
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __Pyx_TraceCall("abs_py_ssize_t", __pyx_f[0], 1109, 1, __PYX_ERR(0, 1109, __pyx_L1_error));

  /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1111
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1113
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.abs_py_ssize_t", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_TraceCall("get_best_order", __pyx_f[0], 1116, 1, __PYX_ERR(0, 1116, __pyx_L1_error));

  /* "View.MemoryView":1121
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1122
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1124
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1126
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1127
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1129
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1131
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1132
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1135
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1137
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.get_best_order", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1147
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1148
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1149
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1150
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1154
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1155
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1157
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1158
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1159
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1160
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1162
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1163
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1167
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1168
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  __Pyx_TraceDeclarations
  __Pyx_TraceCall("copy_strided_to_strided", __pyx_f[0], 1170, 1, __PYX_ERR(0, 1170, __pyx_L1_error));

  /* "View.MemoryView":1173
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.copy_strided_to_strided", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_TraceCall("slice_get_size", __pyx_f[0], 1177, 1, __PYX_ERR(0, 1177, __pyx_L1_error));

  /* "View.MemoryView":1180
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 *     cdef Py_ssize_t size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1182
 *     cdef Py_ssize_t size = src.memview.view.itemsize
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         size *= src.shape[i]
 * 
 */
  __pyx_t_2 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1183
 * 
 *     for i in range(ndim):
 *         size *= src.shape[i]             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * (__pyx_v_src->shape[__pyx_v_i]));
  }

  /* "View.MemoryView":1185
 *         size *= src.shape[i]
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.slice_get_size", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":1188
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_TraceCall("fill_contig_strides_array", __pyx_f[0], 1188, 1, __PYX_ERR(0, 1188, __pyx_L1_error));

  /* "View.MemoryView":1197
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1198
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1199
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1200
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1197
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1202
 *             stride = stride * shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1203
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1204
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1206
 *             stride = stride * shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1188
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.fill_contig_strides_array", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":1209
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_TraceCall("copy_data_to_temp", __pyx_f[0], 1209, 1, __PYX_ERR(0, 1209, __pyx_L1_error));

  /* "View.MemoryView":1220
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1221
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1223
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1224
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1225
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1225, __pyx_L1_error)

    /* "View.MemoryView":1224
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1228
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1229
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1230
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1231
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1232
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1234
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1238
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1239
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1240
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1239
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1242
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1243
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1242
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1245
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1247
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1209
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":1252
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);
  __Pyx_TraceCall("_err_extents", __pyx_f[0], 1252, 0, __PYX_ERR(0, 1252, __pyx_L1_error));

  /* "View.MemoryView":1255
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1254
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(0, 1254, __pyx_L1_error)

  /* "View.MemoryView":1252
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1258
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_TraceCall("_err_dim", __pyx_f[0], 1258, 0, __PYX_ERR(0, 1258, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1259
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1259, __pyx_L1_error)

  /* "View.MemoryView":1258
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1262
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_TraceCall("_err", __pyx_f[0], 1262, 0, __PYX_ERR(0, 1262, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1263
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":1264
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1264, __pyx_L1_error)

    /* "View.MemoryView":1263
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1266
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(0, 1266, __pyx_L1_error)
  }

  /* "View.MemoryView":1262
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1269
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  __Pyx_TraceDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_t_8;
  __Pyx_TraceCall("memoryview_copy_contents", __pyx_f[0], 1269, 1, __PYX_ERR(0, 1269, __pyx_L1_error));

  /* "View.MemoryView":1277
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1278
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1280
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1281
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1282
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1285
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1286
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1285
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1287
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1288
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1287
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1290
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1292
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1293
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1294
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1295
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1296
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1294
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1298
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1298, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1293
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1300
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1301
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1301, __pyx_L1_error)

      /* "View.MemoryView":1300
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1303
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1305
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1306
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1305
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1308
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(0, 1308, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1309
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1303
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1311
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1314
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1315
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1314
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1316
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1317
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1316
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1319
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1321
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1322
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1323
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1324
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1325
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1319
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1311
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1327
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (__pyx_t_8) {

    /* "View.MemoryView":1330
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(0, 1330, __pyx_L1_error)

    /* "View.MemoryView":1331
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(0, 1331, __pyx_L1_error)

    /* "View.MemoryView":1327
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1333
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1334
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1335
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1337
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1338
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1269
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "View.MemoryView":1341
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_TraceCall("broadcast_leading", __pyx_f[0], 1341, 1, __PYX_ERR(0, 1341, __pyx_L1_error));

  /* "View.MemoryView":1345
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1347
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1348
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1349
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1350
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1352
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1353
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1354
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1355
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1341
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.broadcast_leading", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "View.MemoryView":1363
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  __Pyx_TraceCall("refcount_copying", __pyx_f[0], 1363, 1, __PYX_ERR(0, 1363, __pyx_L1_error));

  /* "View.MemoryView":1367
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1368
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1367
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1363
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.refcount_copying", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "View.MemoryView":1372
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);
  __Pyx_TraceCall("refcount_objects_in_slice_with_gil", __pyx_f[0], 1372, 0, __PYX_ERR(0, 1372, __pyx_L1_error));

  /* "View.MemoryView":1375
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1372
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.refcount_objects_in_slice_with_gil", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1378
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);
  __Pyx_TraceCall("refcount_objects_in_slice", __pyx_f[0], 1378, 0, __PYX_ERR(0, 1378, __pyx_L1_error));

  /* "View.MemoryView":1382
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1383
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":1384
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_4 = (__pyx_v_inc != 0);
      if (__pyx_t_4) {

        /* "View.MemoryView":1385
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1384
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1387
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1383
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1389
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1390
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1392
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1378
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.refcount_objects_in_slice", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1398
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {
  __Pyx_TraceDeclarations
  __Pyx_TraceCall("slice_assign_scalar", __pyx_f[0], 1398, 1, __PYX_ERR(0, 1398, __pyx_L1_error));

  /* "View.MemoryView":1401
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1402
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1404
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1398
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView.slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "View.MemoryView":1408
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_TraceCall("_slice_assign_scalar", __pyx_f[0], 1408, 1, __PYX_ERR(0, 1408, __pyx_L1_error));

  /* "View.MemoryView":1412
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1413
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1415
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1416
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1417
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1418
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1415
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1420
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1421
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1423
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1408
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("View.MemoryView._slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(0, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(0, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(0, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_TraceFrameInit(__pyx_codeobj__56)
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);
  __Pyx_TraceCall("__pyx_unpickle_Enum", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xb068931) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_Enum__set_state", __pyx_f[0], 11, 0, __PYX_ERR(0, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_8world_cy_ColorTrait __pyx_vtable_8world_cy_ColorTrait;

static PyObject *__pyx_tp_new_8world_cy_ColorTrait(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8world_cy_ColorTrait *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8world_cy_ColorTrait *)o);
  p->__pyx_vtab = __pyx_vtabptr_8world_cy_ColorTrait;
  if (unlikely(__pyx_pw_8world_cy_10ColorTrait_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8world_cy_ColorTrait(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8world_cy_ColorTrait[] = {
  {"get_c", (PyCFunction)__pyx_pw_8world_cy_10ColorTrait_3get_c, METH_NOARGS, 0},
  {"opposite", (PyCFunction)__pyx_pw_8world_cy_10ColorTrait_5opposite, METH_NOARGS, 0},
  {"get_normalized_difference", (PyCFunction)__pyx_pw_8world_cy_10ColorTrait_7get_normalized_difference, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8world_cy_10ColorTrait_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8world_cy_10ColorTrait_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8world_cy_ColorTrait = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.ColorTrait", /*tp_name*/
  sizeof(struct __pyx_obj_8world_cy_ColorTrait), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8world_cy_ColorTrait, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8world_cy_ColorTrait, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8world_cy_ColorTrait, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_8world_cy_PositiveTrait __pyx_vtable_8world_cy_PositiveTrait;

static PyObject *__pyx_tp_new_8world_cy_PositiveTrait(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8world_cy_PositiveTrait *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8world_cy_PositiveTrait *)o);
  p->__pyx_vtab = __pyx_vtabptr_8world_cy_PositiveTrait;
  if (unlikely(__pyx_pw_8world_cy_13PositiveTrait_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8world_cy_PositiveTrait(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8world_cy_PositiveTrait[] = {
  {"get_a", (PyCFunction)__pyx_pw_8world_cy_13PositiveTrait_3get_a, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8world_cy_13PositiveTrait_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8world_cy_13PositiveTrait_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8world_cy_PositiveTrait = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.PositiveTrait", /*tp_name*/
  sizeof(struct __pyx_obj_8world_cy_PositiveTrait), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8world_cy_PositiveTrait, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8world_cy_PositiveTrait, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8world_cy_PositiveTrait, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_8world_cy_UnitTrait __pyx_vtable_8world_cy_UnitTrait;

static PyObject *__pyx_tp_new_8world_cy_UnitTrait(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8world_cy_UnitTrait *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8world_cy_UnitTrait *)o);
  p->__pyx_vtab = __pyx_vtabptr_8world_cy_UnitTrait;
  if (unlikely(__pyx_pw_8world_cy_9UnitTrait_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8world_cy_UnitTrait(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8world_cy_UnitTrait[] = {
  {"get_a", (PyCFunction)__pyx_pw_8world_cy_9UnitTrait_3get_a, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8world_cy_9UnitTrait_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8world_cy_9UnitTrait_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8world_cy_UnitTrait = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.UnitTrait", /*tp_name*/
  sizeof(struct __pyx_obj_8world_cy_UnitTrait), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8world_cy_UnitTrait, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8world_cy_UnitTrait, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8world_cy_UnitTrait, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_8world_cy_FloatListTrait __pyx_vtable_8world_cy_FloatListTrait;

static PyObject *__pyx_tp_new_8world_cy_FloatListTrait(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8world_cy_FloatListTrait *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8world_cy_FloatListTrait *)o);
  p->__pyx_vtab = __pyx_vtabptr_8world_cy_FloatListTrait;
  p->l.data = NULL;
  p->l.memview = NULL;
  p->group_sizes.data = NULL;
  p->group_sizes.memview = NULL;
  if (unlikely(__pyx_pw_8world_cy_14FloatListTrait_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8world_cy_FloatListTrait(PyObject *o) {
  struct __pyx_obj_8world_cy_FloatListTrait *p = (struct __pyx_obj_8world_cy_FloatListTrait *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __PYX_XDEC_MEMVIEW(&p->l, 1);
  __PYX_XDEC_MEMVIEW(&p->group_sizes, 1);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8world_cy_FloatListTrait[] = {
  {"yield_l", (PyCFunction)__pyx_pw_8world_cy_14FloatListTrait_3yield_l, METH_NOARGS, 0},
  {"get_group_sizes", (PyCFunction)__pyx_pw_8world_cy_14FloatListTrait_6get_group_sizes, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8world_cy_14FloatListTrait_8__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8world_cy_14FloatListTrait_10__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8world_cy_FloatListTrait = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.FloatListTrait", /*tp_name*/
  sizeof(struct __pyx_obj_8world_cy_FloatListTrait), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8world_cy_FloatListTrait, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8world_cy_FloatListTrait, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8world_cy_FloatListTrait, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_8world_cy_LinearDNA __pyx_vtable_8world_cy_LinearDNA;

static PyObject *__pyx_tp_new_8world_cy_LinearDNA(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8world_cy_LinearDNA *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8world_cy_LinearDNA *)o);
  p->__pyx_vtab = __pyx_vtabptr_8world_cy_LinearDNA;
  p->colorTrait = ((struct __pyx_obj_8world_cy_ColorTrait *)Py_None); Py_INCREF(Py_None);
  p->maxsizeTrait = ((struct __pyx_obj_8world_cy_PositiveTrait *)Py_None); Py_INCREF(Py_None);
  p->uptakeTrait = ((struct __pyx_obj_8world_cy_UnitTrait *)Py_None); Py_INCREF(Py_None);
  p->maxageTrait = ((struct __pyx_obj_8world_cy_PositiveTrait *)Py_None); Py_INCREF(Py_None);
  p->weightsTrait = ((struct __pyx_obj_8world_cy_FloatListTrait *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8world_cy_9LinearDNA_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8world_cy_LinearDNA(PyObject *o) {
  struct __pyx_obj_8world_cy_LinearDNA *p = (struct __pyx_obj_8world_cy_LinearDNA *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->colorTrait);
  Py_CLEAR(p->maxsizeTrait);
  Py_CLEAR(p->uptakeTrait);
  Py_CLEAR(p->maxageTrait);
  Py_CLEAR(p->weightsTrait);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8world_cy_LinearDNA(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8world_cy_LinearDNA *p = (struct __pyx_obj_8world_cy_LinearDNA *)o;
  if (p->colorTrait) {
    e = (*v)(((PyObject *)p->colorTrait), a); if (e) return e;
  }
  if (p->maxsizeTrait) {
    e = (*v)(((PyObject *)p->maxsizeTrait), a); if (e) return e;
  }
  if (p->uptakeTrait) {
    e = (*v)(((PyObject *)p->uptakeTrait), a); if (e) return e;
  }
  if (p->maxageTrait) {
    e = (*v)(((PyObject *)p->maxageTrait), a); if (e) return e;
  }
  if (p->weightsTrait) {
    e = (*v)(((PyObject *)p->weightsTrait), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8world_cy_LinearDNA(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8world_cy_LinearDNA *p = (struct __pyx_obj_8world_cy_LinearDNA *)o;
  tmp = ((PyObject*)p->colorTrait);
  p->colorTrait = ((struct __pyx_obj_8world_cy_ColorTrait *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->maxsizeTrait);
  p->maxsizeTrait = ((struct __pyx_obj_8world_cy_PositiveTrait *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->uptakeTrait);
  p->uptakeTrait = ((struct __pyx_obj_8world_cy_UnitTrait *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->maxageTrait);
  p->maxageTrait = ((struct __pyx_obj_8world_cy_PositiveTrait *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->weightsTrait);
  p->weightsTrait = ((struct __pyx_obj_8world_cy_FloatListTrait *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_8world_cy_LinearDNA[] = {
  {"get_wdim", (PyCFunction)__pyx_pw_8world_cy_9LinearDNA_3get_wdim, METH_NOARGS, 0},
  {"get_group_sizes", (PyCFunction)__pyx_pw_8world_cy_9LinearDNA_5get_group_sizes, METH_NOARGS, 0},
  {"get_traits", (PyCFunction)__pyx_pw_8world_cy_9LinearDNA_7get_traits, METH_NOARGS, 0},
  {"get_colorTrait", (PyCFunction)__pyx_pw_8world_cy_9LinearDNA_9get_colorTrait, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8world_cy_9LinearDNA_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8world_cy_9LinearDNA_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8world_cy_LinearDNA = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.LinearDNA", /*tp_name*/
  sizeof(struct __pyx_obj_8world_cy_LinearDNA), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8world_cy_LinearDNA, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8world_cy_LinearDNA, /*tp_traverse*/
  __pyx_tp_clear_8world_cy_LinearDNA, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8world_cy_LinearDNA, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8world_cy_LinearDNA, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_8world_cy_Brain __pyx_vtable_8world_cy_Brain;

static PyObject *__pyx_tp_new_8world_cy_Brain(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8world_cy_Brain *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8world_cy_Brain *)o);
  p->__pyx_vtab = __pyx_vtabptr_8world_cy_Brain;
  p->weights.data = NULL;
  p->weights.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc_8world_cy_Brain(PyObject *o) {
  struct __pyx_obj_8world_cy_Brain *p = (struct __pyx_obj_8world_cy_Brain *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __PYX_XDEC_MEMVIEW(&p->weights, 1);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8world_cy_Brain[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8world_cy_5Brain_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8world_cy_5Brain_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8world_cy_Brain = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.Brain", /*tp_name*/
  sizeof(struct __pyx_obj_8world_cy_Brain), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8world_cy_Brain, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8world_cy_Brain, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8world_cy_Brain, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_8world_cy_LinearBrain __pyx_vtable_8world_cy_LinearBrain;

static PyObject *__pyx_tp_new_8world_cy_LinearBrain(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8world_cy_LinearBrain *p;
  PyObject *o = __pyx_tp_new_8world_cy_Brain(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8world_cy_LinearBrain *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_8world_cy_Brain*)__pyx_vtabptr_8world_cy_LinearBrain;
  if (unlikely(__pyx_pw_8world_cy_11LinearBrain_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_8world_cy_LinearBrain[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8world_cy_11LinearBrain_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8world_cy_11LinearBrain_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8world_cy_LinearBrain = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.LinearBrain", /*tp_name*/
  sizeof(struct __pyx_obj_8world_cy_LinearBrain), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8world_cy_Brain, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8world_cy_LinearBrain, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8world_cy_LinearBrain, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_8world_cy_Minion __pyx_vtable_8world_cy_Minion;

static PyObject *__pyx_tp_new_8world_cy_Minion(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8world_cy_Minion *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8world_cy_Minion *)o);
  p->__pyx_vtab = __pyx_vtabptr_8world_cy_Minion;
  p->brain = ((struct __pyx_obj_8world_cy_Brain *)Py_None); Py_INCREF(Py_None);
  p->dna = ((struct __pyx_obj_8world_cy_LinearDNA *)Py_None); Py_INCREF(Py_None);
  p->node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8world_cy_6Minion_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8world_cy_Minion(PyObject *o) {
  struct __pyx_obj_8world_cy_Minion *p = (struct __pyx_obj_8world_cy_Minion *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->brain);
  Py_CLEAR(p->dna);
  Py_CLEAR(p->node);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8world_cy_Minion(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8world_cy_Minion *p = (struct __pyx_obj_8world_cy_Minion *)o;
  if (p->brain) {
    e = (*v)(((PyObject *)p->brain), a); if (e) return e;
  }
  if (p->dna) {
    e = (*v)(((PyObject *)p->dna), a); if (e) return e;
  }
  if (p->node) {
    e = (*v)(((PyObject *)p->node), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8world_cy_Minion(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8world_cy_Minion *p = (struct __pyx_obj_8world_cy_Minion *)o;
  tmp = ((PyObject*)p->brain);
  p->brain = ((struct __pyx_obj_8world_cy_Brain *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dna);
  p->dna = ((struct __pyx_obj_8world_cy_LinearDNA *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->node);
  p->node = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_8world_cy_Minion[] = {
  {"get_dna", (PyCFunction)__pyx_pw_8world_cy_6Minion_3get_dna, METH_NOARGS, 0},
  {"get_color", (PyCFunction)__pyx_pw_8world_cy_6Minion_5get_color, METH_NOARGS, 0},
  {"get_mass", (PyCFunction)__pyx_pw_8world_cy_6Minion_7get_mass, METH_NOARGS, 0},
  {"get_alen", (PyCFunction)__pyx_pw_8world_cy_6Minion_9get_alen, METH_NOARGS, 0},
  {"get_pos", (PyCFunction)__pyx_pw_8world_cy_6Minion_11get_pos, METH_NOARGS, 0},
  {"get_action", (PyCFunction)__pyx_pw_8world_cy_6Minion_13get_action, METH_NOARGS, 0},
  {"get_move_direc", (PyCFunction)__pyx_pw_8world_cy_6Minion_15get_move_direc, METH_NOARGS, 0},
  {"get_frozen", (PyCFunction)__pyx_pw_8world_cy_6Minion_17get_frozen, METH_NOARGS, 0},
  {"get_cum_dist", (PyCFunction)__pyx_pw_8world_cy_6Minion_19get_cum_dist, METH_NOARGS, 0},
  {"freeze", (PyCFunction)__pyx_pw_8world_cy_6Minion_21freeze, METH_NOARGS, 0},
  {"defreeze", (PyCFunction)__pyx_pw_8world_cy_6Minion_23defreeze, METH_NOARGS, 0},
  {"set_alen", (PyCFunction)__pyx_pw_8world_cy_6Minion_25set_alen, METH_O, 0},
  {"set_pos", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8world_cy_6Minion_27set_pos, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8world_cy_6Minion_29__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8world_cy_6Minion_31__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8world_cy_Minion = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.Minion", /*tp_name*/
  sizeof(struct __pyx_obj_8world_cy_Minion), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8world_cy_Minion, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8world_cy_Minion, /*tp_traverse*/
  __pyx_tp_clear_8world_cy_Minion, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8world_cy_Minion, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8world_cy_Minion, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_8world_cy_MinionDLLNode(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8world_cy_MinionDLLNode *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8world_cy_MinionDLLNode *)o);
  p->mi = ((struct __pyx_obj_8world_cy_Minion *)Py_None); Py_INCREF(Py_None);
  p->prev = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None); Py_INCREF(Py_None);
  p->next = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None); Py_INCREF(Py_None);
  p->dll = ((struct __pyx_obj_8world_cy_MinionDLL *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8world_cy_13MinionDLLNode_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8world_cy_MinionDLLNode(PyObject *o) {
  struct __pyx_obj_8world_cy_MinionDLLNode *p = (struct __pyx_obj_8world_cy_MinionDLLNode *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->mi);
  Py_CLEAR(p->prev);
  Py_CLEAR(p->next);
  Py_CLEAR(p->dll);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8world_cy_MinionDLLNode(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8world_cy_MinionDLLNode *p = (struct __pyx_obj_8world_cy_MinionDLLNode *)o;
  if (p->mi) {
    e = (*v)(((PyObject *)p->mi), a); if (e) return e;
  }
  if (p->prev) {
    e = (*v)(((PyObject *)p->prev), a); if (e) return e;
  }
  if (p->next) {
    e = (*v)(((PyObject *)p->next), a); if (e) return e;
  }
  if (p->dll) {
    e = (*v)(((PyObject *)p->dll), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8world_cy_MinionDLLNode(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8world_cy_MinionDLLNode *p = (struct __pyx_obj_8world_cy_MinionDLLNode *)o;
  tmp = ((PyObject*)p->mi);
  p->mi = ((struct __pyx_obj_8world_cy_Minion *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->prev);
  p->prev = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->next);
  p->next = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dll);
  p->dll = ((struct __pyx_obj_8world_cy_MinionDLL *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_8world_cy_MinionDLLNode[] = {
  {"get_mi", (PyCFunction)__pyx_pw_8world_cy_13MinionDLLNode_3get_mi, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8world_cy_13MinionDLLNode_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8world_cy_13MinionDLLNode_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8world_cy_MinionDLLNode = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.MinionDLLNode", /*tp_name*/
  sizeof(struct __pyx_obj_8world_cy_MinionDLLNode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8world_cy_MinionDLLNode, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8world_cy_MinionDLLNode, /*tp_traverse*/
  __pyx_tp_clear_8world_cy_MinionDLLNode, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8world_cy_MinionDLLNode, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8world_cy_MinionDLLNode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_8world_cy_MinionDLL __pyx_vtable_8world_cy_MinionDLL;

static PyObject *__pyx_tp_new_8world_cy_MinionDLL(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8world_cy_MinionDLL *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8world_cy_MinionDLL *)o);
  p->__pyx_vtab = __pyx_vtabptr_8world_cy_MinionDLL;
  p->head = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None); Py_INCREF(Py_None);
  p->tail = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None); Py_INCREF(Py_None);
  p->current = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8world_cy_9MinionDLL_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8world_cy_MinionDLL(PyObject *o) {
  struct __pyx_obj_8world_cy_MinionDLL *p = (struct __pyx_obj_8world_cy_MinionDLL *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->head);
  Py_CLEAR(p->tail);
  Py_CLEAR(p->current);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8world_cy_MinionDLL(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8world_cy_MinionDLL *p = (struct __pyx_obj_8world_cy_MinionDLL *)o;
  if (p->head) {
    e = (*v)(((PyObject *)p->head), a); if (e) return e;
  }
  if (p->tail) {
    e = (*v)(((PyObject *)p->tail), a); if (e) return e;
  }
  if (p->current) {
    e = (*v)(((PyObject *)p->current), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8world_cy_MinionDLL(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8world_cy_MinionDLL *p = (struct __pyx_obj_8world_cy_MinionDLL *)o;
  tmp = ((PyObject*)p->head);
  p->head = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tail);
  p->tail = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->current);
  p->current = ((struct __pyx_obj_8world_cy_MinionDLLNode *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_specialmethod___pyx_pw_8world_cy_9MinionDLL_15__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {return __pyx_pw_8world_cy_9MinionDLL_15__next__(self);}

static PyMethodDef __pyx_methods_8world_cy_MinionDLL[] = {
  {"is_empty", (PyCFunction)__pyx_pw_8world_cy_9MinionDLL_3is_empty, METH_NOARGS, 0},
  {"push_py", (PyCFunction)__pyx_pw_8world_cy_9MinionDLL_5push_py, METH_O, 0},
  {"remove_py", (PyCFunction)__pyx_pw_8world_cy_9MinionDLL_7remove_py, METH_O, 0},
  {"contains_py", (PyCFunction)__pyx_pw_8world_cy_9MinionDLL_9contains_py, METH_O, 0},
  {"get_nth_py", (PyCFunction)__pyx_pw_8world_cy_9MinionDLL_11get_nth_py, METH_O, 0},
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_8world_cy_9MinionDLL_15__next__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8world_cy_9MinionDLL_17__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8world_cy_9MinionDLL_19__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8world_cy_MinionDLL = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.MinionDLL", /*tp_name*/
  sizeof(struct __pyx_obj_8world_cy_MinionDLL), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8world_cy_MinionDLL, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8world_cy_MinionDLL, /*tp_traverse*/
  __pyx_tp_clear_8world_cy_MinionDLL, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8world_cy_9MinionDLL_13__iter__, /*tp_iter*/
  __pyx_pw_8world_cy_9MinionDLL_15__next__, /*tp_iternext*/
  __pyx_methods_8world_cy_MinionDLL, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8world_cy_MinionDLL, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_8world_cy_World __pyx_vtable_8world_cy_World;

static PyObject *__pyx_tp_new_8world_cy_World(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8world_cy_World *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8world_cy_World *)o);
  p->__pyx_vtab = __pyx_vtabptr_8world_cy_World;
  new((void*)&(p->pedigree)) std::vector<__pyx_ctuple_int__and_int__and_int> ();
  p->mis = ((struct __pyx_obj_8world_cy_MinionDLL *)Py_None); Py_INCREF(Py_None);
  p->snapshot.data = NULL;
  p->snapshot.memview = NULL;
  p->mins.data = NULL;
  p->mins.memview = NULL;
  p->occupy_map.data = NULL;
  p->occupy_map.memview = NULL;
  if (unlikely(__pyx_pw_8world_cy_5World_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8world_cy_World(PyObject *o) {
  struct __pyx_obj_8world_cy_World *p = (struct __pyx_obj_8world_cy_World *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->pedigree);
  Py_CLEAR(p->mis);
  __PYX_XDEC_MEMVIEW(&p->snapshot, 1);
  __PYX_XDEC_MEMVIEW(&p->mins, 1);
  __PYX_XDEC_MEMVIEW(&p->occupy_map, 1);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8world_cy_World(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8world_cy_World *p = (struct __pyx_obj_8world_cy_World *)o;
  if (p->mis) {
    e = (*v)(((PyObject *)p->mis), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8world_cy_World(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8world_cy_World *p = (struct __pyx_obj_8world_cy_World *)o;
  tmp = ((PyObject*)p->mis);
  p->mis = ((struct __pyx_obj_8world_cy_MinionDLL *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_8world_cy_World[] = {
  {"_register", (PyCFunction)__pyx_pw_8world_cy_5World_3_register, METH_O, 0},
  {"occupy_check", (PyCFunction)__pyx_pw_8world_cy_5World_5occupy_check, METH_NOARGS, 0},
  {"total_mass_error_detector", (PyCFunction)__pyx_pw_8world_cy_5World_7total_mass_error_detector, METH_O, 0},
  {"mins_negative_error_detector", (PyCFunction)__pyx_pw_8world_cy_5World_9mins_negative_error_detector, METH_O, 0},
  {"snapshot_error_detector", (PyCFunction)__pyx_pw_8world_cy_5World_11snapshot_error_detector, METH_O, 0},
  {"max_mass", (PyCFunction)__pyx_pw_8world_cy_5World_13max_mass, METH_NOARGS, 0},
  {"death_by", (PyCFunction)__pyx_pw_8world_cy_5World_15death_by, METH_O, 0},
  {"status", (PyCFunction)__pyx_pw_8world_cy_5World_17status, METH_NOARGS, 0},
  {"append_red_dnas", (PyCFunction)__pyx_pw_8world_cy_5World_19append_red_dnas, METH_O, 0},
  {"append_blue_dnas", (PyCFunction)__pyx_pw_8world_cy_5World_21append_blue_dnas, METH_O, 0},
  {"one_step", (PyCFunction)__pyx_pw_8world_cy_5World_23one_step, METH_NOARGS, 0},
  {"get_xsize", (PyCFunction)__pyx_pw_8world_cy_5World_25get_xsize, METH_NOARGS, 0},
  {"get_ysize", (PyCFunction)__pyx_pw_8world_cy_5World_27get_ysize, METH_NOARGS, 0},
  {"get_moment", (PyCFunction)__pyx_pw_8world_cy_5World_29get_moment, METH_NOARGS, 0},
  {"get_new_id", (PyCFunction)__pyx_pw_8world_cy_5World_31get_new_id, METH_NOARGS, 0},
  {"get_mins", (PyCFunction)__pyx_pw_8world_cy_5World_33get_mins, METH_NOARGS, 0},
  {"total_mass", (PyCFunction)__pyx_pw_8world_cy_5World_35total_mass, METH_NOARGS, 0},
  {"total_minion_mass", (PyCFunction)__pyx_pw_8world_cy_5World_37total_minion_mass, METH_NOARGS, 0},
  {"total_min", (PyCFunction)__pyx_pw_8world_cy_5World_39total_min, METH_NOARGS, 0},
  {"limit", (PyCFunction)__pyx_pw_8world_cy_5World_41limit, METH_O, 0},
  {"exhausted", (PyCFunction)__pyx_pw_8world_cy_5World_43exhausted, METH_NOARGS, 0},
  {"extincted", (PyCFunction)__pyx_pw_8world_cy_5World_45extincted, METH_NOARGS, 0},
  {"get_pedigree", (PyCFunction)__pyx_pw_8world_cy_5World_47get_pedigree, METH_NOARGS, 0},
  {"sample_dna", (PyCFunction)__pyx_pw_8world_cy_5World_49sample_dna, METH_O, 0},
  {"get_mis", (PyCFunction)__pyx_pw_8world_cy_5World_51get_mis, METH_NOARGS, 0},
  {"get_nth_mi", (PyCFunction)__pyx_pw_8world_cy_5World_53get_nth_mi, METH_O, 0},
  {"get_population", (PyCFunction)__pyx_pw_8world_cy_5World_55get_population, METH_NOARGS, 0},
  {"get_colors", (PyCFunction)__pyx_pw_8world_cy_5World_57get_colors, METH_NOARGS, 0},
  {"get_avg_r", (PyCFunction)__pyx_pw_8world_cy_5World_60get_avg_r, METH_NOARGS, 0},
  {"get_avg_g", (PyCFunction)__pyx_pw_8world_cy_5World_62get_avg_g, METH_NOARGS, 0},
  {"get_avg_b", (PyCFunction)__pyx_pw_8world_cy_5World_64get_avg_b, METH_NOARGS, 0},
  {"get_messiness", (PyCFunction)__pyx_pw_8world_cy_5World_66get_messiness, METH_NOARGS, 0},
  {"body_rect", (PyCFunction)__pyx_pw_8world_cy_5World_68body_rect, METH_O, 0},
  {"geni_rect", (PyCFunction)__pyx_pw_8world_cy_5World_71geni_rect, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8world_cy_5World_74__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8world_cy_5World_76__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8world_cy_World = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.World", /*tp_name*/
  sizeof(struct __pyx_obj_8world_cy_World), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8world_cy_World, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8world_cy_World, /*tp_traverse*/
  __pyx_tp_clear_8world_cy_World, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8world_cy_World, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8world_cy_World, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l *__pyx_freelist_8world_cy___pyx_scope_struct__yield_l[8];
static int __pyx_freecount_8world_cy___pyx_scope_struct__yield_l = 0;

static PyObject *__pyx_tp_new_8world_cy___pyx_scope_struct__yield_l(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8world_cy___pyx_scope_struct__yield_l > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l)))) {
    o = (PyObject*)__pyx_freelist_8world_cy___pyx_scope_struct__yield_l[--__pyx_freecount_8world_cy___pyx_scope_struct__yield_l];
    memset(o, 0, sizeof(struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8world_cy___pyx_scope_struct__yield_l(PyObject *o) {
  struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l *p = (struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8world_cy___pyx_scope_struct__yield_l < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l)))) {
    __pyx_freelist_8world_cy___pyx_scope_struct__yield_l[__pyx_freecount_8world_cy___pyx_scope_struct__yield_l++] = ((struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8world_cy___pyx_scope_struct__yield_l(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l *p = (struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_8world_cy___pyx_scope_struct__yield_l = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.__pyx_scope_struct__yield_l", /*tp_name*/
  sizeof(struct __pyx_obj_8world_cy___pyx_scope_struct__yield_l), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8world_cy___pyx_scope_struct__yield_l, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8world_cy___pyx_scope_struct__yield_l, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8world_cy___pyx_scope_struct__yield_l, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors *__pyx_freelist_8world_cy___pyx_scope_struct_1_get_colors[8];
static int __pyx_freecount_8world_cy___pyx_scope_struct_1_get_colors = 0;

static PyObject *__pyx_tp_new_8world_cy___pyx_scope_struct_1_get_colors(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8world_cy___pyx_scope_struct_1_get_colors > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors)))) {
    o = (PyObject*)__pyx_freelist_8world_cy___pyx_scope_struct_1_get_colors[--__pyx_freecount_8world_cy___pyx_scope_struct_1_get_colors];
    memset(o, 0, sizeof(struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8world_cy___pyx_scope_struct_1_get_colors(PyObject *o) {
  struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors *p = (struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_mi);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8world_cy___pyx_scope_struct_1_get_colors < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors)))) {
    __pyx_freelist_8world_cy___pyx_scope_struct_1_get_colors[__pyx_freecount_8world_cy___pyx_scope_struct_1_get_colors++] = ((struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8world_cy___pyx_scope_struct_1_get_colors(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors *p = (struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors *)o;
  if (p->__pyx_v_mi) {
    e = (*v)(p->__pyx_v_mi, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_8world_cy___pyx_scope_struct_1_get_colors = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.__pyx_scope_struct_1_get_colors", /*tp_name*/
  sizeof(struct __pyx_obj_8world_cy___pyx_scope_struct_1_get_colors), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8world_cy___pyx_scope_struct_1_get_colors, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8world_cy___pyx_scope_struct_1_get_colors, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8world_cy___pyx_scope_struct_1_get_colors, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect *__pyx_freelist_8world_cy___pyx_scope_struct_2_body_rect[8];
static int __pyx_freecount_8world_cy___pyx_scope_struct_2_body_rect = 0;

static PyObject *__pyx_tp_new_8world_cy___pyx_scope_struct_2_body_rect(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8world_cy___pyx_scope_struct_2_body_rect > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect)))) {
    o = (PyObject*)__pyx_freelist_8world_cy___pyx_scope_struct_2_body_rect[--__pyx_freecount_8world_cy___pyx_scope_struct_2_body_rect];
    memset(o, 0, sizeof(struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8world_cy___pyx_scope_struct_2_body_rect(PyObject *o) {
  struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect *p = (struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_alen);
  Py_CLEAR(p->__pyx_v_k);
  Py_CLEAR(p->__pyx_v_mi);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_x);
  Py_CLEAR(p->__pyx_v_y);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8world_cy___pyx_scope_struct_2_body_rect < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect)))) {
    __pyx_freelist_8world_cy___pyx_scope_struct_2_body_rect[__pyx_freecount_8world_cy___pyx_scope_struct_2_body_rect++] = ((struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8world_cy___pyx_scope_struct_2_body_rect(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect *p = (struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect *)o;
  if (p->__pyx_v_alen) {
    e = (*v)(p->__pyx_v_alen, a); if (e) return e;
  }
  if (p->__pyx_v_k) {
    e = (*v)(p->__pyx_v_k, a); if (e) return e;
  }
  if (p->__pyx_v_mi) {
    e = (*v)(p->__pyx_v_mi, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_x) {
    e = (*v)(p->__pyx_v_x, a); if (e) return e;
  }
  if (p->__pyx_v_y) {
    e = (*v)(p->__pyx_v_y, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_8world_cy___pyx_scope_struct_2_body_rect = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.__pyx_scope_struct_2_body_rect", /*tp_name*/
  sizeof(struct __pyx_obj_8world_cy___pyx_scope_struct_2_body_rect), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8world_cy___pyx_scope_struct_2_body_rect, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8world_cy___pyx_scope_struct_2_body_rect, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8world_cy___pyx_scope_struct_2_body_rect, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect *__pyx_freelist_8world_cy___pyx_scope_struct_3_geni_rect[8];
static int __pyx_freecount_8world_cy___pyx_scope_struct_3_geni_rect = 0;

static PyObject *__pyx_tp_new_8world_cy___pyx_scope_struct_3_geni_rect(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8world_cy___pyx_scope_struct_3_geni_rect > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect)))) {
    o = (PyObject*)__pyx_freelist_8world_cy___pyx_scope_struct_3_geni_rect[--__pyx_freecount_8world_cy___pyx_scope_struct_3_geni_rect];
    memset(o, 0, sizeof(struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8world_cy___pyx_scope_struct_3_geni_rect(PyObject *o) {
  struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect *p = (struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_alen);
  Py_CLEAR(p->__pyx_v_color);
  Py_CLEAR(p->__pyx_v_k);
  Py_CLEAR(p->__pyx_v_mi);
  Py_CLEAR(p->__pyx_v_move_direc);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_x);
  Py_CLEAR(p->__pyx_v_y);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8world_cy___pyx_scope_struct_3_geni_rect < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect)))) {
    __pyx_freelist_8world_cy___pyx_scope_struct_3_geni_rect[__pyx_freecount_8world_cy___pyx_scope_struct_3_geni_rect++] = ((struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8world_cy___pyx_scope_struct_3_geni_rect(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect *p = (struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect *)o;
  if (p->__pyx_v_alen) {
    e = (*v)(p->__pyx_v_alen, a); if (e) return e;
  }
  if (p->__pyx_v_color) {
    e = (*v)(p->__pyx_v_color, a); if (e) return e;
  }
  if (p->__pyx_v_k) {
    e = (*v)(p->__pyx_v_k, a); if (e) return e;
  }
  if (p->__pyx_v_mi) {
    e = (*v)(p->__pyx_v_mi, a); if (e) return e;
  }
  if (p->__pyx_v_move_direc) {
    e = (*v)(p->__pyx_v_move_direc, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_x) {
    e = (*v)(p->__pyx_v_x, a); if (e) return e;
  }
  if (p->__pyx_v_y) {
    e = (*v)(p->__pyx_v_y, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_8world_cy___pyx_scope_struct_3_geni_rect = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.__pyx_scope_struct_3_geni_rect", /*tp_name*/
  sizeof(struct __pyx_obj_8world_cy___pyx_scope_struct_3_geni_rect), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8world_cy___pyx_scope_struct_3_geni_rect, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8world_cy___pyx_scope_struct_3_geni_rect, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8world_cy___pyx_scope_struct_3_geni_rect, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_array___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_array_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_array_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryview___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryviewslice___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "world_cy._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"randLinearDNA_with", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8world_cy_11randLinearDNA_with, METH_VARARGS|METH_KEYWORDS, 0},
  {"randLinearDNA", (PyCFunction)__pyx_pw_8world_cy_13randLinearDNA, METH_NOARGS, 0},
  {"construct_minion", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8world_cy_19construct_minion, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_world_cy(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_world_cy},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "world_cy",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_n_s_Brain, __pyx_k_Brain, sizeof(__pyx_k_Brain), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_ColorTrait, __pyx_k_ColorTrait, sizeof(__pyx_k_ColorTrait), 0, 0, 1, 1},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_n_s_FloatListTrait, __pyx_k_FloatListTrait, sizeof(__pyx_k_FloatListTrait), 0, 0, 1, 1},
  {&__pyx_n_s_FloatListTrait_yield_l, __pyx_k_FloatListTrait_yield_l, sizeof(__pyx_k_FloatListTrait_yield_l), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x63, __pyx_k_Incompatible_checksums_s_vs_0x63, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x63), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_k_Incompatible_checksums_s_vs_0xb0, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xb0), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_LinearBrain, __pyx_k_LinearBrain, sizeof(__pyx_k_LinearBrain), 0, 0, 1, 1},
  {&__pyx_n_s_LinearDNA, __pyx_k_LinearDNA, sizeof(__pyx_k_LinearDNA), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_n_s_Minion, __pyx_k_Minion, sizeof(__pyx_k_Minion), 0, 0, 1, 1},
  {&__pyx_n_s_MinionDLL, __pyx_k_MinionDLL, sizeof(__pyx_k_MinionDLL), 0, 0, 1, 1},
  {&__pyx_n_s_MinionDLLNode, __pyx_k_MinionDLLNode, sizeof(__pyx_k_MinionDLLNode), 0, 0, 1, 1},
  {&__pyx_kp_s_MinionDLL_out_of_range, __pyx_k_MinionDLL_out_of_range, sizeof(__pyx_k_MinionDLL_out_of_range), 0, 0, 1, 0},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_PositiveTrait, __pyx_k_PositiveTrait, sizeof(__pyx_k_PositiveTrait), 0, 0, 1, 1},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_n_s_UnitTrait, __pyx_k_UnitTrait, sizeof(__pyx_k_UnitTrait), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_n_s_World, __pyx_k_World, sizeof(__pyx_k_World), 0, 0, 1, 1},
  {&__pyx_n_s_World_body_rect, __pyx_k_World_body_rect, sizeof(__pyx_k_World_body_rect), 0, 0, 1, 1},
  {&__pyx_n_s_World_geni_rect, __pyx_k_World_geni_rect, sizeof(__pyx_k_World_geni_rect), 0, 0, 1, 1},
  {&__pyx_n_s_World_get_colors, __pyx_k_World_get_colors, sizeof(__pyx_k_World_get_colors), 0, 0, 1, 1},
  {&__pyx_kp_s__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 0, 1, 0},
  {&__pyx_kp_s__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 0, 1, 0},
  {&__pyx_kp_s__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 0, 1, 0},
  {&__pyx_n_s__63, __pyx_k__63, sizeof(__pyx_k__63), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_alen, __pyx_k_alen, sizeof(__pyx_k_alen), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_kp_s_at, __pyx_k_at, sizeof(__pyx_k_at), 0, 0, 1, 0},
  {&__pyx_n_s_at_2, __pyx_k_at_2, sizeof(__pyx_k_at_2), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_body_rect, __pyx_k_body_rect, sizeof(__pyx_k_body_rect), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_kp_s_color, __pyx_k_color, sizeof(__pyx_k_color), 0, 0, 1, 0},
  {&__pyx_n_s_colorTrait, __pyx_k_colorTrait, sizeof(__pyx_k_colorTrait), 0, 0, 1, 1},
  {&__pyx_n_s_color_2, __pyx_k_color_2, sizeof(__pyx_k_color_2), 0, 0, 1, 1},
  {&__pyx_n_s_contains_py, __pyx_k_contains_py, sizeof(__pyx_k_contains_py), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_ct, __pyx_k_ct, sizeof(__pyx_k_ct), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_kp_s_death_by, __pyx_k_death_by, sizeof(__pyx_k_death_by), 0, 0, 1, 0},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dll, __pyx_k_dll, sizeof(__pyx_k_dll), 0, 0, 1, 1},
  {&__pyx_n_s_dll_from_list, __pyx_k_dll_from_list, sizeof(__pyx_k_dll_from_list), 0, 0, 1, 1},
  {&__pyx_kp_s_dna, __pyx_k_dna, sizeof(__pyx_k_dna), 0, 0, 1, 0},
  {&__pyx_n_s_dna_2, __pyx_k_dna_2, sizeof(__pyx_k_dna_2), 0, 0, 1, 1},
  {&__pyx_kp_s_dnas, __pyx_k_dnas, sizeof(__pyx_k_dnas), 0, 0, 1, 0},
  {&__pyx_n_s_dnas_2, __pyx_k_dnas_2, sizeof(__pyx_k_dnas_2), 0, 0, 1, 1},
  {&__pyx_n_s_dnas_list, __pyx_k_dnas_list, sizeof(__pyx_k_dnas_list), 0, 0, 1, 1},
  {&__pyx_n_s_do_freeze, __pyx_k_do_freeze, sizeof(__pyx_k_do_freeze), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_kp_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 0},
  {&__pyx_n_s_end_2, __pyx_k_end_2, sizeof(__pyx_k_end_2), 0, 0, 1, 1},
  {&__pyx_kp_s_end_dna, __pyx_k_end_dna, sizeof(__pyx_k_end_dna), 0, 0, 1, 0},
  {&__pyx_kp_s_end_dnas, __pyx_k_end_dnas, sizeof(__pyx_k_end_dnas), 0, 0, 1, 0},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_kp_s_error_during, __pyx_k_error_during, sizeof(__pyx_k_error_during), 0, 0, 1, 0},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_s_freeze, __pyx_k_freeze, sizeof(__pyx_k_freeze), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_geni_rect, __pyx_k_geni_rect, sizeof(__pyx_k_geni_rect), 0, 0, 1, 1},
  {&__pyx_n_s_get_a, __pyx_k_get_a, sizeof(__pyx_k_get_a), 0, 0, 1, 1},
  {&__pyx_n_s_get_action, __pyx_k_get_action, sizeof(__pyx_k_get_action), 0, 0, 1, 1},
  {&__pyx_n_s_get_alen, __pyx_k_get_alen, sizeof(__pyx_k_get_alen), 0, 0, 1, 1},
  {&__pyx_n_s_get_c, __pyx_k_get_c, sizeof(__pyx_k_get_c), 0, 0, 1, 1},
  {&__pyx_n_s_get_color, __pyx_k_get_color, sizeof(__pyx_k_get_color), 0, 0, 1, 1},
  {&__pyx_n_s_get_colorTrait, __pyx_k_get_colorTrait, sizeof(__pyx_k_get_colorTrait), 0, 0, 1, 1},
  {&__pyx_n_s_get_colors, __pyx_k_get_colors, sizeof(__pyx_k_get_colors), 0, 0, 1, 1},
  {&__pyx_n_s_get_dna, __pyx_k_get_dna, sizeof(__pyx_k_get_dna), 0, 0, 1, 1},
  {&__pyx_n_s_get_group_sizes, __pyx_k_get_group_sizes, sizeof(__pyx_k_get_group_sizes), 0, 0, 1, 1},
  {&__pyx_n_s_get_mass, __pyx_k_get_mass, sizeof(__pyx_k_get_mass), 0, 0, 1, 1},
  {&__pyx_n_s_get_mi, __pyx_k_get_mi, sizeof(__pyx_k_get_mi), 0, 0, 1, 1},
  {&__pyx_n_s_get_mins, __pyx_k_get_mins, sizeof(__pyx_k_get_mins), 0, 0, 1, 1},
  {&__pyx_n_s_get_move_direc, __pyx_k_get_move_direc, sizeof(__pyx_k_get_move_direc), 0, 0, 1, 1},
  {&__pyx_n_s_get_nth_py, __pyx_k_get_nth_py, sizeof(__pyx_k_get_nth_py), 0, 0, 1, 1},
  {&__pyx_n_s_get_pos, __pyx_k_get_pos, sizeof(__pyx_k_get_pos), 0, 0, 1, 1},
  {&__pyx_n_s_get_traits, __pyx_k_get_traits, sizeof(__pyx_k_get_traits), 0, 0, 1, 1},
  {&__pyx_n_s_get_wdim, __pyx_k_get_wdim, sizeof(__pyx_k_get_wdim), 0, 0, 1, 1},
  {&__pyx_n_s_get_xsize, __pyx_k_get_xsize, sizeof(__pyx_k_get_xsize), 0, 0, 1, 1},
  {&__pyx_n_s_get_ysize, __pyx_k_get_ysize, sizeof(__pyx_k_get_ysize), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_group_sizes, __pyx_k_group_sizes, sizeof(__pyx_k_group_sizes), 0, 0, 1, 1},
  {&__pyx_n_s_group_sizes_len, __pyx_k_group_sizes_len, sizeof(__pyx_k_group_sizes_len), 0, 0, 1, 1},
  {&__pyx_n_s_halluc, __pyx_k_halluc, sizeof(__pyx_k_halluc), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_is_empty, __pyx_k_is_empty, sizeof(__pyx_k_is_empty), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_n_s_lines, __pyx_k_lines, sizeof(__pyx_k_lines), 0, 0, 1, 1},
  {&__pyx_n_s_ma1, __pyx_k_ma1, sizeof(__pyx_k_ma1), 0, 0, 1, 1},
  {&__pyx_n_s_ma2, __pyx_k_ma2, sizeof(__pyx_k_ma2), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mat, __pyx_k_mat, sizeof(__pyx_k_mat), 0, 0, 1, 1},
  {&__pyx_n_s_mat_a, __pyx_k_mat_a, sizeof(__pyx_k_mat_a), 0, 0, 1, 1},
  {&__pyx_kp_s_maxage, __pyx_k_maxage, sizeof(__pyx_k_maxage), 0, 0, 1, 0},
  {&__pyx_n_s_maxageTrait, __pyx_k_maxageTrait, sizeof(__pyx_k_maxageTrait), 0, 0, 1, 1},
  {&__pyx_kp_s_maxsize, __pyx_k_maxsize, sizeof(__pyx_k_maxsize), 0, 0, 1, 0},
  {&__pyx_n_s_maxsizeTrait, __pyx_k_maxsizeTrait, sizeof(__pyx_k_maxsizeTrait), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_mi, __pyx_k_mi, sizeof(__pyx_k_mi), 0, 0, 1, 1},
  {&__pyx_n_s_mi_list, __pyx_k_mi_list, sizeof(__pyx_k_mi_list), 0, 0, 1, 1},
  {&__pyx_kp_s_mins_negative_in, __pyx_k_mins_negative_in, sizeof(__pyx_k_mins_negative_in), 0, 0, 1, 0},
  {&__pyx_n_s_mis, __pyx_k_mis, sizeof(__pyx_k_mis), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_ms1, __pyx_k_ms1, sizeof(__pyx_k_ms1), 0, 0, 1, 1},
  {&__pyx_n_s_ms2, __pyx_k_ms2, sizeof(__pyx_k_ms2), 0, 0, 1, 1},
  {&__pyx_n_s_mst, __pyx_k_mst, sizeof(__pyx_k_mst), 0, 0, 1, 1},
  {&__pyx_n_s_mst_a, __pyx_k_mst_a, sizeof(__pyx_k_mst_a), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_new_merge_thres, __pyx_k_new_merge_thres, sizeof(__pyx_k_new_merge_thres), 0, 0, 1, 1},
  {&__pyx_n_s_new_mut_per_diff, __pyx_k_new_mut_per_diff, sizeof(__pyx_k_new_mut_per_diff), 0, 0, 1, 1},
  {&__pyx_n_s_new_vision_range, __pyx_k_new_vision_range, sizeof(__pyx_k_new_vision_range), 0, 0, 1, 1},
  {&__pyx_n_s_new_vision_resolution, __pyx_k_new_vision_resolution, sizeof(__pyx_k_new_vision_resolution), 0, 0, 1, 1},
  {&__pyx_n_s_next, __pyx_k_next, sizeof(__pyx_k_next), 0, 0, 1, 1},
  {&__pyx_n_s_no_age, __pyx_k_no_age, sizeof(__pyx_k_no_age), 0, 0, 1, 1},
  {&__pyx_n_s_no_birth, __pyx_k_no_birth, sizeof(__pyx_k_no_birth), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_no_eat, __pyx_k_no_eat, sizeof(__pyx_k_no_eat), 0, 0, 1, 1},
  {&__pyx_n_s_no_energy, __pyx_k_no_energy, sizeof(__pyx_k_no_energy), 0, 0, 1, 1},
  {&__pyx_n_s_no_excrete, __pyx_k_no_excrete, sizeof(__pyx_k_no_excrete), 0, 0, 1, 1},
  {&__pyx_n_s_no_hunt, __pyx_k_no_hunt, sizeof(__pyx_k_no_hunt), 0, 0, 1, 1},
  {&__pyx_kp_s_no_problem_in, __pyx_k_no_problem_in, sizeof(__pyx_k_no_problem_in), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_num, __pyx_k_num, sizeof(__pyx_k_num), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_prev, __pyx_k_prev, sizeof(__pyx_k_prev), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_push_py, __pyx_k_push_py, sizeof(__pyx_k_push_py), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Brain, __pyx_k_pyx_unpickle_Brain, sizeof(__pyx_k_pyx_unpickle_Brain), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_rand, __pyx_k_rand, sizeof(__pyx_k_rand), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read_list_of_dnas_file, __pyx_k_read_list_of_dnas_file, sizeof(__pyx_k_read_list_of_dnas_file), 0, 0, 1, 1},
  {&__pyx_n_s_readlines, __pyx_k_readlines, sizeof(__pyx_k_readlines), 0, 0, 1, 1},
  {&__pyx_n_s_record_pedigree, __pyx_k_record_pedigree, sizeof(__pyx_k_record_pedigree), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_register, __pyx_k_register, sizeof(__pyx_k_register), 0, 0, 1, 1},
  {&__pyx_n_s_sample, __pyx_k_sample, sizeof(__pyx_k_sample), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_set_consum, __pyx_k_set_consum, sizeof(__pyx_k_set_consum), 0, 0, 1, 1},
  {&__pyx_n_s_set_heredity, __pyx_k_set_heredity, sizeof(__pyx_k_set_heredity), 0, 0, 1, 1},
  {&__pyx_n_s_set_size, __pyx_k_set_size, sizeof(__pyx_k_set_size), 0, 0, 1, 1},
  {&__pyx_n_s_set_traits_range, __pyx_k_set_traits_range, sizeof(__pyx_k_set_traits_range), 0, 0, 1, 1},
  {&__pyx_n_s_set_vision, __pyx_k_set_vision, sizeof(__pyx_k_set_vision), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_shuffle, __pyx_k_shuffle, sizeof(__pyx_k_shuffle), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_kp_s_snapshot_not_assigned_in, __pyx_k_snapshot_not_assigned_in, sizeof(__pyx_k_snapshot_not_assigned_in), 0, 0, 1, 0},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_total_mass, __pyx_k_total_mass, sizeof(__pyx_k_total_mass), 0, 0, 1, 1},
  {&__pyx_n_s_uintp, __pyx_k_uintp, sizeof(__pyx_k_uintp), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_kp_s_uptake, __pyx_k_uptake, sizeof(__pyx_k_uptake), 0, 0, 1, 0},
  {&__pyx_n_s_uptakeTrait, __pyx_k_uptakeTrait, sizeof(__pyx_k_uptakeTrait), 0, 0, 1, 1},
  {&__pyx_n_s_ut1, __pyx_k_ut1, sizeof(__pyx_k_ut1), 0, 0, 1, 1},
  {&__pyx_n_s_ut2, __pyx_k_ut2, sizeof(__pyx_k_ut2), 0, 0, 1, 1},
  {&__pyx_n_s_utt, __pyx_k_utt, sizeof(__pyx_k_utt), 0, 0, 1, 1},
  {&__pyx_n_s_utt_a, __pyx_k_utt_a, sizeof(__pyx_k_utt_a), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_wdim, __pyx_k_wdim, sizeof(__pyx_k_wdim), 0, 0, 1, 1},
  {&__pyx_kp_s_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 0, 1, 0},
  {&__pyx_n_s_weightsTrait, __pyx_k_weightsTrait, sizeof(__pyx_k_weightsTrait), 0, 0, 1, 1},
  {&__pyx_n_s_weights_2, __pyx_k_weights_2, sizeof(__pyx_k_weights_2), 0, 0, 1, 1},
  {&__pyx_n_s_world_cy, __pyx_k_world_cy, sizeof(__pyx_k_world_cy), 0, 0, 1, 1},
  {&__pyx_kp_s_world_cy_pyx, __pyx_k_world_cy_pyx, sizeof(__pyx_k_world_cy_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_write_list_of_dnas_file, __pyx_k_write_list_of_dnas_file, sizeof(__pyx_k_write_list_of_dnas_file), 0, 0, 1, 1},
  {&__pyx_n_s_wt, __pyx_k_wt, sizeof(__pyx_k_wt), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xsize, __pyx_k_xsize, sizeof(__pyx_k_xsize), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_yield_l, __pyx_k_yield_l, sizeof(__pyx_k_yield_l), 0, 0, 1, 1},
  {&__pyx_n_s_ysize, __pyx_k_ysize, sizeof(__pyx_k_ysize), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 220, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(1, 356, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(1, 740, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 133, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 151, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(0, 404, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(0, 613, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 832, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "world_cy.pyx":408
 *         dnas=[]
 *         while True: #parsing one dna per loop
 *             while len(lines[at])<4 or lines[at][:4]!="#dna":             # <<<<<<<<<<<<<<
 *                 at+=1
 *             while len(lines[at])<1 or lines[at][0]!="<":
 */
  __pyx_slice__17 = PySlice_New(Py_None, __pyx_int_4, Py_None); if (unlikely(!__pyx_slice__17)) __PYX_ERR(1, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__17);
  __Pyx_GIVEREF(__pyx_slice__17);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "world_cy.pyx":560
 *     mi=Minion(dna)
 *     mi.take_mass(<double>((1+2*alen)**2-9))
 *     if pos==(-1,-1):             # <<<<<<<<<<<<<<
 *         pos[0]=randint(0,xsize-1)
 *         pos[1]=randint(0,ysize-1)
 */
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_int_neg_1, __pyx_int_neg_1); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "world_cy.pyx":728
 *     def get_nth_py(self,n):
 *         if self.len<=n:
 *             raise Exception("MinionDLL out of range!!")             # <<<<<<<<<<<<<<
 *         node=self.head
 *         if n==0:
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_MinionDLL_out_of_range); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "world_cy.pyx":1525
 *         blue_num=0
 *         for mi in self.mis:
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):             # <<<<<<<<<<<<<<
 *                 red_num+=1
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):
 */
  __pyx_tuple__33 = PyTuple_Pack(3, __pyx_int_255, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 1525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "world_cy.pyx":1527
 *             if mi.get_dna().get_colorTrait().get_c()==(255,0,0):
 *                 red_num+=1
 *             if mi.get_dna().get_colorTrait().get_c()==(0,0,255):             # <<<<<<<<<<<<<<
 *                 blue_num+=1
 *         return (red_num,blue_num)
 */
  __pyx_tuple__34 = PyTuple_Pack(3, __pyx_int_0, __pyx_int_0, __pyx_int_255); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 1527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_Cannot_assign_to_read_only_memor); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_writable_memory_vi); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__49 = PyTuple_New(1); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__49, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "View.MemoryView":682
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
  __pyx_slice__52 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__52)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__52);
  __Pyx_GIVEREF(__pyx_slice__52);

  /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "world_cy.pyx":41
 *     double consum_exp=0.7
 * 
 * def set_consum(a,e):             # <<<<<<<<<<<<<<
 *     global avg_consum_rate
 *     global consum_exp
 */
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_n_s_a, __pyx_n_s_e); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj_ = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_world_cy_pyx, __pyx_n_s_set_consum, 41, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj_)) __PYX_ERR(1, 41, __pyx_L1_error)

  /* "world_cy.pyx":47
 *     consum_exp=e
 * 
 * def set_size(x,y):             # <<<<<<<<<<<<<<
 *     global xsize
 *     global ysize
 */
  __pyx_tuple__58 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_y); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_world_cy_pyx, __pyx_n_s_set_size, 47, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(1, 47, __pyx_L1_error)

  /* "world_cy.pyx":53
 *     ysize=y
 * 
 * def set_traits_range(ms1,ms2,ut1,ut2,ma1,ma2):             # <<<<<<<<<<<<<<
 *     global min_maxsize,max_maxsize,min_uptake,max_uptake,min_maxage,max_maxage
 *     min_maxsize=ms1
 */
  __pyx_tuple__59 = PyTuple_Pack(6, __pyx_n_s_ms1, __pyx_n_s_ms2, __pyx_n_s_ut1, __pyx_n_s_ut2, __pyx_n_s_ma1, __pyx_n_s_ma2); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(1, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(6, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_world_cy_pyx, __pyx_n_s_set_traits_range, 53, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(1, 53, __pyx_L1_error)

  /* "world_cy.pyx":63
 * 
 * 
 * def set_vision(new_vision_range,new_vision_resolution):             # <<<<<<<<<<<<<<
 *     global vision_range
 *     global vision_resolution
 */
  __pyx_tuple__60 = PyTuple_Pack(2, __pyx_n_s_new_vision_range, __pyx_n_s_new_vision_resolution); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_world_cy_pyx, __pyx_n_s_set_vision, 63, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(1, 63, __pyx_L1_error)

  /* "world_cy.pyx":69
 *     vision_resolution=new_vision_resolution
 * 
 * def set_heredity(new_merge_thres,new_mut_per_diff):             # <<<<<<<<<<<<<<
 *     global merge_thres
 *     global mut_per_diff
 */
  __pyx_tuple__61 = PyTuple_Pack(2, __pyx_n_s_new_merge_thres, __pyx_n_s_new_mut_per_diff); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_world_cy_pyx, __pyx_n_s_set_heredity, 69, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(1, 69, __pyx_L1_error)

  /* "world_cy.pyx":355
 *     return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)
 * 
 * def write_list_of_dnas_file(l,filename):             # <<<<<<<<<<<<<<
 *     f=open(filename,'w')
 *     f.write(str(len(l))+"\n")
 */
  __pyx_tuple__62 = PyTuple_Pack(17, __pyx_n_s_l, __pyx_n_s_filename, __pyx_n_s_f, __pyx_n_s_group_sizes, __pyx_n_s_a, __pyx_n_s_j, __pyx_n_s_dnas_2, __pyx_n_s_i, __pyx_n_s_dna_2, __pyx_n_s_ct, __pyx_n_s_mst, __pyx_n_s_utt, __pyx_n_s_mat, __pyx_n_s_wt, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(1, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(2, 0, 17, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_world_cy_pyx, __pyx_n_s_write_list_of_dnas_file, 355, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(1, 355, __pyx_L1_error)

  /* "world_cy.pyx":393
 *     f.write("#end")
 *     f.close()
 * def read_list_of_dnas_file(filename):             # <<<<<<<<<<<<<<
 *     f=open(filename,'r')
 *     lines=f.readlines()
 */
  __pyx_tuple__64 = PyTuple_Pack(23, __pyx_n_s_filename, __pyx_n_s_f, __pyx_n_s_lines, __pyx_n_s_num, __pyx_n_s_wdim, __pyx_n_s_group_sizes_len, __pyx_n_s_group_sizes, __pyx_n_s_i, __pyx_n_s_at_2, __pyx_n_s_dnas_list, __pyx_n_s__63, __pyx_n_s_dnas_2, __pyx_n_s_r, __pyx_n_s_g, __pyx_n_s_b, __pyx_n_s_ct, __pyx_n_s_a, __pyx_n_s_mst, __pyx_n_s_utt, __pyx_n_s_mat, __pyx_n_s_l, __pyx_n_s_wt, __pyx_n_s_dna_2); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(1, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 23, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_world_cy_pyx, __pyx_n_s_read_list_of_dnas_file, 393, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(1, 393, __pyx_L1_error)

  /* "world_cy.pyx":707
 *     def get_mi(self):
 *         return self.mi
 * def dll_from_list(mi_list):             # <<<<<<<<<<<<<<
 *     dll=MinionDLL()
 *     for mi in mi_list:
 */
  __pyx_tuple__65 = PyTuple_Pack(3, __pyx_n_s_mi_list, __pyx_n_s_dll, __pyx_n_s_mi); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_world_cy_pyx, __pyx_n_s_dll_from_list, 707, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(1, 707, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_Brain(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__66 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Brain, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__72 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_float_0_ = PyFloat_FromDouble(0.); if (unlikely(!__pyx_float_0_)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_15000_2 = PyFloat_FromDouble(15000.2); if (unlikely(!__pyx_float_15000_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_255 = PyInt_FromLong(255); if (unlikely(!__pyx_int_255)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_104812318 = PyInt_FromLong(104812318L); if (unlikely(!__pyx_int_104812318)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("randLinearDNA_with", (void (*)(void))__pyx_f_8world_cy_randLinearDNA_with, "struct __pyx_obj_8world_cy_LinearDNA *(__pyx_ctuple_int__and_int__and_int, double, double, double, int __pyx_skip_dispatch)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("randLinearDNA", (void (*)(void))__pyx_f_8world_cy_randLinearDNA, "struct __pyx_obj_8world_cy_LinearDNA *(int __pyx_skip_dispatch)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("apply_linear", (void (*)(void))__pyx_f_8world_cy_apply_linear, "__Pyx_memviewslice (__Pyx_memviewslice, __Pyx_memviewslice)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("construct_minion", (void (*)(void))__pyx_f_8world_cy_construct_minion, "struct __pyx_obj_8world_cy_Minion *(struct __pyx_obj_8world_cy_LinearDNA *, int, __pyx_ctuple_int__and_int, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_8world_cy_ColorTrait = &__pyx_vtable_8world_cy_ColorTrait;
  __pyx_vtable_8world_cy_ColorTrait.mutate = (void (*)(struct __pyx_obj_8world_cy_ColorTrait *, double))__pyx_f_8world_cy_10ColorTrait_mutate;
  __pyx_vtable_8world_cy_ColorTrait.mixed = (struct __pyx_obj_8world_cy_ColorTrait *(*)(struct __pyx_obj_8world_cy_ColorTrait *, struct __pyx_obj_8world_cy_ColorTrait *))__pyx_f_8world_cy_10ColorTrait_mixed;
  __pyx_vtable_8world_cy_ColorTrait.normalized_difference = (double (*)(struct __pyx_obj_8world_cy_ColorTrait *, struct __pyx_obj_8world_cy_ColorTrait *))__pyx_f_8world_cy_10ColorTrait_normalized_difference;
  if (PyType_Ready(&__pyx_type_8world_cy_ColorTrait) < 0) __PYX_ERR(1, 75, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8world_cy_ColorTrait.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8world_cy_ColorTrait.tp_dictoffset && __pyx_type_8world_cy_ColorTrait.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8world_cy_ColorTrait.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8world_cy_ColorTrait.tp_dict, __pyx_vtabptr_8world_cy_ColorTrait) < 0) __PYX_ERR(1, 75, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ColorTrait, (PyObject *)&__pyx_type_8world_cy_ColorTrait) < 0) __PYX_ERR(1, 75, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8world_cy_ColorTrait) < 0) __PYX_ERR(1, 75, __pyx_L1_error)
  __pyx_ptype_8world_cy_ColorTrait = &__pyx_type_8world_cy_ColorTrait;
  __pyx_vtabptr_8world_cy_PositiveTrait = &__pyx_vtable_8world_cy_PositiveTrait;
  __pyx_vtable_8world_cy_PositiveTrait.mutate = (void (*)(struct __pyx_obj_8world_cy_PositiveTrait *, double))__pyx_f_8world_cy_13PositiveTrait_mutate;
  __pyx_vtable_8world_cy_PositiveTrait.mixed = (struct __pyx_obj_8world_cy_PositiveTrait *(*)(struct __pyx_obj_8world_cy_PositiveTrait *, struct __pyx_obj_8world_cy_PositiveTrait *))__pyx_f_8world_cy_13PositiveTrait_mixed;
  __pyx_vtable_8world_cy_PositiveTrait.normalized_difference = (double (*)(struct __pyx_obj_8world_cy_PositiveTrait *, struct __pyx_obj_8world_cy_PositiveTrait *))__pyx_f_8world_cy_13PositiveTrait_normalized_difference;
  if (PyType_Ready(&__pyx_type_8world_cy_PositiveTrait) < 0) __PYX_ERR(1, 159, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8world_cy_PositiveTrait.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8world_cy_PositiveTrait.tp_dictoffset && __pyx_type_8world_cy_PositiveTrait.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8world_cy_PositiveTrait.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8world_cy_PositiveTrait.tp_dict, __pyx_vtabptr_8world_cy_PositiveTrait) < 0) __PYX_ERR(1, 159, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PositiveTrait, (PyObject *)&__pyx_type_8world_cy_PositiveTrait) < 0) __PYX_ERR(1, 159, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8world_cy_PositiveTrait) < 0) __PYX_ERR(1, 159, __pyx_L1_error)
  __pyx_ptype_8world_cy_PositiveTrait = &__pyx_type_8world_cy_PositiveTrait;
  __pyx_vtabptr_8world_cy_UnitTrait = &__pyx_vtable_8world_cy_UnitTrait;
  __pyx_vtable_8world_cy_UnitTrait.mutate = (void (*)(struct __pyx_obj_8world_cy_UnitTrait *, double))__pyx_f_8world_cy_9UnitTrait_mutate;
  __pyx_vtable_8world_cy_UnitTrait.mixed = (struct __pyx_obj_8world_cy_UnitTrait *(*)(struct __pyx_obj_8world_cy_UnitTrait *, struct __pyx_obj_8world_cy_UnitTrait *))__pyx_f_8world_cy_9UnitTrait_mixed;
  __pyx_vtable_8world_cy_UnitTrait.normalized_difference = (double (*)(struct __pyx_obj_8world_cy_UnitTrait *, struct __pyx_obj_8world_cy_UnitTrait *))__pyx_f_8world_cy_9UnitTrait_normalized_difference;
  if (PyType_Ready(&__pyx_type_8world_cy_UnitTrait) < 0) __PYX_ERR(1, 186, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8world_cy_UnitTrait.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8world_cy_UnitTrait.tp_dictoffset && __pyx_type_8world_cy_UnitTrait.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8world_cy_UnitTrait.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8world_cy_UnitTrait.tp_dict, __pyx_vtabptr_8world_cy_UnitTrait) < 0) __PYX_ERR(1, 186, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_UnitTrait, (PyObject *)&__pyx_type_8world_cy_UnitTrait) < 0) __PYX_ERR(1, 186, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8world_cy_UnitTrait) < 0) __PYX_ERR(1, 186, __pyx_L1_error)
  __pyx_ptype_8world_cy_UnitTrait = &__pyx_type_8world_cy_UnitTrait;
  __pyx_vtabptr_8world_cy_FloatListTrait = &__pyx_vtable_8world_cy_FloatListTrait;
  __pyx_vtable_8world_cy_FloatListTrait.mutate = (void (*)(struct __pyx_obj_8world_cy_FloatListTrait *, double))__pyx_f_8world_cy_14FloatListTrait_mutate;
  __pyx_vtable_8world_cy_FloatListTrait.mixed = (struct __pyx_obj_8world_cy_FloatListTrait *(*)(struct __pyx_obj_8world_cy_FloatListTrait *, struct __pyx_obj_8world_cy_FloatListTrait *))__pyx_f_8world_cy_14FloatListTrait_mixed;
  __pyx_vtable_8world_cy_FloatListTrait.normalized_difference = (double (*)(struct __pyx_obj_8world_cy_FloatListTrait *, struct __pyx_obj_8world_cy_FloatListTrait *))__pyx_f_8world_cy_14FloatListTrait_normalized_difference;
  if (PyType_Ready(&__pyx_type_8world_cy_FloatListTrait) < 0) __PYX_ERR(1, 215, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8world_cy_FloatListTrait.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8world_cy_FloatListTrait.tp_dictoffset && __pyx_type_8world_cy_FloatListTrait.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8world_cy_FloatListTrait.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8world_cy_FloatListTrait.tp_dict, __pyx_vtabptr_8world_cy_FloatListTrait) < 0) __PYX_ERR(1, 215, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FloatListTrait, (PyObject *)&__pyx_type_8world_cy_FloatListTrait) < 0) __PYX_ERR(1, 215, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8world_cy_FloatListTrait) < 0) __PYX_ERR(1, 215, __pyx_L1_error)
  __pyx_ptype_8world_cy_FloatListTrait = &__pyx_type_8world_cy_FloatListTrait;
  __pyx_vtabptr_8world_cy_LinearDNA = &__pyx_vtable_8world_cy_LinearDNA;
  __pyx_vtable_8world_cy_LinearDNA.mergeable = (int (*)(struct __pyx_obj_8world_cy_LinearDNA *, struct __pyx_obj_8world_cy_LinearDNA *))__pyx_f_8world_cy_9LinearDNA_mergeable;
  __pyx_vtable_8world_cy_LinearDNA.merge = (struct __pyx_obj_8world_cy_LinearDNA *(*)(struct __pyx_obj_8world_cy_LinearDNA *, struct __pyx_obj_8world_cy_LinearDNA *))__pyx_f_8world_cy_9LinearDNA_merge;
  __pyx_vtable_8world_cy_LinearDNA.translate = (__pyx_ctuple_68ea0____dunderpyx_ctuple_int__dunderand_int__dunderand_int__and_double__and_double__and_double__etc (*)(struct __pyx_obj_8world_cy_LinearDNA *))__pyx_f_8world_cy_9LinearDNA_translate;
  __pyx_vtable_8world_cy_LinearDNA.translate_weights = (__Pyx_memviewslice (*)(struct __pyx_obj_8world_cy_LinearDNA *))__pyx_f_8world_cy_9LinearDNA_translate_weights;
  if (PyType_Ready(&__pyx_type_8world_cy_LinearDNA) < 0) __PYX_ERR(1, 462, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8world_cy_LinearDNA.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8world_cy_LinearDNA.tp_dictoffset && __pyx_type_8world_cy_LinearDNA.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8world_cy_LinearDNA.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8world_cy_LinearDNA.tp_dict, __pyx_vtabptr_8world_cy_LinearDNA) < 0) __PYX_ERR(1, 462, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LinearDNA, (PyObject *)&__pyx_type_8world_cy_LinearDNA) < 0) __PYX_ERR(1, 462, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8world_cy_LinearDNA) < 0) __PYX_ERR(1, 462, __pyx_L1_error)
  __pyx_ptype_8world_cy_LinearDNA = &__pyx_type_8world_cy_LinearDNA;
  __pyx_vtabptr_8world_cy_Brain = &__pyx_vtable_8world_cy_Brain;
  __pyx_vtable_8world_cy_Brain.control = (void (*)(struct __pyx_obj_8world_cy_Brain *, struct __pyx_obj_8world_cy_Minion *, __Pyx_memviewslice))__pyx_f_8world_cy_5Brain_control;
  if (PyType_Ready(&__pyx_type_8world_cy_Brain) < 0) __PYX_ERR(1, 509, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8world_cy_Brain.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8world_cy_Brain.tp_dictoffset && __pyx_type_8world_cy_Brain.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8world_cy_Brain.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8world_cy_Brain.tp_dict, __pyx_vtabptr_8world_cy_Brain) < 0) __PYX_ERR(1, 509, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Brain, (PyObject *)&__pyx_type_8world_cy_Brain) < 0) __PYX_ERR(1, 509, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8world_cy_Brain) < 0) __PYX_ERR(1, 509, __pyx_L1_error)
  __pyx_ptype_8world_cy_Brain = &__pyx_type_8world_cy_Brain;
  __pyx_vtabptr_8world_cy_LinearBrain = &__pyx_vtable_8world_cy_LinearBrain;
  __pyx_vtable_8world_cy_LinearBrain.__pyx_base = *__pyx_vtabptr_8world_cy_Brain;
  __pyx_vtable_8world_cy_LinearBrain.__pyx_base.control = (void (*)(struct __pyx_obj_8world_cy_Brain *, struct __pyx_obj_8world_cy_Minion *, __Pyx_memviewslice))__pyx_f_8world_cy_11LinearBrain_control;
  __pyx_type_8world_cy_LinearBrain.tp_base = __pyx_ptype_8world_cy_Brain;
  if (PyType_Ready(&__pyx_type_8world_cy_LinearBrain) < 0) __PYX_ERR(1, 531, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8world_cy_LinearBrain.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8world_cy_LinearBrain.tp_dictoffset && __pyx_type_8world_cy_LinearBrain.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8world_cy_LinearBrain.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8world_cy_LinearBrain.tp_dict, __pyx_vtabptr_8world_cy_LinearBrain) < 0) __PYX_ERR(1, 531, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LinearBrain, (PyObject *)&__pyx_type_8world_cy_LinearBrain) < 0) __PYX_ERR(1, 531, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8world_cy_LinearBrain) < 0) __PYX_ERR(1, 531, __pyx_L1_error)
  __pyx_ptype_8world_cy_LinearBrain = &__pyx_type_8world_cy_LinearBrain;
  __pyx_vtabptr_8world_cy_Minion = &__pyx_vtable_8world_cy_Minion;
  __pyx_vtable_8world_cy_Minion.increase_age = (int (*)(struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_6Minion_increase_age;
  __pyx_vtable_8world_cy_Minion.energy_with_constant = (double (*)(struct __pyx_obj_8world_cy_Minion *, double))__pyx_f_8world_cy_6Minion_energy_with_constant;
  __pyx_vtable_8world_cy_Minion.take_energy = (void (*)(struct __pyx_obj_8world_cy_Minion *, double))__pyx_f_8world_cy_6Minion_take_energy;
  __pyx_vtable_8world_cy_Minion.loss_energy = (int (*)(struct __pyx_obj_8world_cy_Minion *, double))__pyx_f_8world_cy_6Minion_loss_energy;
  __pyx_vtable_8world_cy_Minion.adjust_energy_from_mass = (void (*)(struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_6Minion_adjust_energy_from_mass;
  __pyx_vtable_8world_cy_Minion.take_mass = (void (*)(struct __pyx_obj_8world_cy_Minion *, double))__pyx_f_8world_cy_6Minion_take_mass;
  __pyx_vtable_8world_cy_Minion.loss_mass = (void (*)(struct __pyx_obj_8world_cy_Minion *, double))__pyx_f_8world_cy_6Minion_loss_mass;
  __pyx_vtable_8world_cy_Minion.mergeable = (int (*)(struct __pyx_obj_8world_cy_Minion *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_6Minion_mergeable;
  __pyx_vtable_8world_cy_Minion.get_child = (struct __pyx_obj_8world_cy_Minion *(*)(struct __pyx_obj_8world_cy_Minion *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_6Minion_get_child;
  __pyx_vtable_8world_cy_Minion.get_input = (__Pyx_memviewslice (*)(struct __pyx_obj_8world_cy_Minion *, __Pyx_memviewslice))__pyx_f_8world_cy_6Minion_get_input;
  if (PyType_Ready(&__pyx_type_8world_cy_Minion) < 0) __PYX_ERR(1, 571, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8world_cy_Minion.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8world_cy_Minion.tp_dictoffset && __pyx_type_8world_cy_Minion.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8world_cy_Minion.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8world_cy_Minion.tp_dict, __pyx_vtabptr_8world_cy_Minion) < 0) __PYX_ERR(1, 571, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Minion, (PyObject *)&__pyx_type_8world_cy_Minion) < 0) __PYX_ERR(1, 571, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8world_cy_Minion) < 0) __PYX_ERR(1, 571, __pyx_L1_error)
  __pyx_ptype_8world_cy_Minion = &__pyx_type_8world_cy_Minion;
  if (PyType_Ready(&__pyx_type_8world_cy_MinionDLLNode) < 0) __PYX_ERR(1, 695, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8world_cy_MinionDLLNode.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8world_cy_MinionDLLNode.tp_dictoffset && __pyx_type_8world_cy_MinionDLLNode.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8world_cy_MinionDLLNode.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MinionDLLNode, (PyObject *)&__pyx_type_8world_cy_MinionDLLNode) < 0) __PYX_ERR(1, 695, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8world_cy_MinionDLLNode) < 0) __PYX_ERR(1, 695, __pyx_L1_error)
  __pyx_ptype_8world_cy_MinionDLLNode = &__pyx_type_8world_cy_MinionDLLNode;
  __pyx_vtabptr_8world_cy_MinionDLL = &__pyx_vtable_8world_cy_MinionDLL;
  __pyx_vtable_8world_cy_MinionDLL.prev = (struct __pyx_obj_8world_cy_MinionDLLNode *(*)(struct __pyx_obj_8world_cy_MinionDLL *, struct __pyx_obj_8world_cy_MinionDLLNode *))__pyx_f_8world_cy_9MinionDLL_prev;
  __pyx_vtable_8world_cy_MinionDLL.next = (struct __pyx_obj_8world_cy_MinionDLLNode *(*)(struct __pyx_obj_8world_cy_MinionDLL *, struct __pyx_obj_8world_cy_MinionDLLNode *))__pyx_f_8world_cy_9MinionDLL_next;
  __pyx_vtable_8world_cy_MinionDLL.push = (struct __pyx_obj_8world_cy_MinionDLLNode *(*)(struct __pyx_obj_8world_cy_MinionDLL *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_9MinionDLL_push;
  __pyx_vtable_8world_cy_MinionDLL.remove_and_get_next = (struct __pyx_obj_8world_cy_MinionDLLNode *(*)(struct __pyx_obj_8world_cy_MinionDLL *, struct __pyx_obj_8world_cy_MinionDLLNode *))__pyx_f_8world_cy_9MinionDLL_remove_and_get_next;
  __pyx_vtable_8world_cy_MinionDLL.remove_by_link = (void (*)(struct __pyx_obj_8world_cy_MinionDLL *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_9MinionDLL_remove_by_link;
  __pyx_vtable_8world_cy_MinionDLL.remove_by_search = (void (*)(struct __pyx_obj_8world_cy_MinionDLL *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_9MinionDLL_remove_by_search;
  __pyx_vtable_8world_cy_MinionDLL.contains = (int (*)(struct __pyx_obj_8world_cy_MinionDLL *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_9MinionDLL_contains;
  if (PyType_Ready(&__pyx_type_8world_cy_MinionDLL) < 0) __PYX_ERR(1, 712, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8world_cy_MinionDLL.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8world_cy_MinionDLL.tp_dictoffset && __pyx_type_8world_cy_MinionDLL.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8world_cy_MinionDLL.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8world_cy_MinionDLL.tp_dict, __pyx_vtabptr_8world_cy_MinionDLL) < 0) __PYX_ERR(1, 712, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MinionDLL, (PyObject *)&__pyx_type_8world_cy_MinionDLL) < 0) __PYX_ERR(1, 712, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8world_cy_MinionDLL) < 0) __PYX_ERR(1, 712, __pyx_L1_error)
  __pyx_ptype_8world_cy_MinionDLL = &__pyx_type_8world_cy_MinionDLL;
  __pyx_vtabptr_8world_cy_World = &__pyx_vtable_8world_cy_World;
  __pyx_vtable_8world_cy_World.__pyx_register = (void (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_5World_register;
  __pyx_vtable_8world_cy_World.unregister_deads = (void (*)(struct __pyx_obj_8world_cy_World *))__pyx_f_8world_cy_5World_unregister_deads;
  __pyx_vtable_8world_cy_World.take_mass = (void (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, double))__pyx_f_8world_cy_5World_take_mass;
  __pyx_vtable_8world_cy_World.loss_mass = (void (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, double))__pyx_f_8world_cy_5World_loss_mass;
  __pyx_vtable_8world_cy_World.take_energy = (void (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, double))__pyx_f_8world_cy_5World_take_energy;
  __pyx_vtable_8world_cy_World.loss_energy = (int (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, double))__pyx_f_8world_cy_5World_loss_energy;
  __pyx_vtable_8world_cy_World.childbirth = (void (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_5World_childbirth;
  __pyx_vtable_8world_cy_World.huntable = (int (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_5World_huntable;
  __pyx_vtable_8world_cy_World.mk_corpse = (void (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_5World_mk_corpse;
  __pyx_vtable_8world_cy_World.kill = (void (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, int))__pyx_f_8world_cy_5World_kill;
  __pyx_vtable_8world_cy_World.kill_elderly = (void (*)(struct __pyx_obj_8world_cy_World *))__pyx_f_8world_cy_5World_kill_elderly;
  __pyx_vtable_8world_cy_World.hunt = (void (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_5World_hunt;
  __pyx_vtable_8world_cy_World.move = (void (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_5World_move;
  __pyx_vtable_8world_cy_World.stretch = (void (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_5World_stretch;
  __pyx_vtable_8world_cy_World.excrete = (void (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, double))__pyx_f_8world_cy_5World_excrete;
  __pyx_vtable_8world_cy_World.digest = (void (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *, double))__pyx_f_8world_cy_5World_digest;
  __pyx_vtable_8world_cy_World.try_hunt = (void (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_5World_try_hunt;
  __pyx_vtable_8world_cy_World.eat = (void (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_5World_eat;
  __pyx_vtable_8world_cy_World.act = (void (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_5World_act;
  __pyx_vtable_8world_cy_World.basal_metabolism = (void (*)(struct __pyx_obj_8world_cy_World *, struct __pyx_obj_8world_cy_Minion *))__pyx_f_8world_cy_5World_basal_metabolism;
  __pyx_vtable_8world_cy_World.control_all = (void (*)(struct __pyx_obj_8world_cy_World *))__pyx_f_8world_cy_5World_control_all;
  __pyx_vtable_8world_cy_World.act_all = (void (*)(struct __pyx_obj_8world_cy_World *))__pyx_f_8world_cy_5World_act_all;
  __pyx_vtable_8world_cy_World.basal_metabolism_all = (void (*)(struct __pyx_obj_8world_cy_World *))__pyx_f_8world_cy_5World_basal_metabolism_all;
  __pyx_vtable_8world_cy_World.render = (void (*)(struct __pyx_obj_8world_cy_World *))__pyx_f_8world_cy_5World_render;
  __pyx_vtable_8world_cy_World._total_mass = (double (*)(struct __pyx_obj_8world_cy_World *))__pyx_f_8world_cy_5World__total_mass;
  __pyx_vtable_8world_cy_World._total_minion_mass = (double (*)(struct __pyx_obj_8world_cy_World *))__pyx_f_8world_cy_5World__total_minion_mass;
  __pyx_vtable_8world_cy_World._total_min = (double (*)(struct __pyx_obj_8world_cy_World *))__pyx_f_8world_cy_5World__total_min;
  __pyx_vtable_8world_cy_World._exhausted = (int (*)(struct __pyx_obj_8world_cy_World *))__pyx_f_8world_cy_5World__exhausted;
  __pyx_vtable_8world_cy_World._get_avg_r = (double (*)(struct __pyx_obj_8world_cy_World *))__pyx_f_8world_cy_5World__get_avg_r;
  __pyx_vtable_8world_cy_World._get_avg_g = (double (*)(struct __pyx_obj_8world_cy_World *))__pyx_f_8world_cy_5World__get_avg_g;
  __pyx_vtable_8world_cy_World._get_avg_b = (double (*)(struct __pyx_obj_8world_cy_World *))__pyx_f_8world_cy_5World__get_avg_b;
  if (PyType_Ready(&__pyx_type_8world_cy_World) < 0) __PYX_ERR(1, 823, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8world_cy_World.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8world_cy_World.tp_dictoffset && __pyx_type_8world_cy_World.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8world_cy_World.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8world_cy_World.tp_dict, __pyx_vtabptr_8world_cy_World) < 0) __PYX_ERR(1, 823, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_World, (PyObject *)&__pyx_type_8world_cy_World) < 0) __PYX_ERR(1, 823, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8world_cy_World) < 0) __PYX_ERR(1, 823, __pyx_L1_error)
  __pyx_ptype_8world_cy_World = &__pyx_type_8world_cy_World;
  if (PyType_Ready(&__pyx_type_8world_cy___pyx_scope_struct__yield_l) < 0) __PYX_ERR(1, 219, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8world_cy___pyx_scope_struct__yield_l.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8world_cy___pyx_scope_struct__yield_l.tp_dictoffset && __pyx_type_8world_cy___pyx_scope_struct__yield_l.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8world_cy___pyx_scope_struct__yield_l.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8world_cy___pyx_scope_struct__yield_l = &__pyx_type_8world_cy___pyx_scope_struct__yield_l;
  if (PyType_Ready(&__pyx_type_8world_cy___pyx_scope_struct_1_get_colors) < 0) __PYX_ERR(1, 1592, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8world_cy___pyx_scope_struct_1_get_colors.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8world_cy___pyx_scope_struct_1_get_colors.tp_dictoffset && __pyx_type_8world_cy___pyx_scope_struct_1_get_colors.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8world_cy___pyx_scope_struct_1_get_colors.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8world_cy___pyx_scope_struct_1_get_colors = &__pyx_type_8world_cy___pyx_scope_struct_1_get_colors;
  if (PyType_Ready(&__pyx_type_8world_cy___pyx_scope_struct_2_body_rect) < 0) __PYX_ERR(1, 1605, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8world_cy___pyx_scope_struct_2_body_rect.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8world_cy___pyx_scope_struct_2_body_rect.tp_dictoffset && __pyx_type_8world_cy___pyx_scope_struct_2_body_rect.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8world_cy___pyx_scope_struct_2_body_rect.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8world_cy___pyx_scope_struct_2_body_rect = &__pyx_type_8world_cy___pyx_scope_struct_2_body_rect;
  if (PyType_Ready(&__pyx_type_8world_cy___pyx_scope_struct_3_geni_rect) < 0) __PYX_ERR(1, 1611, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8world_cy___pyx_scope_struct_3_geni_rect.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8world_cy___pyx_scope_struct_3_geni_rect.tp_dictoffset && __pyx_type_8world_cy___pyx_scope_struct_3_geni_rect.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8world_cy___pyx_scope_struct_3_geni_rect.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8world_cy___pyx_scope_struct_3_geni_rect = &__pyx_type_8world_cy___pyx_scope_struct_3_geni_rect;
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_array.tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_MemviewEnum.tp_dictoffset && __pyx_type___pyx_MemviewEnum.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_MemviewEnum.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(0, 330, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryview.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryview.tp_dictoffset && __pyx_type___pyx_memoryview.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryview.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(0, 330, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(0, 330, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(0, 965, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryviewslice.tp_dictoffset && __pyx_type___pyx_memoryviewslice.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryviewslice.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(0, 965, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(0, 965, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("fast_random"); if (!__pyx_t_1) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "uniform", (void (**)(void))&__pyx_f_11fast_random_uniform, "double (void)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "randint", (void (**)(void))&__pyx_f_11fast_random_randint, "int (int, int)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "randint_with_probs", (void (**)(void))&__pyx_f_11fast_random_randint_with_probs, "int (int, int, __Pyx_memviewslice)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "randbool", (void (**)(void))&__pyx_f_11fast_random_randbool, "int (void)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "multiple_uniform", (void (**)(void))&__pyx_f_11fast_random_multiple_uniform, "__Pyx_memviewslice (int)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "gaussian", (void (**)(void))&__pyx_f_11fast_random_gaussian, "double (void)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "multiple_gaussian", (void (**)(void))&__pyx_f_11fast_random_multiple_gaussian, "__Pyx_memviewslice (int)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "seed", (void (**)(void))&__pyx_f_11fast_random_seed, "void (void)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initworld_cy(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initworld_cy(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_world_cy(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_world_cy(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_world_cy(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  static PyThread_type_lock __pyx_t_3[8];
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'world_cy' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_world_cy(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("world_cy", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_world_cy) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "world_cy")) {
      if (unlikely(PyDict_SetItemString(modules, "world_cy", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_world_cy(void)", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "world_cy.pyx":4
 * # cython: profile=True
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * from libc.math cimport exp,sqrt,erf,log
 * from fast_random cimport uniform,randint,randbool,gaussian
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "world_cy.pyx":9
 * from fast_random cimport multiple_uniform,multiple_gaussian
 * from fast_random cimport randint_with_probs,seed
 * from random import sample             # <<<<<<<<<<<<<<
 * from cython.view cimport array as cvarray
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_sample);
  __Pyx_GIVEREF(__pyx_n_s_sample);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_sample);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_random, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_sample); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample, __pyx_t_1) < 0) __PYX_ERR(1, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":12
 * from cython.view cimport array as cvarray
 * 
 * seed()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_f_11fast_random_seed();

  /* "world_cy.pyx":16
 * 
 * cdef:
 *     int num_out=12             # <<<<<<<<<<<<<<
 *     int vision_range=5
 *     int vision_resolution=9
 */
  __pyx_v_8world_cy_num_out = 12;

  /* "world_cy.pyx":17
 * cdef:
 *     int num_out=12
 *     int vision_range=5             # <<<<<<<<<<<<<<
 *     int vision_resolution=9
 *     int vision_len=vision_range*vision_resolution
 */
  __pyx_v_8world_cy_vision_range = 5;

  /* "world_cy.pyx":18
 *     int num_out=12
 *     int vision_range=5
 *     int vision_resolution=9             # <<<<<<<<<<<<<<
 *     int vision_len=vision_range*vision_resolution
 *     int num_feature=5
 */
  __pyx_v_8world_cy_vision_resolution = 9;

  /* "world_cy.pyx":19
 *     int vision_range=5
 *     int vision_resolution=9
 *     int vision_len=vision_range*vision_resolution             # <<<<<<<<<<<<<<
 *     int num_feature=5
 *     int rough_idim=(vision_range)**2*num_feature
 */
  __pyx_v_8world_cy_vision_len = (__pyx_v_8world_cy_vision_range * __pyx_v_8world_cy_vision_resolution);

  /* "world_cy.pyx":20
 *     int vision_resolution=9
 *     int vision_len=vision_range*vision_resolution
 *     int num_feature=5             # <<<<<<<<<<<<<<
 *     int rough_idim=(vision_range)**2*num_feature
 *     int rough_wdim=rough_idim*num_out
 */
  __pyx_v_8world_cy_num_feature = 5;

  /* "world_cy.pyx":21
 *     int vision_len=vision_range*vision_resolution
 *     int num_feature=5
 *     int rough_idim=(vision_range)**2*num_feature             # <<<<<<<<<<<<<<
 *     int rough_wdim=rough_idim*num_out
 *     int clear_idim=3*vision_len**2
 */
  __pyx_v_8world_cy_rough_idim = (__Pyx_pow_long(((long)__pyx_v_8world_cy_vision_range), 2) * __pyx_v_8world_cy_num_feature);

  /* "world_cy.pyx":22
 *     int num_feature=5
 *     int rough_idim=(vision_range)**2*num_feature
 *     int rough_wdim=rough_idim*num_out             # <<<<<<<<<<<<<<
 *     int clear_idim=3*vision_len**2
 *     int linear_wdim=clear_idim*num_out
 */
  __pyx_v_8world_cy_rough_wdim = (__pyx_v_8world_cy_rough_idim * __pyx_v_8world_cy_num_out);

  /* "world_cy.pyx":23
 *     int rough_idim=(vision_range)**2*num_feature
 *     int rough_wdim=rough_idim*num_out
 *     int clear_idim=3*vision_len**2             # <<<<<<<<<<<<<<
 *     int linear_wdim=clear_idim*num_out
 *     double merge_thres=0.04
 */
  __pyx_v_8world_cy_clear_idim = (3 * __Pyx_pow_long(((long)__pyx_v_8world_cy_vision_len), 2));

  /* "world_cy.pyx":24
 *     int rough_wdim=rough_idim*num_out
 *     int clear_idim=3*vision_len**2
 *     int linear_wdim=clear_idim*num_out             # <<<<<<<<<<<<<<
 *     double merge_thres=0.04
 *     double mut_per_diff=3.0 #minimum number of mutations required for a species division, if every change is monotonic
 */
  __pyx_v_8world_cy_linear_wdim = (__pyx_v_8world_cy_clear_idim * __pyx_v_8world_cy_num_out);

  /* "world_cy.pyx":25
 *     int clear_idim=3*vision_len**2
 *     int linear_wdim=clear_idim*num_out
 *     double merge_thres=0.04             # <<<<<<<<<<<<<<
 *     double mut_per_diff=3.0 #minimum number of mutations required for a species division, if every change is monotonic
 *     double mut_rate=merge_thres/mut_per_diff
 */
  __pyx_v_8world_cy_merge_thres = 0.04;

  /* "world_cy.pyx":26
 *     int linear_wdim=clear_idim*num_out
 *     double merge_thres=0.04
 *     double mut_per_diff=3.0 #minimum number of mutations required for a species division, if every change is monotonic             # <<<<<<<<<<<<<<
 *     double mut_rate=merge_thres/mut_per_diff
 * cdef:
 */
  __pyx_v_8world_cy_mut_per_diff = 3.0;

  /* "world_cy.pyx":27
 *     double merge_thres=0.04
 *     double mut_per_diff=3.0 #minimum number of mutations required for a species division, if every change is monotonic
 *     double mut_rate=merge_thres/mut_per_diff             # <<<<<<<<<<<<<<
 * cdef:
 *     int xsize=200
 */
  if (unlikely(__pyx_v_8world_cy_mut_per_diff == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 27, __pyx_L1_error)
  }
  __pyx_v_8world_cy_mut_rate = (__pyx_v_8world_cy_merge_thres / __pyx_v_8world_cy_mut_per_diff);

  /* "world_cy.pyx":29
 *     double mut_rate=merge_thres/mut_per_diff
 * cdef:
 *     int xsize=200             # <<<<<<<<<<<<<<
 *     int ysize=150
 *     int min_maxsize=3
 */
  __pyx_v_8world_cy_xsize = 0xC8;

  /* "world_cy.pyx":30
 * cdef:
 *     int xsize=200
 *     int ysize=150             # <<<<<<<<<<<<<<
 *     int min_maxsize=3
 *     int max_maxsize=8
 */
  __pyx_v_8world_cy_ysize = 0x96;

  /* "world_cy.pyx":31
 *     int xsize=200
 *     int ysize=150
 *     int min_maxsize=3             # <<<<<<<<<<<<<<
 *     int max_maxsize=8
 *     double min_uptake=0.1
 */
  __pyx_v_8world_cy_min_maxsize = 3;

  /* "world_cy.pyx":32
 *     int ysize=150
 *     int min_maxsize=3
 *     int max_maxsize=8             # <<<<<<<<<<<<<<
 *     double min_uptake=0.1
 *     double max_uptake=0.7
 */
  __pyx_v_8world_cy_max_maxsize = 8;

  /* "world_cy.pyx":33
 *     int min_maxsize=3
 *     int max_maxsize=8
 *     double min_uptake=0.1             # <<<<<<<<<<<<<<
 *     double max_uptake=0.7
 *     int min_maxage=1500
 */
  __pyx_v_8world_cy_min_uptake = 0.1;

  /* "world_cy.pyx":34
 *     int max_maxsize=8
 *     double min_uptake=0.1
 *     double max_uptake=0.7             # <<<<<<<<<<<<<<
 *     int min_maxage=1500
 *     int max_maxage=1500
 */
  __pyx_v_8world_cy_max_uptake = 0.7;

  /* "world_cy.pyx":35
 *     double min_uptake=0.1
 *     double max_uptake=0.7
 *     int min_maxage=1500             # <<<<<<<<<<<<<<
 *     int max_maxage=1500
 * cdef:
 */
  __pyx_v_8world_cy_min_maxage = 0x5DC;

  /* "world_cy.pyx":36
 *     double max_uptake=0.7
 *     int min_maxage=1500
 *     int max_maxage=1500             # <<<<<<<<<<<<<<
 * cdef:
 *     double avg_consum_rate=0.01
 */
  __pyx_v_8world_cy_max_maxage = 0x5DC;

  /* "world_cy.pyx":38
 *     int max_maxage=1500
 * cdef:
 *     double avg_consum_rate=0.01             # <<<<<<<<<<<<<<
 *     double consum_exp=0.7
 * 
 */
  __pyx_v_8world_cy_avg_consum_rate = 0.01;

  /* "world_cy.pyx":39
 * cdef:
 *     double avg_consum_rate=0.01
 *     double consum_exp=0.7             # <<<<<<<<<<<<<<
 * 
 * def set_consum(a,e):
 */
  __pyx_v_8world_cy_consum_exp = 0.7;

  /* "world_cy.pyx":41
 *     double consum_exp=0.7
 * 
 * def set_consum(a,e):             # <<<<<<<<<<<<<<
 *     global avg_consum_rate
 *     global consum_exp
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8world_cy_1set_consum, NULL, __pyx_n_s_world_cy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_consum, __pyx_t_2) < 0) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":47
 *     consum_exp=e
 * 
 * def set_size(x,y):             # <<<<<<<<<<<<<<
 *     global xsize
 *     global ysize
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8world_cy_3set_size, NULL, __pyx_n_s_world_cy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_size, __pyx_t_2) < 0) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":53
 *     ysize=y
 * 
 * def set_traits_range(ms1,ms2,ut1,ut2,ma1,ma2):             # <<<<<<<<<<<<<<
 *     global min_maxsize,max_maxsize,min_uptake,max_uptake,min_maxage,max_maxage
 *     min_maxsize=ms1
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8world_cy_5set_traits_range, NULL, __pyx_n_s_world_cy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_traits_range, __pyx_t_2) < 0) __PYX_ERR(1, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":63
 * 
 * 
 * def set_vision(new_vision_range,new_vision_resolution):             # <<<<<<<<<<<<<<
 *     global vision_range
 *     global vision_resolution
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8world_cy_7set_vision, NULL, __pyx_n_s_world_cy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_vision, __pyx_t_2) < 0) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":69
 *     vision_resolution=new_vision_resolution
 * 
 * def set_heredity(new_merge_thres,new_mut_per_diff):             # <<<<<<<<<<<<<<
 *     global merge_thres
 *     global mut_per_diff
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8world_cy_9set_heredity, NULL, __pyx_n_s_world_cy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_heredity, __pyx_t_2) < 0) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":355
 *     return LinearDNA(colorTrait,maxsizeTrait,uptakeTrait,maxageTrait,weightsTrait)
 * 
 * def write_list_of_dnas_file(l,filename):             # <<<<<<<<<<<<<<
 *     f=open(filename,'w')
 *     f.write(str(len(l))+"\n")
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8world_cy_15write_list_of_dnas_file, NULL, __pyx_n_s_world_cy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_write_list_of_dnas_file, __pyx_t_2) < 0) __PYX_ERR(1, 355, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":393
 *     f.write("#end")
 *     f.close()
 * def read_list_of_dnas_file(filename):             # <<<<<<<<<<<<<<
 *     f=open(filename,'r')
 *     lines=f.readlines()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8world_cy_17read_list_of_dnas_file, NULL, __pyx_n_s_world_cy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_list_of_dnas_file, __pyx_t_2) < 0) __PYX_ERR(1, 393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":707
 *     def get_mi(self):
 *         return self.mi
 * def dll_from_list(mi_list):             # <<<<<<<<<<<<<<
 *     dll=MinionDLL()
 *     for mi in mi_list:
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8world_cy_21dll_from_list, NULL, __pyx_n_s_world_cy); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dll_from_list, __pyx_t_2) < 0) __PYX_ERR(1, 707, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Brain(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8world_cy_23__pyx_unpickle_Brain, NULL, __pyx_n_s_world_cy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Brain, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "world_cy.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * # cython: profile=True
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":209
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":316
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":317
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_3[0] = PyThread_allocate_lock();
  __pyx_t_3[1] = PyThread_allocate_lock();
  __pyx_t_3[2] = PyThread_allocate_lock();
  __pyx_t_3[3] = PyThread_allocate_lock();
  __pyx_t_3[4] = PyThread_allocate_lock();
  __pyx_t_3[5] = PyThread_allocate_lock();
  __pyx_t_3[6] = PyThread_allocate_lock();
  __pyx_t_3[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_3, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":549
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":995
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init world_cy", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init world_cy");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
      __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return tstate->use_tracing && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* MemviewSliceInit */
static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (memviewslice->memview || memviewslice->data) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#ifdef HAVE_STDARG_PROTOTYPES
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview || (PyObject *) memview == Py_None)
        return;
    if (__pyx_get_slice_count(memview) < 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (first_time) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview ) {
        return;
    } else if ((PyObject *) memview == Py_None) {
        memslice->memview = NULL;
        return;
    }
    if (__pyx_get_slice_count(memview) <= 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (last_time) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* BufferIndexError */
static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* pyobject_as_double */
static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
    float_value = PyNumber_Float(obj);  if ((0)) goto bad;
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* None */
static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* None */
static CYTHON_INLINE int __Pyx_mod_int(int a, int b) {
    int r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* None */
static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* None */
static CYTHON_INLINE int __Pyx_div_int(int a, int b) {
    int q = a / b;
    int r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* None */
static CYTHON_INLINE double __Pyx_mod_double(double a, double b) {
    double r = fmod(a, b);
    r += ((r != 0) & ((r < 0) ^ (b < 0))) * b;
    return r;
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* None */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


/* MemviewSliceIsContig */
static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* MemviewDtypeToObject */
static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp) {
    return (PyObject *) PyFloat_FromDouble(*(double *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj) {
    double value = __pyx_PyFloat_AsDouble(obj);
    if ((value == (double)-1) && PyErr_Occurred())
        return 0;
    *(double *) itemp = value;
    return 1;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* TypeInfoCompare */
  static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
  static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (buf->strides[dim] != sizeof(void *)) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (buf->strides[dim] != buf->itemsize) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (stride < buf->itemsize) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (spec & (__Pyx_MEMVIEW_PTR)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (buf->suboffsets) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (buf->suboffsets && buf->suboffsets[dim] >= 0) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (!buf->suboffsets || (buf->suboffsets[dim] < 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (stride * buf->itemsize != buf->strides[i] &&
                    buf->shape[i] > 1)
            {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (stride * buf->itemsize != buf->strides[i] &&
                    buf->shape[i] > 1) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (buf->ndim != ndim) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
    }
    if ((unsigned) buf->itemsize != dtype->size) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    for (i = 0; i < ndim; i++) {
        spec = axes_specs[i];
        if (!__pyx_check_strides(buf, i, ndim, spec))
            goto fail;
        if (!__pyx_check_suboffsets(buf, i, ndim, spec))
            goto fail;
    }
    if (buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* None */
  static CYTHON_INLINE long __Pyx_pow_long(long b, long e) {
    long t = b;
    switch (e) {
        case 3:
            t *= b;
        CYTHON_FALLTHROUGH;
        case 2:
            t *= b;
        CYTHON_FALLTHROUGH;
        case 1:
            return t;
        case 0:
            return 1;
    }
    #if 1
    if (unlikely(e<0)) return 0;
    #endif
    t = 1;
    while (likely(e)) {
        t *= (b * (e&1)) | ((~e)&1);
        b *= b;
        e >>= 1;
    }
    return t;
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_size_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_size_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* FromPyCTupleUtility */
  static __pyx_ctuple_int__and_int__and_int __pyx_convert__from_py___pyx_ctuple_int__and_int__and_int(PyObject * o) {
    __pyx_ctuple_int__and_int__and_int result;
    if (!PyTuple_Check(o) || PyTuple_GET_SIZE(o) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected %.16s of size %d, got %.200s", "a tuple", 3, Py_TYPE(o)->tp_name);
        goto bad;
    }
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        result.f0 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(o, 0));
        if ((result.f0 == (int)-1) && PyErr_Occurred()) goto bad;
        result.f1 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(o, 1));
        if ((result.f1 == (int)-1) && PyErr_Occurred()) goto bad;
        result.f2 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(o, 2));
        if ((result.f2 == (int)-1) && PyErr_Occurred()) goto bad;
#else
    {
        PyObject *item;
        item = PySequence_ITEM(o, 0);  if (unlikely(!item)) goto bad;
        result.f0 = __Pyx_PyInt_As_int(item);
        Py_DECREF(item);
        if ((result.f0 == (int)-1) && PyErr_Occurred()) goto bad;
        item = PySequence_ITEM(o, 1);  if (unlikely(!item)) goto bad;
        result.f1 = __Pyx_PyInt_As_int(item);
        Py_DECREF(item);
        if ((result.f1 == (int)-1) && PyErr_Occurred()) goto bad;
        item = PySequence_ITEM(o, 2);  if (unlikely(!item)) goto bad;
        result.f2 = __Pyx_PyInt_As_int(item);
        Py_DECREF(item);
        if ((result.f2 == (int)-1) && PyErr_Occurred()) goto bad;
    }
#endif
    return result;
bad:
    return result;
}

/* FromPyCTupleUtility */
  static __pyx_ctuple_int__and_int __pyx_convert__from_py___pyx_ctuple_int__and_int(PyObject * o) {
    __pyx_ctuple_int__and_int result;
    if (!PyTuple_Check(o) || PyTuple_GET_SIZE(o) != 2) {
        PyErr_Format(PyExc_TypeError, "Expected %.16s of size %d, got %.200s", "a tuple", 2, Py_TYPE(o)->tp_name);
        goto bad;
    }
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        result.f0 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(o, 0));
        if ((result.f0 == (int)-1) && PyErr_Occurred()) goto bad;
        result.f1 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(o, 1));
        if ((result.f1 == (int)-1) && PyErr_Occurred()) goto bad;
#else
    {
        PyObject *item;
        item = PySequence_ITEM(o, 0);  if (unlikely(!item)) goto bad;
        result.f0 = __Pyx_PyInt_As_int(item);
        Py_DECREF(item);
        if ((result.f0 == (int)-1) && PyErr_Occurred()) goto bad;
        item = PySequence_ITEM(o, 1);  if (unlikely(!item)) goto bad;
        result.f1 = __Pyx_PyInt_As_int(item);
        Py_DECREF(item);
        if ((result.f1 == (int)-1) && PyErr_Occurred()) goto bad;
    }
#endif
    return result;
bad:
    return result;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_size_t(const char *itemp) {
    return (PyObject *) __Pyx_PyInt_FromSize_t(*(size_t *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_size_t(const char *itemp, PyObject *obj) {
    size_t value = __Pyx_PyInt_As_size_t(obj);
    if ((value == (size_t)-1) && PyErr_Occurred())
        return 0;
    *(size_t *) itemp = value;
    return 1;
}

/* ToPyCTupleUtility */
  static PyObject* __pyx_convert__to_py___pyx_ctuple_int__and_int(__pyx_ctuple_int__and_int value) {
    PyObject* item = NULL;
    PyObject* result = PyTuple_New(2);
    if (!result) goto bad;
        item = __Pyx_PyInt_From_int(value.f0);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 0, item);
        item = __Pyx_PyInt_From_int(value.f1);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 1, item);
    return result;
bad:
    Py_XDECREF(item);
    Py_XDECREF(result);
    return NULL;
}

/* ToPyCTupleUtility */
  static PyObject* __pyx_convert__to_py___pyx_ctuple_int__and_int__and_int(__pyx_ctuple_int__and_int__and_int value) {
    PyObject* item = NULL;
    PyObject* result = PyTuple_New(3);
    if (!result) goto bad;
        item = __Pyx_PyInt_From_int(value.f0);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 0, item);
        item = __Pyx_PyInt_From_int(value.f1);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 1, item);
        item = __Pyx_PyInt_From_int(value.f2);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 2, item);
    return result;
bad:
    Py_XDECREF(item);
    Py_XDECREF(result);
    return NULL;
}

/* Print */
  #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end_2, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end_2, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* MemviewSliceCopyTemplate */
  static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (from_mvs->suboffsets[i] >= 0) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* PrintOne */
  #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
  static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) ((char) 0 - (char) 1), const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* FetchCommonType */
  static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CoroutineBase */
  #include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
  static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
  #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
  static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_int(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_int, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_object(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_object, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
  static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* FunctionImport */
  #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
